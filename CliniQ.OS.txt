DATABASE.JS

// backend/utils/database.js

import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';

dotenv.config();

let pool;

const connect = () => {
  if (!pool) {
    pool = new Pool({
      user: process.env.DATABASE_USER,
      host: process.env.DATABASE_HOST,
      database: process.env.DATABASE_NAME,
      password: process.env.DATABASE_PASSWORD,
      port: process.env.DATABASE_PORT,
    });

    pool.on('error', (err) => {
      console.error('Unexpected error on idle client', err);
      process.exit(-1);
    });
  }
  return pool;
};

export default {
  query: (text, params) => connect().query(text, params),
};



PACKAGE.JSON

{
  "name": "backend",
  "version": "1.0.0",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "start:dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "pg": "^8.7.1",
    "dotenv": "^10.0.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.12"
  }



DATACONTROLLER.JS

// backend/controllers/DataController.js

import DataModel from '../models/DataModel.js';
import { validationResult } from 'express-validator';

// Get all data
export const getAllData = async (req, res) => {
  try {
    const data = await DataModel.getData();
    res.json(data);
  } catch (error) {
    console.error('Error fetching data:', error);
    res.status(500).json({ error: 'Failed to fetch data', details: error.message });
  }
};

// Get data by ID
export const getDataById = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  try {
    const data = await DataModel.getDataById(req.params.id);
    if (!data) {
      return res.status(404).json({ error: 'Data not found' });
    }
    res.json(data);
  } catch (error) {
    console.error('Error fetching data by ID:', error);
    res.status(500).json({ error: 'Failed to fetch data by ID', details: error.message });
  }
};

// Add new data
export const addData = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  const { name, value } = req.body;
  try {
    const newData = await DataModel.addData({ name, value });
    res.status(201).json(newData);
  } catch (error) {
    console.error('Error adding new data:', error);
    res.status(500).json({ error: 'Failed to add new data', details: error.message });
  }
};

// Update data
export const updateData = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  const { name, value } = req.body;
  try {
    const updatedData = await DataModel.updateData(req.params.id, { name, value });
    if (!updatedData) {
      return res.status(404).json({ error: 'Data not found' });
    }
    res.json(updatedData);
  } catch (error) {
    console.error('Error updating data:', error);
    res.status(500).json({ error: 'Failed to update data', details: error.message });
  }
};

// Delete data
export const deleteData = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  try {
    const deletedData = await DataModel.deleteData(req.params.id);
    if (!deletedData) {
      return res.status(404).json({ error: 'Data not found' });
    }
    res.json({ message: 'Data deleted successfully' });
  } catch (error) {
    console.error('Error deleting data:', error);
    res.status(500).json({ error: 'Failed to delete data', details: error.message });
  }
};



.ENV.EXAMPLE




DATAMODEL.JS

// backend/models/DataModel.js

import database from '../utils/database.js';

// Get all data
const getData = async () => {
  try {
    const { rows } = await database.query('SELECT * FROM data');
    return rows;
  } catch (error) {
    console.error('Database query error (getData):', error);
    throw error;
  }
};

// Get data by ID
const getDataById = async (id) => {
  try {
    const { rows } = await database.query('SELECT * FROM data WHERE id = $1', [id]);
    if (rows.length === 0) {
      return null;
    }
    return rows[0];
  } catch (error) {
    console.error('Database query error (getDataById):', error);
    throw error;
  }
};

// Add new data
const addData = async ({ name, value }) => {
  try {
    const { rows } = await database.query(
      'INSERT INTO data (name, value) VALUES ($1, $2) RETURNING *',
      [name, value]
    );
    return rows[0];
  } catch (error) {
    console.error('Database insert error (addData):', error);
    throw error;
  }
};

// Update data
const updateData = async (id, { name, value }) => {
  try {
    const { rows } = await database.query(
      'UPDATE data SET name = $1, value = $2 WHERE id = $3 RETURNING *',
      [name, value, id]
    );
    if (rows.length === 0) {
      return null;
    }
    return rows[0];
  } catch (error) {
    console.error('Database update error (updateData):', error);
    throw error;
  }
};

// Delete data
const deleteData = async (id) => {
  try {
    const { rows } = await database.query('DELETE FROM data WHERE id = $1 RETURNING *', [id]);
    if (rows.length === 0) {
      return null;
    }
    return rows[0];
  } catch (error) {
    console.error('Database delete error (deleteData):', error);
    throw error;
  }
};

export default {
  getData,
  getDataById,
  addData,
  updateData,
  deleteData
};



INDEX.JS

// backend/routes/index.js

import { Router } from 'express';
import { check } from 'express-validator';
import {
   getAllData,
   getDataById,
   addData,
   updateData,
   deleteData,
} from '../controllers/DataController.js';

const router = Router();

router.get('/data', getAllData);

router.get(
   '/data/:id',
   [check('id', 'ID must be a valid UUID').isUUID()],
   getDataById
);

router.post(
   '/data',
   [
      check('name', 'Name is required').not().isEmpty(),
      check('value', 'Value is required').not().isEmpty(),
   ],
   addData
);

router.put(
   '/data/:id',
   [
      check('id', 'ID must be a valid UUID').isUUID(),
      check('name', 'Name is required').optional().not().isEmpty(),
      check('value', 'Value is required').optional().not().isEmpty(),
   ],
   updateData
);

router.delete(
   '/data/:id',
   [check('id', 'ID must be a valid UUID').isUUID()],
   deleteData
);

export default router;



.ENV




APP.JS

// backend/app.js

import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import routes from './routes/index.js';
import { authMiddleware, loggerMiddleware } from '../middleware';

const app = express();

// Middleware setup
app.use(cors());
app.use(bodyParser.json());
app.use(authMiddleware);
app.use(loggerMiddleware);

// Routes
app.use('/api', routes);

// Error handling middleware
app.use((err, req, res, next) => {
   console.error(err.stack);
   res.status(500).send('Something broke!');
});

export default app;



SERVER.JS

// backend/server.js

import app from './app.js';
import database from './utils/database.js';

const PORT = process.env.PORT || 5000;

// Connect to the database
database.query('SELECT 1')
  .then(() => {
    // Start the server
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
  })
  .catch((err) => {
    console.error('Database connection error:', err);
    process.exit(1);
  });



