        getTargetData(e, t) {
          const n = this.xs.get(t) || null;
          return zi.resolve(n);
        }
        addMatchingKeys(e, t, n) {
          return this.ks.gs(t, n), zi.resolve();
        }
        removeMatchingKeys(e, t, n) {
          this.ks.ps(t, n);
          const r = this.persistence.referenceDelegate,
            i = [];
          return (
            r &&
              t.forEach(t => {
                i.push(r.markPotentiallyOrphaned(e, t));
              }),
            zi.waitFor(i)
          );
        }
        removeMatchingKeysForTargetId(e, t) {
          return this.ks.Is(t), zi.resolve();
        }
        getMatchingKeysForTargetId(e, t) {
          const n = this.ks.Es(t);
          return zi.resolve(n);
        }
        containsKey(e, t) {
          return zi.resolve(this.ks.containsKey(t));
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class oh {
        constructor(e, t) {
          (this.$s = {}),
            (this.overlays = {}),
            (this.Os = new no(0)),
            (this.Fs = !1),
            (this.Fs = !0),
            (this.referenceDelegate = e(this)),
            (this.Bs = new ih(this)),
            (this.indexManager = new ll()),
            (this.remoteDocumentCache = (function (e) {
              return new nh(e);
            })(e => this.referenceDelegate.Ls(e))),
            (this.serializer = new Ac(t)),
            (this.qs = new Xl(this.serializer));
        }
        start() {
          return Promise.resolve();
        }
        shutdown() {
          return (this.Fs = !1), Promise.resolve();
        }
        get started() {
          return this.Fs;
        }
        setDatabaseDeletedListener() {}
        setNetworkEnabled() {}
        getIndexManager(e) {
          return this.indexManager;
        }
        getDocumentOverlayCache(e) {
          let t = this.overlays[e.toKey()];
          return t || ((t = new Jl()), (this.overlays[e.toKey()] = t)), t;
        }
        getMutationQueue(e, t) {
          let n = this.$s[e.toKey()];
          return n || ((n = new th(t, this.referenceDelegate)), (this.$s[e.toKey()] = n)), n;
        }
        getTargetCache() {
          return this.Bs;
        }
        getRemoteDocumentCache() {
          return this.remoteDocumentCache;
        }
        getBundleCache() {
          return this.qs;
        }
        runTransaction(e, t, n) {
          ti('MemoryPersistence', 'Starting transaction:', e);
          const r = new sh(this.Os.next());
          return (
            this.referenceDelegate.Us(),
            n(r)
              .next(e => this.referenceDelegate.Ks(r).next(() => e))
              .toPromise()
              .then(e => (r.raiseOnCommittedEvent(), e))
          );
        }
        Gs(e, t) {
          return zi.or(Object.values(this.$s).map(n => () => n.containsKey(e, t)));
        }
      }
      class sh extends $i {
        constructor(e) {
          super(), (this.currentSequenceNumber = e);
        }
      }
      class ah {
        constructor(e) {
          (this.persistence = e), (this.Qs = new Zl()), (this.js = null);
        }
        static zs(e) {
          return new ah(e);
        }
        get Ws() {
          if (this.js) return this.js;
          throw oi();
        }
        addReference(e, t, n) {
          return this.Qs.addReference(n, t), this.Ws.delete(n.toString()), zi.resolve();
        }
        removeReference(e, t, n) {
          return this.Qs.removeReference(n, t), this.Ws.add(n.toString()), zi.resolve();
        }
        markPotentiallyOrphaned(e, t) {
          return this.Ws.add(t.toString()), zi.resolve();
        }
        removeTarget(e, t) {
          this.Qs.Is(t.targetId).forEach(e => this.Ws.add(e.toString()));
          const n = this.persistence.getTargetCache();
          return n
            .getMatchingKeysForTargetId(e, t.targetId)
            .next(e => {
              e.forEach(e => this.Ws.add(e.toString()));
            })
            .next(() => n.removeTargetData(e, t));
        }
        Us() {
          this.js = new Set();
        }
        Ks(e) {
          const t = this.persistence.getRemoteDocumentCache().newChangeBuffer();
          return zi
            .forEach(this.Ws, n => {
              const r = Ni.fromPath(n);
              return this.Hs(e, r).next(e => {
                e || t.removeEntry(r, Ai.min());
              });
            })
            .next(() => ((this.js = null), t.apply(e)));
        }
        updateLimboDocument(e, t) {
          return this.Hs(e, t).next(e => {
            e ? this.Ws.delete(t.toString()) : this.Ws.add(t.toString());
          });
        }
        Ls(e) {
          return 0;
        }
        Hs(e, t) {
          return zi.or([
            () => zi.resolve(this.Qs.containsKey(t)),
            () => this.persistence.getTargetCache().containsKey(e, t),
            () => this.persistence.Gs(e, t)
          ]);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class uh {
        constructor(e) {
          this.serializer = e;
        }
        O(e, t, n, r) {
          const i = new Gi('createOrUpgrade', t);
          n < 1 &&
            r >= 1 &&
            ((function (e) {
              e.createObjectStore('owner');
            })(e),
            (function (e) {
              e.createObjectStore('mutationQueues', { keyPath: 'userId' }),
                e.createObjectStore('mutations', { keyPath: 'batchId', autoIncrement: !0 }).createIndex('userMutationsIndex', lo, { unique: !0 }),
                e.createObjectStore('documentMutations');
            })(e),
            ch(e),
            (function (e) {
              e.createObjectStore('remoteDocuments');
            })(e));
          let o = zi.resolve();
          return (
            n < 3 &&
              r >= 3 &&
              (0 !== n &&
                ((function (e) {
                  e.deleteObjectStore('targetDocuments'), e.deleteObjectStore('targets'), e.deleteObjectStore('targetGlobal');
                })(e),
                ch(e)),
              (o = o.next(() =>
                (function (e) {
                  const t = e.store('targetGlobal'),
                    n = { highestTargetId: 0, highestListenSequenceNumber: 0, lastRemoteSnapshotVersion: Ai.min().toTimestamp(), targetCount: 0 };
                  return t.put('targetGlobalKey', n);
                })(i)
              ))),
            n < 4 &&
              r >= 4 &&
              (0 !== n &&
                (o = o.next(() =>
                  (function (e, t) {
                    return t
                      .store('mutations')
                      .j()
                      .next(n => {
                        e.deleteObjectStore('mutations'),
                          e
                            .createObjectStore('mutations', { keyPath: 'batchId', autoIncrement: !0 })
                            .createIndex('userMutationsIndex', lo, { unique: !0 });
                        const r = t.store('mutations'),
                          i = n.map(e => r.put(e));
                        return zi.waitFor(i);
                      });
                  })(e, i)
                )),
              (o = o.next(() => {
                !(function (e) {
                  e.createObjectStore('clientMetadata', { keyPath: 'clientId' });
                })(e);
              }))),
            n < 5 && r >= 5 && (o = o.next(() => this.Ys(i))),
            n < 6 &&
              r >= 6 &&
              (o = o.next(
                () => (
                  (function (e) {
                    e.createObjectStore('remoteDocumentGlobal');
                  })(e),
                  this.Xs(i)
                )
              )),
            n < 7 && r >= 7 && (o = o.next(() => this.Zs(i))),
            n < 8 && r >= 8 && (o = o.next(() => this.ti(e, i))),
            n < 9 &&
              r >= 9 &&
              (o = o.next(() => {
                !(function (e) {
                  e.objectStoreNames.contains('remoteDocumentChanges') && e.deleteObjectStore('remoteDocumentChanges');
                })(e);
              })),
            n < 10 && r >= 10 && (o = o.next(() => this.ei(i))),
            n < 11 &&
              r >= 11 &&
              (o = o.next(() => {
                !(function (e) {
                  e.createObjectStore('bundles', { keyPath: 'bundleId' });
                })(e),
                  (function (e) {
                    e.createObjectStore('namedQueries', { keyPath: 'name' });
                  })(e);
              })),
            n < 12 &&
              r >= 12 &&
              (o = o.next(() => {
                !(function (e) {
                  const t = e.createObjectStore('documentOverlays', { keyPath: Ao });
                  t.createIndex('collectionPathOverlayIndex', xo, { unique: !1 }), t.createIndex('collectionGroupOverlayIndex', Co, { unique: !1 });
                })(e);
              })),
            n < 13 &&
              r >= 13 &&
              (o = o
                .next(() =>
                  (function (e) {
                    const t = e.createObjectStore('remoteDocumentsV14', { keyPath: go });
                    t.createIndex('documentKeyIndex', mo), t.createIndex('collectionGroupIndex', vo);
                  })(e)
                )
                .next(() => this.ni(e, i))
                .next(() => e.deleteObjectStore('remoteDocuments'))),
            n < 14 && r >= 14 && (o = o.next(() => this.si(e, i))),
            n < 15 &&
              r >= 15 &&
              (o = o.next(() =>
                (function (e) {
                  e
                    .createObjectStore('indexConfiguration', { keyPath: 'indexId', autoIncrement: !0 })
                    .createIndex('collectionGroupIndex', 'collectionGroup', { unique: !1 }),
                    e.createObjectStore('indexState', { keyPath: Io }).createIndex('sequenceNumberIndex', Eo, { unique: !1 }),
                    e.createObjectStore('indexEntries', { keyPath: So }).createIndex('documentKeyIndex', To, { unique: !1 });
                })(e)
              )),
            o
          );
        }
        Xs(e) {
          let t = 0;
          return e
            .store('remoteDocuments')
            .X((e, n) => {
              t += Il(n);
            })
            .next(() => {
              const n = { byteSize: t };
              return e.store('remoteDocumentGlobal').put('remoteDocumentGlobalKey', n);
            });
        }
        Ys(e) {
          const t = e.store('mutationQueues'),
            n = e.store('mutations');
          return t.j().next(t =>
            zi.forEach(t, t => {
              const r = IDBKeyRange.bound([t.userId, -1], [t.userId, t.lastAcknowledgedBatchId]);
              return n.j('userMutationsIndex', r).next(n =>
                zi.forEach(n, n => {
                  si(n.userId === t.userId);
                  const r = Rc(this.serializer, n);
                  return _l(e, t.userId, r).next(() => {});
                })
              );
            })
          );
        }
        Zs(e) {
          const t = e.store('targetDocuments'),
            n = e.store('remoteDocuments');
          return e
            .store('targetGlobal')
            .get('targetGlobalKey')
            .next(e => {
              const r = [];
              return n
                .X((n, i) => {
                  const o = new Ci(n),
                    s = (function (e) {
                      return [0, so(e)];
                    })(o);
                  r.push(
                    t
                      .get(s)
                      .next(n => (n ? zi.resolve() : (n => t.put({ targetId: 0, path: so(n), sequenceNumber: e.highestListenSequenceNumber }))(o)))
                  );
                })
                .next(() => zi.waitFor(r));
            });
        }
        ti(e, t) {
          e.createObjectStore('collectionParents', { keyPath: _o });
          const n = t.store('collectionParents'),
            r = new hl(),
            i = e => {
              if (r.add(e)) {
                const t = e.lastSegment(),
                  r = e.popLast();
                return n.put({ collectionId: t, parent: so(r) });
              }
            };
          return t
            .store('remoteDocuments')
            .X({ Y: !0 }, (e, t) => {
              const n = new Ci(e);
              return i(n.popLast());
            })
            .next(() =>
              t.store('documentMutations').X({ Y: !0 }, ([e, t, n], r) => {
                const o = co(t);
                return i(o.popLast());
              })
            );
        }
        ei(e) {
          const t = e.store('targets');
          return t.X((e, n) => {
            const r = Pc(n),
              i = Dc(this.serializer, r);
            return t.put(i);
          });
        }
        ni(e, t) {
          const n = t.store('remoteDocuments'),
            r = [];
          return n
            .X((e, n) => {
