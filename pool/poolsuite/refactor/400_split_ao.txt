              case 'ascii':
              case 'latin1':
              case 'binary':
                return C(this, e, t, n);
              case 'base64':
                return k(this, e, t, n);
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return O(this, e, t, n);
              default:
                if (o) throw new TypeError('Unknown encoding: ' + r);
                (r = ('' + r).toLowerCase()), (o = !0);
            }
        }),
        (c.prototype.toJSON = function () {
          return { type: 'Buffer', data: Array.prototype.slice.call(this._arr || this, 0) };
        });
      var P = 4096;
      function D(e) {
        var t = e.length;
        if (t <= P) return String.fromCharCode.apply(String, e);
        var n = '',
          r = 0;
        while (r < t) n += String.fromCharCode.apply(String, e.slice(r, (r += P)));
        return n;
      }
      function L(e, t, n) {
        var r = '';
        n = Math.min(e.length, n);
        for (var i = t; i < n; ++i) r += String.fromCharCode(127 & e[i]);
        return r;
      }
      function j(e, t, n) {
        var r = '';
        n = Math.min(e.length, n);
        for (var i = t; i < n; ++i) r += String.fromCharCode(e[i]);
        return r;
      }
      function M(e, t, n) {
        var r = e.length;
        (!t || t < 0) && (t = 0), (!n || n < 0 || n > r) && (n = r);
        for (var i = '', o = t; o < n; ++o) i += Z[e[o]];
        return i;
      }
      function F(e, t, n) {
        for (var r = e.slice(t, n), i = '', o = 0; o < r.length - 1; o += 2) i += String.fromCharCode(r[o] + 256 * r[o + 1]);
        return i;
      }
      function U(e, t, n) {
        if (e % 1 !== 0 || e < 0) throw new RangeError('offset is not uint');
        if (e + t > n) throw new RangeError('Trying to access beyond buffer length');
      }
      function V(e, t, n, r, i, o) {
        if (!c.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (t > i || t < o) throw new RangeError('"value" argument is out of bounds');
        if (n + r > e.length) throw new RangeError('Index out of range');
      }
      function B(e, t, n, r, i, o) {
        if (n + r > e.length) throw new RangeError('Index out of range');
        if (n < 0) throw new RangeError('Index out of range');
      }
      function $(e, t, n, r, o) {
        return (t = +t), (n >>>= 0), o || B(e, t, n, 4, 34028234663852886e22, -34028234663852886e22), i.write(e, t, n, r, 23, 4), n + 4;
      }
      function q(e, t, n, r, o) {
        return (t = +t), (n >>>= 0), o || B(e, t, n, 8, 17976931348623157e292, -17976931348623157e292), i.write(e, t, n, r, 52, 8), n + 8;
      }
      (c.prototype.slice = function (e, t) {
        var n = this.length;
        (e = ~~e),
          (t = void 0 === t ? n : ~~t),
          e < 0 ? ((e += n), e < 0 && (e = 0)) : e > n && (e = n),
          t < 0 ? ((t += n), t < 0 && (t = 0)) : t > n && (t = n),
          t < e && (t = e);
        var r = this.subarray(e, t);
        return Object.setPrototypeOf(r, c.prototype), r;
      }),
        (c.prototype.readUintLE = c.prototype.readUIntLE =
          function (e, t, n) {
            (e >>>= 0), (t >>>= 0), n || U(e, t, this.length);
            var r = this[e],
              i = 1,
              o = 0;
            while (++o < t && (i *= 256)) r += this[e + o] * i;
            return r;
          }),
        (c.prototype.readUintBE = c.prototype.readUIntBE =
          function (e, t, n) {
            (e >>>= 0), (t >>>= 0), n || U(e, t, this.length);
            var r = this[e + --t],
              i = 1;
            while (t > 0 && (i *= 256)) r += this[e + --t] * i;
            return r;
          }),
        (c.prototype.readUint8 = c.prototype.readUInt8 =
          function (e, t) {
            return (e >>>= 0), t || U(e, 1, this.length), this[e];
          }),
        (c.prototype.readUint16LE = c.prototype.readUInt16LE =
          function (e, t) {
            return (e >>>= 0), t || U(e, 2, this.length), this[e] | (this[e + 1] << 8);
          }),
        (c.prototype.readUint16BE = c.prototype.readUInt16BE =
          function (e, t) {
            return (e >>>= 0), t || U(e, 2, this.length), (this[e] << 8) | this[e + 1];
          }),
        (c.prototype.readUint32LE = c.prototype.readUInt32LE =
          function (e, t) {
            return (e >>>= 0), t || U(e, 4, this.length), (this[e] | (this[e + 1] << 8) | (this[e + 2] << 16)) + 16777216 * this[e + 3];
          }),
        (c.prototype.readUint32BE = c.prototype.readUInt32BE =
          function (e, t) {
            return (e >>>= 0), t || U(e, 4, this.length), 16777216 * this[e] + ((this[e + 1] << 16) | (this[e + 2] << 8) | this[e + 3]);
          }),
        (c.prototype.readIntLE = function (e, t, n) {
          (e >>>= 0), (t >>>= 0), n || U(e, t, this.length);
          var r = this[e],
            i = 1,
            o = 0;
          while (++o < t && (i *= 256)) r += this[e + o] * i;
          return (i *= 128), r >= i && (r -= Math.pow(2, 8 * t)), r;
        }),
        (c.prototype.readIntBE = function (e, t, n) {
          (e >>>= 0), (t >>>= 0), n || U(e, t, this.length);
          var r = t,
            i = 1,
            o = this[e + --r];
          while (r > 0 && (i *= 256)) o += this[e + --r] * i;
          return (i *= 128), o >= i && (o -= Math.pow(2, 8 * t)), o;
        }),
        (c.prototype.readInt8 = function (e, t) {
          return (e >>>= 0), t || U(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
        }),
        (c.prototype.readInt16LE = function (e, t) {
          (e >>>= 0), t || U(e, 2, this.length);
          var n = this[e] | (this[e + 1] << 8);
          return 32768 & n ? 4294901760 | n : n;
        }),
        (c.prototype.readInt16BE = function (e, t) {
          (e >>>= 0), t || U(e, 2, this.length);
          var n = this[e + 1] | (this[e] << 8);
          return 32768 & n ? 4294901760 | n : n;
        }),
        (c.prototype.readInt32LE = function (e, t) {
          return (e >>>= 0), t || U(e, 4, this.length), this[e] | (this[e + 1] << 8) | (this[e + 2] << 16) | (this[e + 3] << 24);
        }),
        (c.prototype.readInt32BE = function (e, t) {
          return (e >>>= 0), t || U(e, 4, this.length), (this[e] << 24) | (this[e + 1] << 16) | (this[e + 2] << 8) | this[e + 3];
        }),
        (c.prototype.readFloatLE = function (e, t) {
          return (e >>>= 0), t || U(e, 4, this.length), i.read(this, e, !0, 23, 4);
        }),
        (c.prototype.readFloatBE = function (e, t) {
          return (e >>>= 0), t || U(e, 4, this.length), i.read(this, e, !1, 23, 4);
        }),
        (c.prototype.readDoubleLE = function (e, t) {
          return (e >>>= 0), t || U(e, 8, this.length), i.read(this, e, !0, 52, 8);
        }),
        (c.prototype.readDoubleBE = function (e, t) {
          return (e >>>= 0), t || U(e, 8, this.length), i.read(this, e, !1, 52, 8);
        }),
        (c.prototype.writeUintLE = c.prototype.writeUIntLE =
          function (e, t, n, r) {
            if (((e = +e), (t >>>= 0), (n >>>= 0), !r)) {
              var i = Math.pow(2, 8 * n) - 1;
              V(this, e, t, n, i, 0);
            }
            var o = 1,
              s = 0;
            this[t] = 255 & e;
            while (++s < n && (o *= 256)) this[t + s] = (e / o) & 255;
            return t + n;
          }),
        (c.prototype.writeUintBE = c.prototype.writeUIntBE =
          function (e, t, n, r) {
            if (((e = +e), (t >>>= 0), (n >>>= 0), !r)) {
              var i = Math.pow(2, 8 * n) - 1;
              V(this, e, t, n, i, 0);
            }
            var o = n - 1,
              s = 1;
            this[t + o] = 255 & e;
            while (--o >= 0 && (s *= 256)) this[t + o] = (e / s) & 255;
            return t + n;
          }),
        (c.prototype.writeUint8 = c.prototype.writeUInt8 =
          function (e, t, n) {
            return (e = +e), (t >>>= 0), n || V(this, e, t, 1, 255, 0), (this[t] = 255 & e), t + 1;
          }),
        (c.prototype.writeUint16LE = c.prototype.writeUInt16LE =
          function (e, t, n) {
            return (e = +e), (t >>>= 0), n || V(this, e, t, 2, 65535, 0), (this[t] = 255 & e), (this[t + 1] = e >>> 8), t + 2;
          }),
        (c.prototype.writeUint16BE = c.prototype.writeUInt16BE =
          function (e, t, n) {
            return (e = +e), (t >>>= 0), n || V(this, e, t, 2, 65535, 0), (this[t] = e >>> 8), (this[t + 1] = 255 & e), t + 2;
          }),
        (c.prototype.writeUint32LE = c.prototype.writeUInt32LE =
          function (e, t, n) {
            return (
              (e = +e),
              (t >>>= 0),
              n || V(this, e, t, 4, 4294967295, 0),
              (this[t + 3] = e >>> 24),
              (this[t + 2] = e >>> 16),
              (this[t + 1] = e >>> 8),
              (this[t] = 255 & e),
              t + 4
            );
          }),
        (c.prototype.writeUint32BE = c.prototype.writeUInt32BE =
          function (e, t, n) {
            return (
              (e = +e),
              (t >>>= 0),
              n || V(this, e, t, 4, 4294967295, 0),
              (this[t] = e >>> 24),
              (this[t + 1] = e >>> 16),
              (this[t + 2] = e >>> 8),
              (this[t + 3] = 255 & e),
              t + 4
            );
          }),
        (c.prototype.writeIntLE = function (e, t, n, r) {
          if (((e = +e), (t >>>= 0), !r)) {
            var i = Math.pow(2, 8 * n - 1);
            V(this, e, t, n, i - 1, -i);
          }
          var o = 0,
            s = 1,
            a = 0;
          this[t] = 255 & e;
          while (++o < n && (s *= 256)) e < 0 && 0 === a && 0 !== this[t + o - 1] && (a = 1), (this[t + o] = (((e / s) >> 0) - a) & 255);
          return t + n;
        }),
        (c.prototype.writeIntBE = function (e, t, n, r) {
          if (((e = +e), (t >>>= 0), !r)) {
            var i = Math.pow(2, 8 * n - 1);
            V(this, e, t, n, i - 1, -i);
          }
          var o = n - 1,
            s = 1,
            a = 0;
          this[t + o] = 255 & e;
          while (--o >= 0 && (s *= 256)) e < 0 && 0 === a && 0 !== this[t + o + 1] && (a = 1), (this[t + o] = (((e / s) >> 0) - a) & 255);
          return t + n;
        }),
        (c.prototype.writeInt8 = function (e, t, n) {
          return (e = +e), (t >>>= 0), n || V(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), (this[t] = 255 & e), t + 1;
        }),
        (c.prototype.writeInt16LE = function (e, t, n) {
          return (e = +e), (t >>>= 0), n || V(this, e, t, 2, 32767, -32768), (this[t] = 255 & e), (this[t + 1] = e >>> 8), t + 2;
        }),
        (c.prototype.writeInt16BE = function (e, t, n) {
          return (e = +e), (t >>>= 0), n || V(this, e, t, 2, 32767, -32768), (this[t] = e >>> 8), (this[t + 1] = 255 & e), t + 2;
        }),
        (c.prototype.writeInt32LE = function (e, t, n) {
          return (
            (e = +e),
            (t >>>= 0),
            n || V(this, e, t, 4, 2147483647, -2147483648),
            (this[t] = 255 & e),
            (this[t + 1] = e >>> 8),
            (this[t + 2] = e >>> 16),
            (this[t + 3] = e >>> 24),
            t + 4
          );
        }),
        (c.prototype.writeInt32BE = function (e, t, n) {
          return (
            (e = +e),
            (t >>>= 0),
            n || V(this, e, t, 4, 2147483647, -2147483648),
            e < 0 && (e = 4294967295 + e + 1),
            (this[t] = e >>> 24),
            (this[t + 1] = e >>> 16),
            (this[t + 2] = e >>> 8),
            (this[t + 3] = 255 & e),
            t + 4
          );
        }),
        (c.prototype.writeFloatLE = function (e, t, n) {
          return $(this, e, t, !0, n);
        }),
        (c.prototype.writeFloatBE = function (e, t, n) {
          return $(this, e, t, !1, n);
        }),
        (c.prototype.writeDoubleLE = function (e, t, n) {
          return q(this, e, t, !0, n);
        }),
        (c.prototype.writeDoubleBE = function (e, t, n) {
          return q(this, e, t, !1, n);
        }),
        (c.prototype.copy = function (e, t, n, r) {
          if (!c.isBuffer(e)) throw new TypeError('argument should be a Buffer');
          if ((n || (n = 0), r || 0 === r || (r = this.length), t >= e.length && (t = e.length), t || (t = 0), r > 0 && r < n && (r = n), r === n))
            return 0;
          if (0 === e.length || 0 === this.length) return 0;
          if (t < 0) throw new RangeError('targetStart out of bounds');
          if (n < 0 || n >= this.length) throw new RangeError('Index out of range');
          if (r < 0) throw new RangeError('sourceEnd out of bounds');
          r > this.length && (r = this.length), e.length - t < r - n && (r = e.length - t + n);
          var i = r - n;
          return (
            this === e && 'function' === typeof Uint8Array.prototype.copyWithin
              ? this.copyWithin(t, n, r)
              : Uint8Array.prototype.set.call(e, this.subarray(n, r), t),
            i
          );
        }),
        (c.prototype.fill = function (e, t, n, r) {
          if ('string' === typeof e) {
            if (
              ('string' === typeof t ? ((r = t), (t = 0), (n = this.length)) : 'string' === typeof n && ((r = n), (n = this.length)),
              void 0 !== r && 'string' !== typeof r)
            )
              throw new TypeError('encoding must be a string');
            if ('string' === typeof r && !c.isEncoding(r)) throw new TypeError('Unknown encoding: ' + r);
            if (1 === e.length) {
              var i = e.charCodeAt(0);
              (('utf8' === r && i < 128) || 'latin1' === r) && (e = i);
            }
          } else 'number' === typeof e ? (e &= 255) : 'boolean' === typeof e && (e = Number(e));
          if (t < 0 || this.length < t || this.length < n) throw new RangeError('Out of range index');
          if (n <= t) return this;
          var o;
          if (((t >>>= 0), (n = void 0 === n ? this.length : n >>> 0), e || (e = 0), 'number' === typeof e)) for (o = t; o < n; ++o) this[o] = e;
          else {
            var s = c.isBuffer(e) ? e : c.from(e, r),
              a = s.length;
            if (0 === a) throw new TypeError('The value "' + e + '" is invalid for argument "value"');
            for (o = 0; o < n - t; ++o) this[o + t] = s[o % a];
          }
          return this;
        });
      var z = /[^+/0-9A-Za-z-_]/g;
      function G(e) {
        if (((e = e.split('=')[0]), (e = e.trim().replace(z, '')), e.length < 2)) return '';
        while (e.length % 4 !== 0) e += '=';
        return e;
      }
      function W(e, t) {
        var n;
        t = t || 1 / 0;
        for (var r = e.length, i = null, o = [], s = 0; s < r; ++s) {
          if (((n = e.charCodeAt(s)), n > 55295 && n < 57344)) {
            if (!i) {
              if (n > 56319) {
                (t -= 3) > -1 && o.push(239, 191, 189);
                continue;
              }
              if (s + 1 === r) {
                (t -= 3) > -1 && o.push(239, 191, 189);
                continue;
              }
              i = n;
              continue;
            }
            if (n < 56320) {
              (t -= 3) > -1 && o.push(239, 191, 189), (i = n);
              continue;
            }
            n = 65536 + (((i - 55296) << 10) | (n - 56320));
          } else i && (t -= 3) > -1 && o.push(239, 191, 189);
          if (((i = null), n < 128)) {
            if ((t -= 1) < 0) break;
            o.push(n);
          } else if (n < 2048) {
            if ((t -= 2) < 0) break;
            o.push((n >> 6) | 192, (63 & n) | 128);
          } else if (n < 65536) {
            if ((t -= 3) < 0) break;
            o.push((n >> 12) | 224, ((n >> 6) & 63) | 128, (63 & n) | 128);
          } else {
            if (!(n < 1114112)) throw new Error('Invalid code point');
            if ((t -= 4) < 0) break;
            o.push((n >> 18) | 240, ((n >> 12) & 63) | 128, ((n >> 6) & 63) | 128, (63 & n) | 128);
          }
        }
        return o;
      }
      function H(e) {
        for (var t = [], n = 0; n < e.length; ++n) t.push(255 & e.charCodeAt(n));
        return t;
      }
      function K(e, t) {
        for (var n, r, i, o = [], s = 0; s < e.length; ++s) {
          if ((t -= 2) < 0) break;
          (n = e.charCodeAt(s)), (r = n >> 8), (i = n % 256), o.push(i), o.push(r);
        }
        return o;
      }
      function Q(e) {
        return r.toByteArray(G(e));
      }
      function Y(e, t, n, r) {
        for (var i = 0; i < r; ++i) {
          if (i + n >= t.length || i >= e.length) break;
