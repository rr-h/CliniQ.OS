       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ft extends et {
        constructor(e, t, n, r = null) {
          super('password', n), (this._email = e), (this._password = t), (this._tenantId = r);
        }
        static _fromEmailAndPassword(e, t) {
          return new ft(e, t, 'password');
        }
        static _fromEmailAndCode(e, t, n = null) {
          return new ft(e, t, 'emailLink', n);
        }
        toJSON() {
          return { email: this._email, password: this._password, signInMethod: this.signInMethod, tenantId: this._tenantId };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e;
          if ((null === t || void 0 === t ? void 0 : t.email) && (null === t || void 0 === t ? void 0 : t.password)) {
            if ('password' === t.signInMethod) return this._fromEmailAndPassword(t.email, t.password);
            if ('emailLink' === t.signInMethod) return this._fromEmailAndCode(t.email, t.password, t.tenantId);
          }
          return null;
        }
        async _getIdTokenResponse(e) {
          var t;
          switch (this.signInMethod) {
            case 'password':
              const n = { returnSecureToken: !0, email: this._email, password: this._password, clientType: 'CLIENT_TYPE_WEB' };
              if (null === (t = e._getRecaptchaConfig()) || void 0 === t ? void 0 : t.emailPasswordEnabled) {
                const t = await qe(e, n, 'signInWithPassword');
                return it(e, t);
              }
              return it(e, n).catch(async t => {
                if ('auth/missing-recaptcha-token' === t.code) {
                  console.log(
                    'Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.'
                  );
                  const t = await qe(e, n, 'signInWithPassword');
                  return it(e, t);
                }
                return Promise.reject(t);
              });
            case 'emailLink':
              return lt(e, { email: this._email, oobCode: this._password });
            default:
              w(e, 'internal-error');
          }
        }
        async _linkToIdToken(e, t) {
          switch (this.signInMethod) {
            case 'password':
              return nt(e, { idToken: t, returnSecureToken: !0, email: this._email, password: this._password });
            case 'emailLink':
              return ht(e, { idToken: t, email: this._email, oobCode: this._password });
            default:
              w(e, 'internal-error');
          }
        }
        _getReauthenticationResolver(e) {
          return this._getIdTokenResponse(e);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function dt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithIdp', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const pt = 'http://localhost';
      class gt extends et {
        constructor() {
          super(...arguments), (this.pendingToken = null);
        }
        static _fromParams(e) {
          const t = new gt(e.providerId, e.signInMethod);
          return (
            e.idToken || e.accessToken
              ? (e.idToken && (t.idToken = e.idToken),
                e.accessToken && (t.accessToken = e.accessToken),
                e.nonce && !e.pendingToken && (t.nonce = e.nonce),
                e.pendingToken && (t.pendingToken = e.pendingToken))
              : e.oauthToken && e.oauthTokenSecret
                ? ((t.accessToken = e.oauthToken), (t.secret = e.oauthTokenSecret))
                : w('argument-error'),
            t
          );
        }
        toJSON() {
          return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
          };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e,
            { providerId: n, signInMethod: r } = t,
            i = s(t, ['providerId', 'signInMethod']);
          if (!n || !r) return null;
          const o = new gt(n, r);
          return (
            (o.idToken = i.idToken || void 0),
            (o.accessToken = i.accessToken || void 0),
            (o.secret = i.secret),
            (o.nonce = i.nonce),
            (o.pendingToken = i.pendingToken || null),
            o
          );
        }
        _getIdTokenResponse(e) {
          const t = this.buildRequest();
          return dt(e, t);
        }
        _linkToIdToken(e, t) {
          const n = this.buildRequest();
          return (n.idToken = t), dt(e, n);
        }
        _getReauthenticationResolver(e) {
          const t = this.buildRequest();
          return (t.autoCreate = !1), dt(e, t);
        }
        buildRequest() {
          const e = { requestUri: pt, returnSecureToken: !0 };
          if (this.pendingToken) e.pendingToken = this.pendingToken;
          else {
            const t = {};
            this.idToken && (t['id_token'] = this.idToken),
              this.accessToken && (t['access_token'] = this.accessToken),
              this.secret && (t['oauth_token_secret'] = this.secret),
              (t['providerId'] = this.providerId),
              this.nonce && !this.pendingToken && (t['nonce'] = this.nonce),
              (e.postBody = (0, i.xO)(t));
          }
          return e;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function mt(e, t) {
        return F(e, 'POST', '/v1/accounts:sendVerificationCode', M(e, t));
      }
      async function vt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, t));
      }
      async function yt(e, t) {
        const n = await V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, t));
        if (n.temporaryProof) throw q(e, 'account-exists-with-different-credential', n);
        return n;
      }
      const wt = { ['USER_NOT_FOUND']: 'user-not-found' };
      async function bt(e, t) {
        const n = Object.assign(Object.assign({}, t), { operation: 'REAUTH' });
        return V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, n), wt);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class _t extends et {
        constructor(e) {
          super('phone', 'phone'), (this.params = e);
        }
        static _fromVerification(e, t) {
          return new _t({ verificationId: e, verificationCode: t });
        }
        static _fromTokenResponse(e, t) {
          return new _t({ phoneNumber: e, temporaryProof: t });
        }
        _getIdTokenResponse(e) {
          return vt(e, this._makeVerificationRequest());
        }
        _linkToIdToken(e, t) {
          return yt(e, Object.assign({ idToken: t }, this._makeVerificationRequest()));
        }
        _getReauthenticationResolver(e) {
          return bt(e, this._makeVerificationRequest());
        }
        _makeVerificationRequest() {
          const { temporaryProof: e, phoneNumber: t, verificationId: n, verificationCode: r } = this.params;
          return e && t ? { temporaryProof: e, phoneNumber: t } : { sessionInfo: n, code: r };
        }
        toJSON() {
          const e = { providerId: this.providerId };
          return (
            this.params.phoneNumber && (e.phoneNumber = this.params.phoneNumber),
            this.params.temporaryProof && (e.temporaryProof = this.params.temporaryProof),
            this.params.verificationCode && (e.verificationCode = this.params.verificationCode),
            this.params.verificationId && (e.verificationId = this.params.verificationId),
            e
          );
        }
        static fromJSON(e) {
          'string' === typeof e && (e = JSON.parse(e));
          const { verificationId: t, verificationCode: n, phoneNumber: r, temporaryProof: i } = e;
          return n || t || r || i ? new _t({ verificationId: t, verificationCode: n, phoneNumber: r, temporaryProof: i }) : null;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function It(e) {
        switch (e) {
          case 'recoverEmail':
            return 'RECOVER_EMAIL';
          case 'resetPassword':
            return 'PASSWORD_RESET';
          case 'signIn':
            return 'EMAIL_SIGNIN';
          case 'verifyEmail':
            return 'VERIFY_EMAIL';
          case 'verifyAndChangeEmail':
            return 'VERIFY_AND_CHANGE_EMAIL';
          case 'revertSecondFactorAddition':
            return 'REVERT_SECOND_FACTOR_ADDITION';
          default:
            return null;
        }
      }
      function Et(e) {
        const t = (0, i.zd)((0, i.pd)(e))['link'],
          n = t ? (0, i.zd)((0, i.pd)(t))['deep_link_id'] : null,
          r = (0, i.zd)((0, i.pd)(e))['deep_link_id'],
          o = r ? (0, i.zd)((0, i.pd)(r))['link'] : null;
        return o || r || n || t || e;
      }
      class St {
        constructor(e) {
          var t, n, r, o, s, a;
          const u = (0, i.zd)((0, i.pd)(e)),
            c = null !== (t = u['apiKey']) && void 0 !== t ? t : null,
            l = null !== (n = u['oobCode']) && void 0 !== n ? n : null,
            h = It(null !== (r = u['mode']) && void 0 !== r ? r : null);
          S(c && l && h, 'argument-error'),
            (this.apiKey = c),
            (this.operation = h),
            (this.code = l),
            (this.continueUrl = null !== (o = u['continueUrl']) && void 0 !== o ? o : null),
            (this.languageCode = null !== (s = u['languageCode']) && void 0 !== s ? s : null),
            (this.tenantId = null !== (a = u['tenantId']) && void 0 !== a ? a : null);
        }
        static parseLink(e) {
          const t = Et(e);
          try {
            return new St(t);
          } catch (n) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class Tt {
        constructor() {
          this.providerId = Tt.PROVIDER_ID;
        }
        static credential(e, t) {
          return ft._fromEmailAndPassword(e, t);
        }
        static credentialWithLink(e, t) {
          const n = St.parseLink(t);
          return S(n, 'argument-error'), ft._fromEmailAndCode(e, n.code, n.tenantId);
        }
      }
      (Tt.PROVIDER_ID = 'password'), (Tt.EMAIL_PASSWORD_SIGN_IN_METHOD = 'password'), (Tt.EMAIL_LINK_SIGN_IN_METHOD = 'emailLink');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class At {
        constructor(e) {
          (this.providerId = e), (this.defaultLanguageCode = null), (this.customParameters = {});
        }
        setDefaultLanguage(e) {
          this.defaultLanguageCode = e;
        }
        setCustomParameters(e) {
          return (this.customParameters = e), this;
        }
        getCustomParameters() {
          return this.customParameters;
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class xt extends At {
        constructor() {
          super(...arguments), (this.scopes = []);
        }
        addScope(e) {
          return this.scopes.includes(e) || this.scopes.push(e), this;
        }
        getScopes() {
          return [...this.scopes];
        }
      }
      class Ct extends xt {
        static credentialFromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e;
          return S('providerId' in t && 'signInMethod' in t, 'argument-error'), gt._fromParams(t);
        }
        credential(e) {
          return this._credential(Object.assign(Object.assign({}, e), { nonce: e.rawNonce }));
        }
        _credential(e) {
          return (
            S(e.idToken || e.accessToken, 'argument-error'),
            gt._fromParams(Object.assign(Object.assign({}, e), { providerId: this.providerId, signInMethod: this.providerId }))
          );
        }
        static credentialFromResult(e) {
          return Ct.oauthCredentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Ct.oauthCredentialFromTaggedObject(e.customData || {});
        }
        static oauthCredentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { oauthIdToken: t, oauthAccessToken: n, oauthTokenSecret: r, pendingToken: i, nonce: o, providerId: s } = e;
          if (!n && !r && !t && !i) return null;
          if (!s) return null;
          try {
            return new Ct(s)._credential({ idToken: t, accessToken: n, nonce: o, pendingToken: i });
          } catch (a) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class kt extends xt {
        constructor() {
          super('facebook.com');
        }
        static credential(e) {
          return gt._fromParams({ providerId: kt.PROVIDER_ID, signInMethod: kt.FACEBOOK_SIGN_IN_METHOD, accessToken: e });
        }
        static credentialFromResult(e) {
          return kt.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return kt.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e || !('oauthAccessToken' in e)) return null;
          if (!e.oauthAccessToken) return null;
          try {
            return kt.credential(e.oauthAccessToken);
          } catch (t) {
            return null;
          }
        }
      }
      (kt.FACEBOOK_SIGN_IN_METHOD = 'facebook.com'), (kt.PROVIDER_ID = 'facebook.com');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class Ot extends xt {
        constructor() {
          super('google.com'), this.addScope('profile');
        }
        static credential(e, t) {
