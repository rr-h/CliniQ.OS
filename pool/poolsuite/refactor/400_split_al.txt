        remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
            if (Object.keys(e.userPropertiesOperations).length > 0)
              return this._logEvent(de.IDENTIFY_EVENT, null, null, e.userPropertiesOperations, null, null, null, t, n, r);
            sn(t, n, 0, 'No request sent', { reason: 'No user property operations' });
          } else
            qe.log.error('Invalid identify input type. Expected Identify object but saw ' + ye(e)),
              sn(t, n, 0, 'No request sent', { reason: 'Invalid identify input type' });
        else sn(t, n, 0, 'No request sent', { reason: 'API key is not set' });
      }),
        (Gt.prototype.groupIdentify = function (e, t, n, r, i, o) {
          if (this._shouldDeferCall()) return this._q.push(['groupIdentify'].concat(Array.prototype.slice.call(arguments, 0)));
          if (this._apiKeySet('groupIdentify()'))
            if (qe.validateInput(e, 'group_type', 'string') && !qe.isEmptyString(e))
              if (null !== t && void 0 !== t)
                if (('object' === ye(n) && Object.prototype.hasOwnProperty.call(n, '_q') && (n = Zt(new Ot(), n)), n instanceof Ot)) {
                  if (Object.keys(n.userPropertiesOperations).length > 0)
                    return this._logEvent(de.GROUP_IDENTIFY_EVENT, null, null, null, re({}, e, t), n.userPropertiesOperations, null, r, i, o);
                  sn(r, i, 0, 'No request sent', { reason: 'No group property operations' });
                } else
                  qe.log.error('Invalid identify input type. Expected Identify object but saw ' + ye(n)),
                    sn(r, i, 0, 'No request sent', { reason: 'Invalid identify input type' });
              else sn(r, i, 0, 'No request sent', { reason: 'Invalid group name' });
            else sn(r, i, 0, 'No request sent', { reason: 'Invalid group type' });
          else sn(r, i, 0, 'No request sent', { reason: 'API key is not set' });
        }),
        (Gt.prototype.setVersionName = function (e) {
          if (this._shouldDeferCall()) return this._q.push(['setVersionName'].concat(Array.prototype.slice.call(arguments, 0)));
          qe.validateInput(e, 'versionName', 'string') && (this.options.versionName = e);
        }),
        (Gt.prototype._logEvent = function (e, t, n, r, i, o, s, a, u, c) {
          if ((Kt(this), e))
            if (this.options.optOut) sn(a, u, 0, 'No request sent', { reason: 'optOut is set to true' });
            else
              try {
                var l;
                l = e === de.IDENTIFY_EVENT || e === de.GROUP_IDENTIFY_EVENT ? this.nextIdentifyId() : this.nextEventId();
                var h = this.nextSequenceNumber(),
                  f = 'number' === ye(s) ? s : new Date().getTime();
                c
                  ? (this._sessionId = -1)
                  : (!this._sessionId || !this._lastEventTime || f - this._lastEventTime > this.options.sessionTimeout) &&
                    ((this._sessionId = f), this._runNewSessionStartCallbacks()),
                  (this._lastEventTime = f),
                  Xt(this);
                var d = this._ua.browser.name,
                  p = this._ua.browser.major,
                  g = this._ua.device.model || this._ua.os.name,
                  m = this._ua.device.vendor;
                r = r || {};
                var v = J({}, this._apiPropertiesTrackingOptions);
                (n = J(J({}, n || {}), v)), (t = t || {}), (i = i || {}), (o = o || {});
                var y = {
                  device_id: this.options.deviceId,
                  user_id: this.options.userId,
                  timestamp: f,
                  event_id: l,
                  session_id: this._sessionId || -1,
                  event_type: e,
                  version_name: this.options.versionName || null,
                  platform: nn(this, 'platform') ? this.options.platform : null,
                  os_name: (nn(this, 'os_name') && d) || null,
                  os_version: (nn(this, 'os_version') && p) || null,
                  device_model: (nn(this, 'device_model') && g) || null,
                  device_manufacturer: (nn(this, 'device_manufacturer') && m) || null,
                  language: nn(this, 'language') ? this.options.language : null,
                  api_properties: n,
                  event_properties: qe.truncate(qe.validateProperties(t)),
                  user_properties: qe.truncate(qe.validateProperties(r)),
                  uuid: Lt(),
                  library: this.options.library,
                  sequence_number: h,
                  groups: qe.truncate(qe.validateGroups(i)),
                  group_properties: qe.truncate(qe.validateProperties(o)),
                  user_agent: this._userAgent,
                  partner_id: this.options.partnerId || null
                };
                return (
                  en(this) &&
                    (y.plan = {
                      branch: this.options.plan.branch || void 0,
                      source: this.options.plan.source || void 0,
                      version: this.options.plan.version || void 0,
                      versionId: this.options.plan.versionId || void 0
                    }),
                  tn(this) &&
                    (y.ingestion_metadata = {
                      source_name: this.options.ingestionMetadata.sourceName || void 0,
                      source_version: this.options.ingestionMetadata.sourceVersion || void 0
                    }),
                  e === de.IDENTIFY_EVENT || e === de.GROUP_IDENTIFY_EVENT
                    ? (this._unsentIdentifys.push({ event: y, callback: a, errorCallback: u }), this._limitEventsQueued(this._unsentIdentifys))
                    : (this._unsentEvents.push({ event: y, callback: a, errorCallback: u }), this._limitEventsQueued(this._unsentEvents)),
                  this.options.saveEvents && this.saveEvents(),
                  this._sendEventsIfReady(),
                  e === de.IDENTIFY_EVENT &&
                    this._connector &&
                    this._connector.identityStore
                      .editIdentity()
                      .updateUserProperties(qe.truncate(qe.validateProperties(r)))
                      .commit(),
                  l
                );
              } catch (fn) {
                qe.log.error(fn);
              }
          else sn(a, u, 0, 'No request sent', { reason: 'Missing eventType' });
        });
      var en = function (e) {
          return e.options.plan && (e.options.plan.source || e.options.plan.branch || e.options.plan.version || e.options.plan.versionId);
        },
        tn = function (e) {
          return e.options.ingestionMetadata && (e.options.ingestionMetadata.sourceName || e.options.ingestionMetadata.sourceVersion);
        },
        nn = function (e, t) {
          return !!e.options.trackingOptions[t];
        },
        rn = function (e) {
          for (var t = ['city', 'country', 'dma', 'ip_address', 'region'], n = {}, r = 0; r < t.length; r++) {
            var i = t[r];
            nn(e, i) || (n[i] = !1);
          }
          return n;
        };
      (Gt.prototype._limitEventsQueued = function (e) {
        if (e.length > this.options.savedMaxCount) {
          var t = e.splice(0, e.length - this.options.savedMaxCount);
          t.forEach(function (e) {
            sn(e.callback, e.errorCallback, 0, 'No request sent', {
              reason: 'Event dropped because options.savedMaxCount exceeded. User may be offline or have a content blocker'
            });
          });
        }
      }),
        (Gt.prototype.logEvent = function (e, t, n, r) {
          var i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
          return this._shouldDeferCall()
            ? this._q.push(['logEvent'].concat(Array.prototype.slice.call(arguments, 0)))
            : this.logEventWithTimestamp(e, t, null, n, r, i);
        }),
        (Gt.prototype.logEventWithTimestamp = function (e, t, n, r, i) {
          var o = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
          return this._shouldDeferCall()
            ? this._q.push(['logEventWithTimestamp'].concat(Array.prototype.slice.call(arguments, 0)))
            : this._apiKeySet('logEvent()')
              ? qe.validateInput(e, 'eventType', 'string')
                ? qe.isEmptyString(e)
                  ? (sn(r, i, 0, 'No request sent', { reason: 'Missing eventType' }), -1)
                  : (qe.validateInput(o, 'outOfSession', 'boolean') || sn(r, i, 0, 'No request sent', { reason: 'Invalid outOfSession value' }),
                    this._logEvent(e, t, null, null, null, null, n, r, i, o))
                : (sn(r, i, 0, 'No request sent', { reason: 'Invalid type for eventType' }), -1)
              : (sn(r, i, 0, 'No request sent', { reason: 'API key not set' }), -1);
        }),
        (Gt.prototype.logEventWithGroups = function (e, t, n, r, i) {
          var o = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
          return this._shouldDeferCall()
            ? this._q.push(['logEventWithGroups'].concat(Array.prototype.slice.call(arguments, 0)))
            : this._apiKeySet('logEventWithGroups()')
              ? qe.validateInput(e, 'eventType', 'string')
                ? (qe.validateInput(o, 'outOfSession', 'boolean') ||
                    sn(event.callback, event.errorCallback, 0, 'No request sent', { reason: 'Invalid outOfSession value' }),
                  this._logEvent(e, t, null, null, n, null, null, r, i, o))
                : (sn(event.callback, event.errorCallback, 0, 'No request sent', { reason: 'Invalid type for eventType' }), -1)
              : (sn(event.callback, event.errorCallback, 0, 'No request sent', { reason: 'API key not set' }), -1);
        });
      var on = function (e) {
          return !isNaN(parseFloat(e)) && isFinite(e);
        },
        sn = function (e, t, n, r, i) {
          'function' === ye(e) && e(n, r, i), 'function' === ye(t) && t(n, r, i);
        };
      (Gt.prototype.logRevenueV2 = function (e) {
        if (this._shouldDeferCall()) return this._q.push(['logRevenueV2'].concat(Array.prototype.slice.call(arguments, 0)));
        if (this._apiKeySet('logRevenueV2()'))
          if (('object' === ye(e) && Object.prototype.hasOwnProperty.call(e, '_q') && (e = Zt(new Dt(), e)), e instanceof Dt)) {
            if (e && e._isValidRevenue()) return this.logEvent(de.REVENUE_EVENT, e._toJSONObject());
          } else qe.log.error('Invalid revenue input type. Expected Revenue object but saw ' + ye(e));
      }),
        (Gt.prototype.logRevenue = function (e, t, n) {
          return this._shouldDeferCall()
            ? this._q.push(['logRevenue'].concat(Array.prototype.slice.call(arguments, 0)))
            : this._apiKeySet('logRevenue()') && on(e) && (void 0 === t || on(t))
              ? this._logEvent(
                  de.REVENUE_EVENT,
                  {},
                  { productId: n, special: 'revenue_amount', quantity: t || 1, price: e },
                  null,
                  null,
                  null,
                  null,
                  null
                )
              : -1;
        }),
        (Gt.prototype._logErrorsOnEvents = function (e, t, n, r) {
          for (var i = ['_unsentEvents', '_unsentIdentifys'], o = 0; o < i.length; o++)
            for (var s = i[o], a = '_unsentEvents' === s ? e : t, u = 0; u < this[s].length; u++) {
              var c = this[s][u];
              c.event.event_id <= a && c.errorCallback && c.errorCallback(n, r);
            }
        }),
        (Gt.prototype.removeEvents = function (e, t, n, r) {
          an(this, '_unsentEvents', e, n, r), an(this, '_unsentIdentifys', t, n, r);
        });
      var an = function (e, t, n, r, i) {
        if (!(n < 0)) {
          for (var o = [], s = 0; s < e[t].length; s++) {
            var a = e[t][s];
            a.event.event_id > n ? o.push(a) : a.callback && a.callback(r, i);
          }
          e[t] = o;
        }
      };
      (Gt.prototype.sendEvents = function () {
        if (this._apiKeySet('sendEvents()')) {
          if (this.options.optOut) this.removeEvents(1 / 0, 1 / 0, 0, 'No request sent', { reason: 'Opt out is set to true' });
          else if (0 !== this._unsentCount()) {
            if (this.options.transport !== de.TRANSPORT_BEACON) {
              if (this._sending) return;
              this._sending = !0;
            }
            var e = this.options.forceHttps || 'https:' === ge.location.protocol ? 'https' : 'http',
              t = e + '://' + this.options.apiEndpoint,
              n = Math.min(this._unsentCount(), this.options.uploadBatchSize),
              r = this._mergeEventsAndIdentifys(n),
              i = r.maxEventId,
              o = r.maxIdentifyId,
              s = JSON.stringify(
                r.eventsToSend.map(function (e) {
                  var t = e.event;
                  return t;
                })
              ),
              u = new Date().getTime(),
              c = {
                client: this.options.apiKey,
                e: s,
                v: de.API_VERSION,
                upload_time: u,
                checksum: a()(de.API_VERSION + this.options.apiKey + s + u)
              };
            if (this.options.transport !== de.TRANSPORT_BEACON || 'undefined' === typeof navigator) {
              var l = this;
              try {
                new Nt(t, c, this.options.headers).send(function (e, t) {
                  l._sending = !1;
                  try {
                    200 === e
                      ? (l.removeEvents(i, o, e, t), l.options.saveEvents && l.saveEvents(), l._sendEventsIfReady())
                      : (l._logErrorsOnEvents(i, o, e, t),
                        413 === e &&
                          (1 === l.options.uploadBatchSize && l.removeEvents(i, o, e, t),
                          (l.options.uploadBatchSize = Math.ceil(n / 2)),
                          l.sendEvents()));
                  } catch (fn) {}
                });
              } catch (fn) {
                var h = 0,
                  f = 'Request failed to send';
                qe.log.error(f), l._logErrorsOnEvents(i, o, h, f), l.removeEvents(i, o, h, f, { reason: fn.message });
              }
            } else {
              var d = navigator.sendBeacon(t, new URLSearchParams(c));
              d ? (this.removeEvents(i, o, 200, 'success'), this.options.saveEvents && this.saveEvents()) : this._logErrorsOnEvents(i, o, 0, '');
            }
          }
        } else this.removeEvents(1 / 0, 1 / 0, 0, 'No request sent', { reason: 'API key not set' });
      }),
        (Gt.prototype._mergeEventsAndIdentifys = function (e) {
          var t = [],
            n = 0,
            r = -1,
            i = 0,
            o = -1;
          while (t.length < e) {
            var s = void 0,
              a = i >= this._unsentIdentifys.length,
              u = n >= this._unsentEvents.length;
            if (u && a) {
              qe.log.error('Merging Events and Identifys, less events and identifys than expected');
              break;
            }
            a
              ? ((s = this._unsentEvents[n++]), (r = s.event.event_id))
              : u
                ? ((s = this._unsentIdentifys[i++]), (o = s.event.event_id))
                : !('sequence_number' in this._unsentEvents[n].event) ||
                    this._unsentEvents[n].event.sequence_number < this._unsentIdentifys[i].event.sequence_number
                  ? ((s = this._unsentEvents[n++]), (r = s.event.event_id))
                  : ((s = this._unsentIdentifys[i++]), (o = s.event.event_id)),
              t.push(s);
          }
          return { eventsToSend: t, maxEventId: r, maxIdentifyId: o };
        }),
        (Gt.prototype.setGlobalUserProperties = function (e) {
          this.setUserProperties(e);
        }),
        (Gt.prototype.__VERSION__ = function () {
          return this.options.library.version;
        }),
        (Gt.prototype.setLibrary = function (e, t) {
          null !== e && 'undefined' !== typeof e && (this.options.library.name = e),
            null !== t && 'undefined' !== typeof t && (this.options.library.version = t);
        }),
        (Gt.prototype._shouldDeferCall = function () {
          return this._pendingReadStorage || this._initializationDeferred;
        }),
        (Gt.prototype._deferInitialization = function () {
          (this._initializationDeferred = !0), this._q.push(['init'].concat(Array.prototype.slice.call(arguments, 0)));
        }),
        (Gt.prototype.enableTracking = function () {
          (this._initializationDeferred = !1), Xt(this), this.runQueuedFunctions();
        }),
        (Gt.prototype._refreshDynamicConfig = function () {
          this.options.useDynamicConfig &&
            zt.refresh(
              this.options.serverZone,
              this.options.forceHttps,
              function () {
                this.options.apiEndpoint = zt.ingestionEndpoint;
              }.bind(this)
            );
        }),
        (Gt.prototype.getDeviceId = function () {
          return this.options.deviceId;
        }),
        (Gt.prototype.getUserId = function () {
          return this.options.userId;
        }),
        (Gt.prototype.setMinTimeBetweenSessionsMillis = function (e) {
          if (qe.validateInput(e, 'timeInMillis', 'number')) {
            if (this._shouldDeferCall()) return this._q.push(['setMinTimeBetweenSessionsMillis'].concat(Array.prototype.slice.call(arguments, 0)));
            try {
              this.options.sessionTimeout = e;
            } catch (fn) {
              qe.log.error(fn);
            }
          }
        }),
        (Gt.prototype.setEventUploadThreshold = function (e) {
          if (qe.validateInput(e, 'eventUploadThreshold', 'number')) {
            if (this._shouldDeferCall()) return this._q.push(['setEventUploadThreshold'].concat(Array.prototype.slice.call(arguments, 0)));
            try {
              this.options.eventUploadThreshold = e;
            } catch (fn) {
              qe.log.error(fn);
            }
          }
        }),
        (Gt.prototype.setUseDynamicConfig = function (e) {
          if (qe.validateInput(e, 'useDynamicConfig', 'boolean')) {
            if (this._shouldDeferCall()) return this._q.push(['setUseDynamicConfig'].concat(Array.prototype.slice.call(arguments, 0)));
            try {
              (this.options.useDynamicConfig = e), this._refreshDynamicConfig();
            } catch (fn) {
              qe.log.error(fn);
            }
          }
        }),
        (Gt.prototype.setServerZone = function (e) {
          var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if ((e === Ft.EU || e === Ft.US) && qe.validateInput(t, 'serverZoneBasedApi', 'boolean')) {
            if (this._shouldDeferCall()) return this._q.push(['setServerZone'].concat(Array.prototype.slice.call(arguments, 0)));
            try {
              (this.options.serverZone = e), (this.options.serverZoneBasedApi = t), t && (this.options.apiEndpoint = Ut(this.options.serverZone));
            } catch (fn) {
              qe.log.error(fn);
            }
          }
        }),
        (Gt.prototype.setServerUrl = function (e) {
          if (qe.validateInput(e, 'serverUrl', 'string')) {
            if (this._shouldDeferCall()) return this._q.push(['setServerUrl'].concat(Array.prototype.slice.call(arguments, 0)));
            try {
              this.options.apiEndpoint = e;
            } catch (fn) {
              qe.log.error(fn);
            }
          }
        });
      var un = function () {
        (this.options = J({}, $t)), (this._q = []), (this._instances = {});
      };
      (un.prototype.Identify = Ot),
        (un.prototype.Revenue = Dt),
        (un.prototype.getInstance = function (e) {
          e = qe.isEmptyString(e) ? de.DEFAULT_INSTANCE : e.toLowerCase();
          var t = this._instances[e];
          return void 0 === t && ((t = new Gt(e)), (this._instances[e] = t)), t;
        }),
        (un.prototype.init = function (e, t, n, r) {
          this.getInstance().init(
            e,
            t,
            n,
            function (e) {
              (this.options = e.options), 'function' === ye(r) && r(e);
            }.bind(this)
          );
        }),
        (un.prototype.isNewSession = function () {
          return this.getInstance().isNewSession();
