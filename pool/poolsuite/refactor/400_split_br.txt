                  },
                  dragHandle: { type: String, default: null },
                  dragCancel: { type: String, default: null },
                  axis: {
                    type: String,
                    default: 'both',
                    validator: function (e) {
                      return ['x', 'y', 'both'].includes(e);
                    }
                  },
                  grid: {
                    type: Array,
                    default: function () {
                      return [1, 1];
                    }
                  },
                  parent: { type: Boolean, default: !1 },
                  scale: {
                    type: [Number, Array],
                    default: 1,
                    validator: function (e) {
                      return 'number' === typeof e ? e > 0 : 2 === e.length && e[0] > 0 && e[1] > 0;
                    }
                  },
                  onDragStart: {
                    type: Function,
                    default: function () {
                      return !0;
                    }
                  },
                  onDrag: {
                    type: Function,
                    default: function () {
                      return !0;
                    }
                  },
                  onResizeStart: {
                    type: Function,
                    default: function () {
                      return !0;
                    }
                  },
                  onResize: {
                    type: Function,
                    default: function () {
                      return !0;
                    }
                  }
                },
                data: function () {
                  return {
                    left: this.x,
                    top: this.y,
                    right: null,
                    bottom: null,
                    width: null,
                    height: null,
                    widthTouched: !1,
                    heightTouched: !1,
                    aspectFactor: null,
                    parentWidth: null,
                    parentHeight: null,
                    minW: this.minWidth,
                    minH: this.minHeight,
                    maxW: this.maxWidth,
                    maxH: this.maxHeight,
                    handle: null,
                    enabled: this.active,
                    resizing: !1,
                    dragging: !1,
                    dragEnable: !1,
                    resizeEnable: !1,
                    zIndex: this.z
                  };
                },
                created: function () {
                  this.maxWidth &&
                    this.minWidth > this.maxWidth &&
                    console.warn('[Vdr warn]: Invalid prop: minWidth cannot be greater than maxWidth'),
                    this.maxWidth &&
                      this.minHeight > this.maxHeight &&
                      console.warn('[Vdr warn]: Invalid prop: minHeight cannot be greater than maxHeight'),
                    this.resetBoundsAndMouseState();
                },
                mounted: function () {
                  this.enableNativeDrag ||
                    (this.$el.ondragstart = function () {
                      return !1;
                    });
                  var e = this.getParentSize(),
                    t = v(e, 2),
                    n = t[0],
                    r = t[1];
                  (this.parentWidth = n), (this.parentHeight = r);
                  var i = S(this.$el),
                    o = v(i, 2),
                    s = o[0],
                    a = o[1];
                  (this.aspectFactor = ('auto' !== this.w ? this.w : s) / ('auto' !== this.h ? this.h : a)),
                    (this.width = 'auto' !== this.w ? this.w : s),
                    (this.height = 'auto' !== this.h ? this.h : a),
                    (this.right = this.parentWidth - this.width - this.left),
                    (this.bottom = this.parentHeight - this.height - this.top),
                    this.active && this.$emit('activated'),
                    T(document.documentElement, 'mousedown', this.deselect),
                    T(document.documentElement, 'touchend touchcancel', this.deselect),
                    T(window, 'resize', this.checkParentSize);
                },
                beforeDestroy: function () {
                  A(document.documentElement, 'mousedown', this.deselect),
                    A(document.documentElement, 'touchstart', this.handleUp),
                    A(document.documentElement, 'mousemove', this.move),
                    A(document.documentElement, 'touchmove', this.move),
                    A(document.documentElement, 'mouseup', this.handleUp),
                    A(document.documentElement, 'touchend touchcancel', this.deselect),
                    A(window, 'resize', this.checkParentSize);
                },
                methods: {
                  resetBoundsAndMouseState: function () {
                    (this.mouseClickPosition = { mouseX: 0, mouseY: 0, x: 0, y: 0, w: 0, h: 0 }),
                      (this.bounds = {
                        minLeft: null,
                        maxLeft: null,
                        minRight: null,
                        maxRight: null,
                        minTop: null,
                        maxTop: null,
                        minBottom: null,
                        maxBottom: null
                      });
                  },
                  checkParentSize: function () {
                    if (this.parent) {
                      var e = this.getParentSize(),
                        t = v(e, 2),
                        n = t[0],
                        r = t[1];
                      (this.parentWidth = n),
                        (this.parentHeight = r),
                        (this.right = this.parentWidth - this.width - this.left),
                        (this.bottom = this.parentHeight - this.height - this.top);
                    }
                  },
                  getParentSize: function () {
                    if (this.parent) {
                      var e = window.getComputedStyle(this.$el.parentNode, null);
                      return [parseInt(e.getPropertyValue('width'), 10), parseInt(e.getPropertyValue('height'), 10)];
                    }
                    return [null, null];
                  },
                  elementTouchDown: function (e) {
                    (R = k.touch), this.elementDown(e);
                  },
                  elementMouseDown: function (e) {
                    (R = k.mouse), this.elementDown(e);
                  },
                  elementDown: function (e) {
                    if (!(e instanceof MouseEvent && 1 !== e.which)) {
                      var t = e.target || e.srcElement;
                      if (this.$el.contains(t)) {
                        if (!1 === this.onDragStart(e)) return;
                        if ((this.dragHandle && !E(t, this.dragHandle, this.$el)) || (this.dragCancel && E(t, this.dragCancel, this.$el)))
                          return void (this.dragging = !1);
                        this.enabled || ((this.enabled = !0), this.$emit('activated'), this.$emit('update:active', !0)),
                          this.draggable && (this.dragEnable = !0),
                          (this.mouseClickPosition.mouseX = e.touches ? e.touches[0].pageX : e.pageX),
                          (this.mouseClickPosition.mouseY = e.touches ? e.touches[0].pageY : e.pageY),
                          (this.mouseClickPosition.left = this.left),
                          (this.mouseClickPosition.right = this.right),
                          (this.mouseClickPosition.top = this.top),
                          (this.mouseClickPosition.bottom = this.bottom),
                          this.parent && (this.bounds = this.calcDragLimits()),
                          T(document.documentElement, R.move, this.move),
                          T(document.documentElement, R.stop, this.handleUp);
                      }
                    }
                  },
                  calcDragLimits: function () {
                    return {
                      minLeft: this.left % this.grid[0],
                      maxLeft: Math.floor((this.parentWidth - this.width - this.left) / this.grid[0]) * this.grid[0] + this.left,
                      minRight: this.right % this.grid[0],
                      maxRight: Math.floor((this.parentWidth - this.width - this.right) / this.grid[0]) * this.grid[0] + this.right,
                      minTop: this.top % this.grid[1],
                      maxTop: Math.floor((this.parentHeight - this.height - this.top) / this.grid[1]) * this.grid[1] + this.top,
                      minBottom: this.bottom % this.grid[1],
                      maxBottom: Math.floor((this.parentHeight - this.height - this.bottom) / this.grid[1]) * this.grid[1] + this.bottom
                    };
                  },
                  deselect: function (e) {
                    var t = e.target || e.srcElement,
                      n = new RegExp(this.className + '-([trmbl]{2})', '');
                    this.$el.contains(t) ||
                      n.test(t.className) ||
                      (this.enabled && !this.preventDeactivation && ((this.enabled = !1), this.$emit('deactivated'), this.$emit('update:active', !1)),
                      A(document.documentElement, R.move, this.handleResize)),
                      this.resetBoundsAndMouseState();
                  },
                  handleTouchDown: function (e, t) {
                    (R = k.touch), this.handleDown(e, t);
                  },
                  handleDown: function (e, t) {
                    (t instanceof MouseEvent && 1 !== t.which) ||
                      (!1 !== this.onResizeStart(e, t) &&
                        (t.stopPropagation && t.stopPropagation(),
                        this.lockAspectRatio && !e.includes('m') ? (this.handle = 'm' + e.substring(1)) : (this.handle = e),
                        (this.resizeEnable = !0),
                        (this.mouseClickPosition.mouseX = t.touches ? t.touches[0].pageX : t.pageX),
                        (this.mouseClickPosition.mouseY = t.touches ? t.touches[0].pageY : t.pageY),
                        (this.mouseClickPosition.left = this.left),
                        (this.mouseClickPosition.right = this.right),
                        (this.mouseClickPosition.top = this.top),
                        (this.mouseClickPosition.bottom = this.bottom),
                        (this.bounds = this.calcResizeLimits()),
                        T(document.documentElement, R.move, this.handleResize),
                        T(document.documentElement, R.stop, this.handleUp)));
                  },
                  calcResizeLimits: function () {
                    var e = this.minW,
                      t = this.minH,
                      n = this.maxW,
                      r = this.maxH,
                      i = this.aspectFactor,
                      o = v(this.grid, 2),
                      s = o[0],
                      a = o[1],
                      u = this.width,
                      c = this.height,
                      l = this.left,
                      h = this.top,
                      f = this.right,
                      d = this.bottom;
                    this.lockAspectRatio &&
                      (e / t > i ? (t = e / i) : (e = i * t),
                      n && r ? ((n = Math.min(n, i * r)), (r = Math.min(r, n / i))) : n ? (r = n / i) : r && (n = i * r)),
                      (n -= n % s),
                      (r -= r % a);
                    var p = {
                      minLeft: null,
                      maxLeft: null,
                      minTop: null,
                      maxTop: null,
                      minRight: null,
                      maxRight: null,
                      minBottom: null,
                      maxBottom: null
                    };
                    return (
                      this.parent
                        ? ((p.minLeft = l % s),
                          (p.maxLeft = l + Math.floor((u - e) / s) * s),
                          (p.minTop = h % a),
                          (p.maxTop = h + Math.floor((c - t) / a) * a),
                          (p.minRight = f % s),
                          (p.maxRight = f + Math.floor((u - e) / s) * s),
                          (p.minBottom = d % a),
                          (p.maxBottom = d + Math.floor((c - t) / a) * a),
                          n &&
                            ((p.minLeft = Math.max(p.minLeft, this.parentWidth - f - n)),
                            (p.minRight = Math.max(p.minRight, this.parentWidth - l - n))),
                          r &&
                            ((p.minTop = Math.max(p.minTop, this.parentHeight - d - r)),
                            (p.minBottom = Math.max(p.minBottom, this.parentHeight - h - r))),
                          this.lockAspectRatio &&
                            ((p.minLeft = Math.max(p.minLeft, l - h * i)),
                            (p.minTop = Math.max(p.minTop, h - l / i)),
                            (p.minRight = Math.max(p.minRight, f - d * i)),
                            (p.minBottom = Math.max(p.minBottom, d - f / i))))
                        : ((p.minLeft = null),
                          (p.maxLeft = l + Math.floor((u - e) / s) * s),
                          (p.minTop = null),
                          (p.maxTop = h + Math.floor((c - t) / a) * a),
                          (p.minRight = null),
                          (p.maxRight = f + Math.floor((u - e) / s) * s),
                          (p.minBottom = null),
                          (p.maxBottom = d + Math.floor((c - t) / a) * a),
                          n && ((p.minLeft = -(f + n)), (p.minRight = -(l + n))),
                          r && ((p.minTop = -(d + r)), (p.minBottom = -(h + r))),
                          this.lockAspectRatio &&
                            n &&
                            r &&
                            ((p.minLeft = Math.min(p.minLeft, -(f + n))),
                            (p.minTop = Math.min(p.minTop, -(r + d))),
                            (p.minRight = Math.min(p.minRight, -l - n)),
                            (p.minBottom = Math.min(p.minBottom, -h - r)))),
                      p
                    );
                  },
                  move: function (e) {
                    this.resizing ? this.handleResize(e) : this.dragEnable && this.handleDrag(e);
                  },
                  handleDrag: function (e) {
                    var t = this.axis,
                      n = this.grid,
                      r = this.bounds,
                      i = this.mouseClickPosition,
                      o = t && 'y' !== t ? i.mouseX - (e.touches ? e.touches[0].pageX : e.pageX) : 0,
                      s = t && 'x' !== t ? i.mouseY - (e.touches ? e.touches[0].pageY : e.pageY) : 0,
                      a = w(n, o, s, this.scale),
                      u = v(a, 2),
                      c = u[0],
                      l = u[1],
                      h = I(i.left - c, r.minLeft, r.maxLeft),
                      f = I(i.top - l, r.minTop, r.maxTop);
                    if (!1 !== this.onDrag(h, f)) {
                      var d = I(i.right + c, r.minRight, r.maxRight),
                        p = I(i.bottom + l, r.minBottom, r.maxBottom);
                      (this.left = h),
                        (this.top = f),
                        (this.right = d),
                        (this.bottom = p),
                        this.$emit('dragging', this.left, this.top),
                        (this.dragging = !0);
                    }
                  },
                  moveHorizontally: function (e) {
                    var t = w(this.grid, e, this.top, 1),
                      n = v(t, 2),
                      r = n[0],
                      i = (n[1], I(r, this.bounds.minLeft, this.bounds.maxLeft));
                    (this.left = i), (this.right = this.parentWidth - this.width - i);
                  },
                  moveVertically: function (e) {
                    var t = w(this.grid, this.left, e, 1),
                      n = v(t, 2),
                      r = (n[0], n[1]),
                      i = I(r, this.bounds.minTop, this.bounds.maxTop);
                    (this.top = i), (this.bottom = this.parentHeight - this.height - i);
                  },
                  handleResize: function (e) {
                    var t = this.left,
                      n = this.top,
                      r = this.right,
                      i = this.bottom,
                      o = this.mouseClickPosition,
                      s = (this.lockAspectRatio, this.aspectFactor),
                      a = o.mouseX - (e.touches ? e.touches[0].pageX : e.pageX),
                      u = o.mouseY - (e.touches ? e.touches[0].pageY : e.pageY);
                    !this.widthTouched && a && (this.widthTouched = !0), !this.heightTouched && u && (this.heightTouched = !0);
                    var c = w(this.grid, a, u, this.scale),
                      l = v(c, 2),
                      h = l[0],
                      f = l[1];
                    this.handle.includes('b')
                      ? ((i = I(o.bottom + f, this.bounds.minBottom, this.bounds.maxBottom)),
                        this.lockAspectRatio && this.resizingOnY && (r = this.right - (this.bottom - i) * s))
                      : this.handle.includes('t') &&
                        ((n = I(o.top - f, this.bounds.minTop, this.bounds.maxTop)),
                        this.lockAspectRatio && this.resizingOnY && (t = this.left - (this.top - n) * s)),
                      this.handle.includes('r')
                        ? ((r = I(o.right + h, this.bounds.minRight, this.bounds.maxRight)),
                          this.lockAspectRatio && this.resizingOnX && (i = this.bottom - (this.right - r) / s))
                        : this.handle.includes('l') &&
                          ((t = I(o.left - h, this.bounds.minLeft, this.bounds.maxLeft)),
                          this.lockAspectRatio && this.resizingOnX && (n = this.top - (this.left - t) / s));
                    var d = b(this.parentWidth, t, r),
                      p = _(this.parentHeight, n, i);
                    !1 !== this.onResize(this.handle, t, n, d, p) &&
                      ((this.left = t),
                      (this.top = n),
                      (this.right = r),
                      (this.bottom = i),
                      (this.width = d),
                      (this.height = p),
                      this.$emit('resizing', this.left, this.top, this.width, this.height),
                      (this.resizing = !0));
                  },
                  changeWidth: function (e) {
                    var t = w(this.grid, e, 0, 1),
                      n = v(t, 2),
                      r = n[0],
                      i = (n[1], I(this.parentWidth - r - this.left, this.bounds.minRight, this.bounds.maxRight)),
                      o = this.bottom;
                    this.lockAspectRatio && (o = this.bottom - (this.right - i) / this.aspectFactor);
                    var s = b(this.parentWidth, this.left, i),
                      a = _(this.parentHeight, this.top, o);
                    (this.right = i), (this.bottom = o), (this.width = s), (this.height = a);
                  },
                  changeHeight: function (e) {
                    var t = w(this.grid, 0, e, 1),
                      n = v(t, 2),
                      r = (n[0], n[1]),
                      i = I(this.parentHeight - r - this.top, this.bounds.minBottom, this.bounds.maxBottom),
                      o = this.right;
                    this.lockAspectRatio && (o = this.right - (this.bottom - i) * this.aspectFactor);
                    var s = b(this.parentWidth, this.left, o),
                      a = _(this.parentHeight, this.top, i);
                    (this.right = o), (this.bottom = i), (this.width = s), (this.height = a);
                  },
                  handleUp: function (e) {
                    (this.handle = null),
                      this.resetBoundsAndMouseState(),
                      (this.dragEnable = !1),
                      (this.resizeEnable = !1),
                      this.resizing && ((this.resizing = !1), this.$emit('resizestop', this.left, this.top, this.width, this.height)),
                      this.dragging && ((this.dragging = !1), this.$emit('dragstop', this.left, this.top)),
                      A(document.documentElement, R.move, this.handleResize);
                  }
                },
                computed: {
