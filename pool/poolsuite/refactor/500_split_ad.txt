            void 0 === e && (e = {});
            break;
          case Array:
            e = [];
            break;
          default:
            return t;
        }
        for (const n in t) t.hasOwnProperty(n) && h(n) && (e[n] = l(e[n], t[n]));
        return e;
      }
      function h(e) {
        return '__proto__' !== e;
      }
      /**
       * @license
       * Copyright 2022 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function f() {
        if ('undefined' !== typeof self) return self;
        if ('undefined' !== typeof window) return window;
        if ('undefined' !== typeof n.g) return n.g;
        throw new Error('Unable to locate global object.');
      }
      /**
       * @license
       * Copyright 2022 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const d = () => f().__FIREBASE_DEFAULTS__,
        p = () => {
          if ('undefined' === typeof process) return;
          const e = {
            VUE_APP_RPC_URL: 'https://eth-mainnet.alchemyapi.io/v2/liXRp8m5CdTqRuv13chxc-JNUCI7RDzW',
            VUE_APP_POOLSUITE_API_KEY: 'ZT4OmZbR5dAuXCfXOZaHxhge3CfgXXvB',
            VUE_APP_POOLSUITE_HOST: 'https://api-dev.poolsuite.net',
            NODE_ENV: 'production',
            BASE_URL: '/'
          }.__FIREBASE_DEFAULTS__;
          return e ? JSON.parse(e) : void 0;
        },
        g = () => {
          if ('undefined' === typeof document) return;
          let e;
          try {
            e = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
          } catch (n) {
            return;
          }
          const t = e && c(e[1]);
          return t && JSON.parse(t);
        },
        m = () => {
          try {
            return d() || p() || g();
          } catch (e) {
            return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
          }
        },
        v = () => {
          var e;
          return null === (e = m()) || void 0 === e ? void 0 : e.config;
        },
        y = e => {
          var t;
          return null === (t = m()) || void 0 === t ? void 0 : t[`_${e}`];
        };
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class w {
        constructor() {
          (this.reject = () => {}),
            (this.resolve = () => {}),
            (this.promise = new Promise((e, t) => {
              (this.resolve = e), (this.reject = t);
            }));
        }
        wrapCallback(e) {
          return (t, n) => {
            t ? this.reject(t) : this.resolve(n), 'function' === typeof e && (this.promise.catch(() => {}), 1 === e.length ? e(t) : e(t, n));
          };
        }
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function b(e, t) {
        if (e.uid) throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
        const n = { alg: 'none', type: 'JWT' },
          r = t || 'demo-project',
          i = e.iat || 0,
          o = e.sub || e.user_id;
        if (!o) throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
        const s = Object.assign(
            {
              iss: `https://securetoken.google.com/${r}`,
              aud: r,
              iat: i,
              exp: i + 3600,
              auth_time: i,
              sub: o,
              user_id: o,
              firebase: { sign_in_provider: 'custom', identities: {} }
            },
            e
          ),
          a = '';
        return [u(JSON.stringify(n)), u(JSON.stringify(s)), a].join('.');
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function _() {
        return 'undefined' !== typeof navigator && 'string' === typeof navigator['userAgent'] ? navigator['userAgent'] : '';
      }
      function I() {
        return (
          'undefined' !== typeof window &&
          !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
          /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(_())
        );
      }
      function E() {
        var e;
        const t = null === (e = m()) || void 0 === e ? void 0 : e.forceEnvironment;
        if ('node' === t) return !0;
        if ('browser' === t) return !1;
        try {
          return '[object process]' === Object.prototype.toString.call(n.g.process);
        } catch (r) {
          return !1;
        }
      }
      function S() {
        return 'object' === typeof self && self.self === self;
      }
      function T() {
        const e = 'object' === typeof chrome ? chrome.runtime : 'object' === typeof browser ? browser.runtime : void 0;
        return 'object' === typeof e && void 0 !== e.id;
      }
      function A() {
        return 'object' === typeof navigator && 'ReactNative' === navigator['product'];
      }
      function x() {
        const e = _();
        return e.indexOf('MSIE ') >= 0 || e.indexOf('Trident/') >= 0;
      }
      function C() {
        return !E() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
      }
      function k() {
        try {
          return 'object' === typeof indexedDB;
        } catch (e) {
          return !1;
        }
      }
      function O() {
        return new Promise((e, t) => {
          try {
            let n = !0;
            const r = 'validate-browser-context-for-indexeddb-analytics-module',
              i = self.indexedDB.open(r);
            (i.onsuccess = () => {
              i.result.close(), n || self.indexedDB.deleteDatabase(r), e(!0);
            }),
              (i.onupgradeneeded = () => {
                n = !1;
              }),
              (i.onerror = () => {
                var e;
                t((null === (e = i.error) || void 0 === e ? void 0 : e.message) || '');
              });
          } catch (n) {
            t(n);
          }
        });
      }
      function N() {
        return !('undefined' === typeof navigator || !navigator.cookieEnabled);
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const R = 'FirebaseError';
      class P extends Error {
        constructor(e, t, n) {
          super(t),
            (this.code = e),
            (this.customData = n),
            (this.name = R),
            Object.setPrototypeOf(this, P.prototype),
            Error.captureStackTrace && Error.captureStackTrace(this, D.prototype.create);
        }
      }
      class D {
        constructor(e, t, n) {
          (this.service = e), (this.serviceName = t), (this.errors = n);
        }
        create(e, ...t) {
          const n = t[0] || {},
            r = `${this.service}/${e}`,
            i = this.errors[e],
            o = i ? L(i, n) : 'Error',
            s = `${this.serviceName}: ${o} (${r}).`,
            a = new P(r, s, n);
          return a;
        }
      }
      function L(e, t) {
        return e.replace(j, (e, n) => {
          const r = t[n];
          return null != r ? String(r) : `<${n}?>`;
        });
      }
      const j = /\{\$([^}]+)}/g;
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function M(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }
      function F(e) {
        for (const t in e) if (Object.prototype.hasOwnProperty.call(e, t)) return !1;
        return !0;
      }
      function U(e, t) {
        if (e === t) return !0;
        const n = Object.keys(e),
          r = Object.keys(t);
        for (const i of n) {
          if (!r.includes(i)) return !1;
          const n = e[i],
            o = t[i];
          if (V(n) && V(o)) {
            if (!U(n, o)) return !1;
          } else if (n !== o) return !1;
        }
        for (const i of r) if (!n.includes(i)) return !1;
        return !0;
      }
      function V(e) {
        return null !== e && 'object' === typeof e;
      }
      /**
       * @license
       * Copyright 2022 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function B(e) {
        const t = [];
        for (const [n, r] of Object.entries(e))
          Array.isArray(r)
            ? r.forEach(e => {
                t.push(encodeURIComponent(n) + '=' + encodeURIComponent(e));
              })
            : t.push(encodeURIComponent(n) + '=' + encodeURIComponent(r));
        return t.length ? '&' + t.join('&') : '';
      }
      function $(e) {
        const t = {},
          n = e.replace(/^\?/, '').split('&');
        return (
          n.forEach(e => {
            if (e) {
              const [n, r] = e.split('=');
              t[decodeURIComponent(n)] = decodeURIComponent(r);
            }
          }),
          t
        );
      }
      function q(e) {
        const t = e.indexOf('?');
        if (!t) return '';
        const n = e.indexOf('#', t);
        return e.substring(t, n > 0 ? n : void 0);
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function z(e, t) {
        const n = new G(e, t);
        return n.subscribe.bind(n);
      }
      class G {
        constructor(e, t) {
          (this.observers = []),
            (this.unsubscribes = []),
            (this.observerCount = 0),
            (this.task = Promise.resolve()),
            (this.finalized = !1),
            (this.onNoObservers = t),
            this.task
              .then(() => {
                e(this);
              })
              .catch(e => {
                this.error(e);
              });
        }
        next(e) {
          this.forEachObserver(t => {
            t.next(e);
          });
        }
        error(e) {
          this.forEachObserver(t => {
            t.error(e);
          }),
            this.close(e);
        }
        complete() {
          this.forEachObserver(e => {
            e.complete();
          }),
            this.close();
        }
        subscribe(e, t, n) {
          let r;
          if (void 0 === e && void 0 === t && void 0 === n) throw new Error('Missing Observer.');
          (r = W(e, ['next', 'error', 'complete']) ? e : { next: e, error: t, complete: n }),
            void 0 === r.next && (r.next = H),
            void 0 === r.error && (r.error = H),
            void 0 === r.complete && (r.complete = H);
          const i = this.unsubscribeOne.bind(this, this.observers.length);
          return (
            this.finalized &&
              this.task.then(() => {
                try {
                  this.finalError ? r.error(this.finalError) : r.complete();
                } catch (e) {}
              }),
            this.observers.push(r),
            i
          );
        }
        unsubscribeOne(e) {
          void 0 !== this.observers &&
            void 0 !== this.observers[e] &&
            (delete this.observers[e],
            (this.observerCount -= 1),
            0 === this.observerCount && void 0 !== this.onNoObservers && this.onNoObservers(this));
        }
        forEachObserver(e) {
          if (!this.finalized) for (let t = 0; t < this.observers.length; t++) this.sendOne(t, e);
        }
        sendOne(e, t) {
          this.task.then(() => {
            if (void 0 !== this.observers && void 0 !== this.observers[e])
              try {
                t(this.observers[e]);
              } catch (n) {
                'undefined' !== typeof console && console.error && console.error(n);
              }
          });
        }
        close(e) {
          this.finalized ||
            ((this.finalized = !0),
            void 0 !== e && (this.finalError = e),
