            (this.passiveListeners = new Set()),
            (this.initPromise = new Promise(e => {
              this.resolveInialized = e;
            }));
        }
        addPassiveListener(e) {
          this.passiveListeners.add(e);
        }
        removePassiveListener(e) {
          this.passiveListeners.delete(e);
        }
        resetRedirect() {
          (this.queuedRedirectEvent = null), (this.hasHandledPotentialRedirect = !1);
        }
        onEvent(e) {
          return this.resolveInialized(), this.passiveListeners.forEach(t => t(e)), super.onEvent(e);
        }
        async initialized() {
          await this.initPromise;
        }
      }
      function Po(e, t, n = null) {
        return { type: t, eventId: n, urlResponse: null, sessionId: Mo(), postBody: null, tenantId: e.tenantId, error: b(e, 'no-auth-event') };
      }
      function Do(e, t) {
        return Fo()._set(Uo(e), t);
      }
      async function Lo(e) {
        const t = await Fo()._get(Uo(e));
        return t && (await Fo()._remove(Uo(e))), t;
      }
      function jo(e, t) {
        var n, r;
        const i = Bo(t);
        if (i.includes('/__/auth/callback')) {
          const t = $o(i),
            o = t['firebaseError'] ? Vo(decodeURIComponent(t['firebaseError'])) : null,
            s =
              null === (r = null === (n = null === o || void 0 === o ? void 0 : o['code']) || void 0 === n ? void 0 : n.split('auth/')) ||
              void 0 === r
                ? void 0
                : r[1],
            a = s ? b(s) : null;
          return a
            ? { type: e.type, eventId: e.eventId, tenantId: e.tenantId, error: a, urlResponse: null, sessionId: null, postBody: null }
            : { type: e.type, eventId: e.eventId, tenantId: e.tenantId, sessionId: e.sessionId, urlResponse: i, postBody: null };
        }
        return null;
      }
      function Mo() {
        const e = [],
          t = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (let n = 0; n < No; n++) {
          const n = Math.floor(Math.random() * t.length);
          e.push(t.charAt(n));
        }
        return e.join('');
      }
      function Fo() {
        return he(Qn);
      }
      function Uo(e) {
        return pe('authEvent', e.config.apiKey, e.name);
      }
      function Vo(e) {
        try {
          return JSON.parse(e);
        } catch (t) {
          return null;
        }
      }
      function Bo(e) {
        const t = $o(e),
          n = t['link'] ? decodeURIComponent(t['link']) : void 0,
          r = $o(n)['link'],
          i = t['deep_link_id'] ? decodeURIComponent(t['deep_link_id']) : void 0,
          o = $o(i)['link'];
        return o || i || r || n || e;
      }
      function $o(e) {
        if (!(null === e || void 0 === e ? void 0 : e.includes('?'))) return {};
        const [t, ...n] = e.split('?');
        return (0, i.zd)(n.join('?'));
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const qo = 500;
      class zo {
        constructor() {
          (this._redirectPersistence = Xn),
            (this._shouldInitProactively = !0),
            (this.eventManagers = new Map()),
            (this.originValidationPromises = {}),
            (this._completeRedirectFn = Ii),
            (this._overrideRedirectResult = fi);
        }
        async _initialize(e) {
          const t = e._key();
          let n = this.eventManagers.get(t);
          return n || ((n = new Ro(e)), this.eventManagers.set(t, n), this.attachCallbackListeners(e, n)), n;
        }
        _openPopup(e) {
          w(e, 'operation-not-supported-in-this-environment');
        }
        async _openRedirect(e, t, n, r) {
          Co(e);
          const i = await this._initialize(e);
          await i.initialized(), i.resetRedirect(), hi(), await this._originValidation(e);
          const o = Po(e, n, r);
          await Do(e, o);
          const s = await So(e, o, t),
            a = await Ao(s);
          return xo(e, i, a);
        }
        _isIframeWebStorageSupported(e, t) {
          throw new Error('Method not implemented.');
        }
        _originValidation(e) {
          const t = e._key();
          return this.originValidationPromises[t] || (this.originValidationPromises[t] = To(e)), this.originValidationPromises[t];
        }
        attachCallbackListeners(e, t) {
          const { universalLinks: n, handleOpenURL: r, BuildInfo: i } = Io(),
            o = setTimeout(async () => {
              await Lo(e), t.onEvent(Wo());
            }, qo),
            s = async n => {
              clearTimeout(o);
              const r = await Lo(e);
              let i = null;
              r && (null === n || void 0 === n ? void 0 : n['url']) && (i = jo(r, n['url'])), t.onEvent(i || Wo());
            };
          'undefined' !== typeof n && 'function' === typeof n.subscribe && n.subscribe(null, s);
          const a = r,
            u = `${i.packageName.toLowerCase()}://`;
          Io().handleOpenURL = async e => {
            if ((e.toLowerCase().startsWith(u) && s({ url: e }), 'function' === typeof a))
              try {
                a(e);
              } catch (t) {
                console.error(t);
              }
          };
        }
      }
      const Go = zo;
      function Wo() {
        return { type: 'unknown', eventId: null, sessionId: null, urlResponse: null, postBody: null, tenantId: null, error: b('no-auth-event') };
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Ho(e, t) {
        We(e)._logFramework(t);
      }
      var Ko = '@firebase/auth-compat',
        Qo = '0.4.2';
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const Yo = 1e3;
      function Xo() {
        var e;
        return (null === (e = null === self || void 0 === self ? void 0 : self.location) || void 0 === e ? void 0 : e.protocol) || null;
      }
      function Jo() {
        return 'http:' === Xo() || 'https:' === Xo();
      }
      function Zo(e = (0, i.z$)()) {
        return !(('file:' !== Xo() && 'ionic:' !== Xo() && 'capacitor:' !== Xo()) || !e.toLowerCase().match(/iphone|ipad|ipod|android/));
      }
      function es() {
        return (0, i.b$)() || (0, i.UG)();
      }
      function ts() {
        return (0, i.w1)() && 11 === (null === document || void 0 === document ? void 0 : document.documentMode);
      }
      function ns(e = (0, i.z$)()) {
        return /Edge\/\d+/.test(e);
      }
      function rs(e = (0, i.z$)()) {
        return ts() || ns(e);
      }
      function is() {
        try {
          const e = self.localStorage,
            t = er();
          if (e) return e['setItem'](t, '1'), e['removeItem'](t), !rs() || (0, i.hl)();
        } catch (e) {
          return os() && (0, i.hl)();
        }
        return !1;
      }
      function os() {
        return 'undefined' !== typeof n.g && 'WorkerGlobalScope' in n.g && 'importScripts' in n.g;
      }
      function ss() {
        return (Jo() || (0, i.ru)() || Zo()) && !es() && is() && !os();
      }
      function as() {
        return Zo() && 'undefined' !== typeof document;
      }
      async function us() {
        return (
          !!as() &&
          new Promise(e => {
            const t = setTimeout(() => {
              e(!1);
            }, Yo);
            document.addEventListener('deviceready', () => {
              clearTimeout(t), e(!0);
            });
          })
        );
      }
      function cs() {
        return 'undefined' !== typeof window ? window : null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ls = { LOCAL: 'local', NONE: 'none', SESSION: 'session' },
        hs = S,
        fs = 'persistence';
      function ds(e, t) {
        hs(Object.values(ls).includes(t), e, 'invalid-persistence-type'),
          (0, i.b$)()
            ? hs(t !== ls.SESSION, e, 'unsupported-persistence-type')
            : (0, i.UG)()
              ? hs(t === ls.NONE, e, 'unsupported-persistence-type')
              : os()
                ? hs(t === ls.NONE || (t === ls.LOCAL && (0, i.hl)()), e, 'unsupported-persistence-type')
                : hs(t === ls.NONE || is(), e, 'unsupported-persistence-type');
      }
      async function ps(e) {
        await e._initializationPromise;
        const t = ms(),
          n = pe(fs, e.config.apiKey, e.name);
        t && t.setItem(n, e._getPersistence());
      }
      function gs(e, t) {
        const n = ms();
        if (!n) return [];
        const r = pe(fs, e, t),
          i = n.getItem(r);
        switch (i) {
          case ls.NONE:
            return [de];
          case ls.LOCAL:
            return [Ir, Xn];
          case ls.SESSION:
            return [Xn];
          default:
            return [];
        }
      }
      function ms() {
        var e;
        try {
          return (null === (e = cs()) || void 0 === e ? void 0 : e.sessionStorage) || null;
        } catch (t) {
          return null;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const vs = S;
      class ys {
        constructor() {
          (this.browserResolver = he(ao)),
            (this.cordovaResolver = he(Go)),
            (this.underlyingResolver = null),
            (this._redirectPersistence = Xn),
            (this._completeRedirectFn = Ii),
            (this._overrideRedirectResult = fi);
        }
        async _initialize(e) {
          return await this.selectUnderlyingResolver(), this.assertedUnderlyingResolver._initialize(e);
        }
        async _openPopup(e, t, n, r) {
          return await this.selectUnderlyingResolver(), this.assertedUnderlyingResolver._openPopup(e, t, n, r);
        }
        async _openRedirect(e, t, n, r) {
          return await this.selectUnderlyingResolver(), this.assertedUnderlyingResolver._openRedirect(e, t, n, r);
        }
        _isIframeWebStorageSupported(e, t) {
          this.assertedUnderlyingResolver._isIframeWebStorageSupported(e, t);
        }
        _originValidation(e) {
          return this.assertedUnderlyingResolver._originValidation(e);
        }
        get _shouldInitProactively() {
          return as() || this.browserResolver._shouldInitProactively;
        }
        get assertedUnderlyingResolver() {
          return vs(this.underlyingResolver, 'internal-error'), this.underlyingResolver;
        }
        async selectUnderlyingResolver() {
          if (this.underlyingResolver) return;
          const e = await us();
          this.underlyingResolver = e ? this.cordovaResolver : this.browserResolver;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function ws(e) {
        return e.unwrap();
      }
      function bs(e) {
        return e.wrapped();
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
