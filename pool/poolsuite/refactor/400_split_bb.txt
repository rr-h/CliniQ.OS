              remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
                Nt + '+' + Pt + '(?=' + [vt, Ct + Ot, '$'].join('|') + ')',
                Ct + '?' + Ot + '+' + Rt,
                Ct + '+' + Pt,
                Ft,
                Mt,
                wt,
                Vt
              ].join('|'),
              'g'
            ),
            Wt = RegExp('[' + kt + tt + ot + dt + ']'),
            Ht = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
            Kt = [
              'Array',
              'Buffer',
              'DataView',
              'Date',
              'Error',
              'Float32Array',
              'Float64Array',
              'Function',
              'Int8Array',
              'Int16Array',
              'Int32Array',
              'Map',
              'Math',
              'Object',
              'Promise',
              'RegExp',
              'Set',
              'String',
              'Symbol',
              'TypeError',
              'Uint8Array',
              'Uint8ClampedArray',
              'Uint16Array',
              'Uint32Array',
              'WeakMap',
              '_',
              'clearTimeout',
              'isFinite',
              'parseInt',
              'setTimeout'
            ],
            Qt = -1,
            Yt = {};
          (Yt[de] = Yt[pe] = Yt[ge] = Yt[me] = Yt[ve] = Yt[ye] = Yt[we] = Yt[be] = Yt[_e] = !0),
            (Yt[q] = Yt[z] = Yt[he] = Yt[W] = Yt[fe] = Yt[H] = Yt[Q] = Yt[Y] = Yt[J] = Yt[Z] = Yt[te] = Yt[ie] = Yt[oe] = Yt[se] = Yt[ce] = !1);
          var Xt = {};
          (Xt[q] =
            Xt[z] =
            Xt[he] =
            Xt[fe] =
            Xt[W] =
            Xt[H] =
            Xt[de] =
            Xt[pe] =
            Xt[ge] =
            Xt[me] =
            Xt[ve] =
            Xt[J] =
            Xt[Z] =
            Xt[te] =
            Xt[ie] =
            Xt[oe] =
            Xt[se] =
            Xt[ae] =
            Xt[ye] =
            Xt[we] =
            Xt[be] =
            Xt[_e] =
              !0),
            (Xt[Q] = Xt[Y] = Xt[ce] = !1);
          var Jt = {
              À: 'A',
              Á: 'A',
              Â: 'A',
              Ã: 'A',
              Ä: 'A',
              Å: 'A',
              à: 'a',
              á: 'a',
              â: 'a',
              ã: 'a',
              ä: 'a',
              å: 'a',
              Ç: 'C',
              ç: 'c',
              Ð: 'D',
              ð: 'd',
              È: 'E',
              É: 'E',
              Ê: 'E',
              Ë: 'E',
              è: 'e',
              é: 'e',
              ê: 'e',
              ë: 'e',
              Ì: 'I',
              Í: 'I',
              Î: 'I',
              Ï: 'I',
              ì: 'i',
              í: 'i',
              î: 'i',
              ï: 'i',
              Ñ: 'N',
              ñ: 'n',
              Ò: 'O',
              Ó: 'O',
              Ô: 'O',
              Õ: 'O',
              Ö: 'O',
              Ø: 'O',
              ò: 'o',
              ó: 'o',
              ô: 'o',
              õ: 'o',
              ö: 'o',
              ø: 'o',
              Ù: 'U',
              Ú: 'U',
              Û: 'U',
              Ü: 'U',
              ù: 'u',
              ú: 'u',
              û: 'u',
              ü: 'u',
              Ý: 'Y',
              ý: 'y',
              ÿ: 'y',
              Æ: 'Ae',
              æ: 'ae',
              Þ: 'Th',
              þ: 'th',
              ß: 'ss',
              Ā: 'A',
              Ă: 'A',
              Ą: 'A',
              ā: 'a',
              ă: 'a',
              ą: 'a',
              Ć: 'C',
              Ĉ: 'C',
              Ċ: 'C',
              Č: 'C',
              ć: 'c',
              ĉ: 'c',
              ċ: 'c',
              č: 'c',
              Ď: 'D',
              Đ: 'D',
              ď: 'd',
              đ: 'd',
              Ē: 'E',
              Ĕ: 'E',
              Ė: 'E',
              Ę: 'E',
              Ě: 'E',
              ē: 'e',
              ĕ: 'e',
              ė: 'e',
              ę: 'e',
              ě: 'e',
              Ĝ: 'G',
              Ğ: 'G',
              Ġ: 'G',
              Ģ: 'G',
              ĝ: 'g',
              ğ: 'g',
              ġ: 'g',
              ģ: 'g',
              Ĥ: 'H',
              Ħ: 'H',
              ĥ: 'h',
              ħ: 'h',
              Ĩ: 'I',
              Ī: 'I',
              Ĭ: 'I',
              Į: 'I',
              İ: 'I',
              ĩ: 'i',
              ī: 'i',
              ĭ: 'i',
              į: 'i',
              ı: 'i',
              Ĵ: 'J',
              ĵ: 'j',
              Ķ: 'K',
              ķ: 'k',
              ĸ: 'k',
              Ĺ: 'L',
              Ļ: 'L',
              Ľ: 'L',
              Ŀ: 'L',
              Ł: 'L',
              ĺ: 'l',
              ļ: 'l',
              ľ: 'l',
              ŀ: 'l',
              ł: 'l',
              Ń: 'N',
              Ņ: 'N',
              Ň: 'N',
              Ŋ: 'N',
              ń: 'n',
              ņ: 'n',
              ň: 'n',
              ŋ: 'n',
              Ō: 'O',
              Ŏ: 'O',
              Ő: 'O',
              ō: 'o',
              ŏ: 'o',
              ő: 'o',
              Ŕ: 'R',
              Ŗ: 'R',
              Ř: 'R',
              ŕ: 'r',
              ŗ: 'r',
              ř: 'r',
              Ś: 'S',
              Ŝ: 'S',
              Ş: 'S',
              Š: 'S',
              ś: 's',
              ŝ: 's',
              ş: 's',
              š: 's',
              Ţ: 'T',
              Ť: 'T',
              Ŧ: 'T',
              ţ: 't',
              ť: 't',
              ŧ: 't',
              Ũ: 'U',
              Ū: 'U',
              Ŭ: 'U',
              Ů: 'U',
              Ű: 'U',
              Ų: 'U',
              ũ: 'u',
              ū: 'u',
              ŭ: 'u',
              ů: 'u',
              ű: 'u',
              ų: 'u',
              Ŵ: 'W',
              ŵ: 'w',
              Ŷ: 'Y',
              ŷ: 'y',
              Ÿ: 'Y',
              Ź: 'Z',
              Ż: 'Z',
              Ž: 'Z',
              ź: 'z',
              ż: 'z',
              ž: 'z',
              Ĳ: 'IJ',
              ĳ: 'ij',
              Œ: 'Oe',
              œ: 'oe',
              ŉ: "'n",
              ſ: 's'
            },
            Zt = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' },
            en = { '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '"', '&#39;': "'" },
            tn = { '\\': '\\', "'": "'", '\n': 'n', '\r': 'r', '\u2028': 'u2028', '\u2029': 'u2029' },
            nn = parseFloat,
            rn = parseInt,
            on = 'object' == typeof n.g && n.g && n.g.Object === Object && n.g,
            sn = 'object' == typeof self && self && self.Object === Object && self,
            an = on || sn || Function('return this')(),
            un = t && !t.nodeType && t,
            cn = un && e && !e.nodeType && e,
            ln = cn && cn.exports === un,
            hn = ln && on.process,
            fn = (function () {
              try {
                var e = cn && cn.require && cn.require('util').types;
                return e || (hn && hn.binding && hn.binding('util'));
              } catch (t) {}
            })(),
            dn = fn && fn.isArrayBuffer,
            pn = fn && fn.isDate,
            gn = fn && fn.isMap,
            mn = fn && fn.isRegExp,
            vn = fn && fn.isSet,
            yn = fn && fn.isTypedArray;
          function wn(e, t, n) {
            switch (n.length) {
              case 0:
                return e.call(t);
              case 1:
                return e.call(t, n[0]);
              case 2:
                return e.call(t, n[0], n[1]);
              case 3:
                return e.call(t, n[0], n[1], n[2]);
            }
            return e.apply(t, n);
          }
          function bn(e, t, n, r) {
            var i = -1,
              o = null == e ? 0 : e.length;
            while (++i < o) {
              var s = e[i];
              t(r, s, n(s), e);
            }
            return r;
          }
          function _n(e, t) {
            var n = -1,
              r = null == e ? 0 : e.length;
            while (++n < r) if (!1 === t(e[n], n, e)) break;
            return e;
          }
          function In(e, t) {
            var n = null == e ? 0 : e.length;
            while (n--) if (!1 === t(e[n], n, e)) break;
            return e;
          }
          function En(e, t) {
            var n = -1,
              r = null == e ? 0 : e.length;
            while (++n < r) if (!t(e[n], n, e)) return !1;
            return !0;
          }
          function Sn(e, t) {
            var n = -1,
              r = null == e ? 0 : e.length,
              i = 0,
              o = [];
            while (++n < r) {
              var s = e[n];
              t(s, n, e) && (o[i++] = s);
            }
            return o;
          }
          function Tn(e, t) {
            var n = null == e ? 0 : e.length;
            return !!n && Mn(e, t, 0) > -1;
          }
          function An(e, t, n) {
            var r = -1,
              i = null == e ? 0 : e.length;
            while (++r < i) if (n(t, e[r])) return !0;
            return !1;
          }
          function xn(e, t) {
            var n = -1,
              r = null == e ? 0 : e.length,
              i = Array(r);
            while (++n < r) i[n] = t(e[n], n, e);
            return i;
          }
          function Cn(e, t) {
            var n = -1,
              r = t.length,
              i = e.length;
            while (++n < r) e[i + n] = t[n];
            return e;
          }
          function kn(e, t, n, r) {
            var i = -1,
              o = null == e ? 0 : e.length;
            r && o && (n = e[++i]);
            while (++i < o) n = t(n, e[i], i, e);
            return n;
          }
          function On(e, t, n, r) {
            var i = null == e ? 0 : e.length;
            r && i && (n = e[--i]);
            while (i--) n = t(n, e[i], i, e);
            return n;
          }
          function Nn(e, t) {
            var n = -1,
              r = null == e ? 0 : e.length;
            while (++n < r) if (t(e[n], n, e)) return !0;
            return !1;
          }
          var Rn = Bn('length');
          function Pn(e) {
            return e.split('');
          }
          function Dn(e) {
            return e.match($e) || [];
          }
          function Ln(e, t, n) {
            var r;
            return (
              n(e, function (e, n, i) {
                if (t(e, n, i)) return (r = n), !1;
              }),
              r
            );
          }
          function jn(e, t, n, r) {
            var i = e.length,
