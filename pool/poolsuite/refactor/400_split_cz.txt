      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Ke(e, t) {
        const n = (null === t || void 0 === t ? void 0 : t.persistence) || [],
          r = (Array.isArray(n) ? n : [n]).map(he);
        (null === t || void 0 === t ? void 0 : t.errorMap) && e._updateErrorMap(t.errorMap),
          e._initializeWithPersistence(r, null === t || void 0 === t ? void 0 : t.popupRedirectResolver);
      }
      function Qe(e, t, n) {
        const r = We(e);
        S(r._canInitEmulator, r, 'emulator-config-failed'), S(/^https?:\/\//.test(t), r, 'invalid-emulator-scheme');
        const i = !!(null === n || void 0 === n ? void 0 : n.disableWarnings),
          o = Ye(t),
          { host: s, port: a } = Xe(t),
          u = null === a ? '' : `:${a}`;
        (r.config.emulator = { url: `${o}//${s}${u}/` }),
          (r.settings.appVerificationDisabledForTesting = !0),
          (r.emulatorConfig = Object.freeze({ host: s, port: a, protocol: o.replace(':', ''), options: Object.freeze({ disableWarnings: i }) })),
          i || Ze();
      }
      function Ye(e) {
        const t = e.indexOf(':');
        return t < 0 ? '' : e.substr(0, t + 1);
      }
      function Xe(e) {
        const t = Ye(e),
          n = /(\/\/)?([^?#/]+)/.exec(e.substr(t.length));
        if (!n) return { host: '', port: null };
        const r = n[2].split('@').pop() || '',
          i = /^(\[[^\]]+\])(:|$)/.exec(r);
        if (i) {
          const e = i[1];
          return { host: e, port: Je(r.substr(e.length + 1)) };
        }
        {
          const [e, t] = r.split(':');
          return { host: e, port: Je(t) };
        }
      }
      function Je(e) {
        if (!e) return null;
        const t = Number(e);
        return isNaN(t) ? null : t;
      }
      function Ze() {
        function e() {
          const e = document.createElement('p'),
            t = e.style;
          (e.innerText = 'Running in emulator mode. Do not use with production credentials.'),
            (t.position = 'fixed'),
            (t.width = '100%'),
            (t.backgroundColor = '#ffffff'),
            (t.border = '.1em solid #000000'),
            (t.color = '#b50000'),
            (t.bottom = '0px'),
            (t.left = '0px'),
            (t.margin = '0px'),
            (t.zIndex = '10000'),
            (t.textAlign = 'center'),
            e.classList.add('firebase-emulator-warning'),
            document.body.appendChild(e);
        }
        'undefined' !== typeof console &&
          'function' === typeof console.info &&
          console.info(
            'WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.'
          ),
          'undefined' !== typeof window &&
            'undefined' !== typeof document &&
            ('loading' === document.readyState ? window.addEventListener('DOMContentLoaded', e) : e());
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class et {
        constructor(e, t) {
          (this.providerId = e), (this.signInMethod = t);
        }
        toJSON() {
          return T('not implemented');
        }
        _getIdTokenResponse(e) {
          return T('not implemented');
        }
        _linkToIdToken(e, t) {
          return T('not implemented');
        }
        _getReauthenticationResolver(e) {
          return T('not implemented');
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function tt(e, t) {
        return F(e, 'POST', '/v1/accounts:resetPassword', M(e, t));
      }
      async function nt(e, t) {
        return F(e, 'POST', '/v1/accounts:update', t);
      }
      async function rt(e, t) {
        return F(e, 'POST', '/v1/accounts:update', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function it(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithPassword', M(e, t));
      }
      async function ot(e, t) {
        return F(e, 'POST', '/v1/accounts:sendOobCode', M(e, t));
      }
      async function st(e, t) {
        return ot(e, t);
      }
      async function at(e, t) {
        return ot(e, t);
      }
      async function ut(e, t) {
        return ot(e, t);
      }
      async function ct(e, t) {
        return ot(e, t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function lt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithEmailLink', M(e, t));
      }
      async function ht(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithEmailLink', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ft extends et {
        constructor(e, t, n, r = null) {
          super('password', n), (this._email = e), (this._password = t), (this._tenantId = r);
        }
        static _fromEmailAndPassword(e, t) {
          return new ft(e, t, 'password');
        }
        static _fromEmailAndCode(e, t, n = null) {
          return new ft(e, t, 'emailLink', n);
        }
        toJSON() {
          return { email: this._email, password: this._password, signInMethod: this.signInMethod, tenantId: this._tenantId };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e;
          if ((null === t || void 0 === t ? void 0 : t.email) && (null === t || void 0 === t ? void 0 : t.password)) {
            if ('password' === t.signInMethod) return this._fromEmailAndPassword(t.email, t.password);
            if ('emailLink' === t.signInMethod) return this._fromEmailAndCode(t.email, t.password, t.tenantId);
          }
          return null;
        }
        async _getIdTokenResponse(e) {
          var t;
          switch (this.signInMethod) {
            case 'password':
              const n = { returnSecureToken: !0, email: this._email, password: this._password, clientType: 'CLIENT_TYPE_WEB' };
              if (null === (t = e._getRecaptchaConfig()) || void 0 === t ? void 0 : t.emailPasswordEnabled) {
                const t = await qe(e, n, 'signInWithPassword');
                return it(e, t);
              }
              return it(e, n).catch(async t => {
                if ('auth/missing-recaptcha-token' === t.code) {
                  console.log(
                    'Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.'
                  );
                  const t = await qe(e, n, 'signInWithPassword');
                  return it(e, t);
                }
                return Promise.reject(t);
              });
            case 'emailLink':
              return lt(e, { email: this._email, oobCode: this._password });
            default:
              w(e, 'internal-error');
          }
        }
        async _linkToIdToken(e, t) {
          switch (this.signInMethod) {
            case 'password':
              return nt(e, { idToken: t, returnSecureToken: !0, email: this._email, password: this._password });
            case 'emailLink':
              return ht(e, { idToken: t, email: this._email, oobCode: this._password });
            default:
              w(e, 'internal-error');
          }
        }
        _getReauthenticationResolver(e) {
          return this._getIdTokenResponse(e);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function dt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithIdp', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const pt = 'http://localhost';
      class gt extends et {
        constructor() {
          super(...arguments), (this.pendingToken = null);
        }
        static _fromParams(e) {
          const t = new gt(e.providerId, e.signInMethod);
          return (
            e.idToken || e.accessToken
              ? (e.idToken && (t.idToken = e.idToken),
                e.accessToken && (t.accessToken = e.accessToken),
                e.nonce && !e.pendingToken && (t.nonce = e.nonce),
                e.pendingToken && (t.pendingToken = e.pendingToken))
              : e.oauthToken && e.oauthTokenSecret
                ? ((t.accessToken = e.oauthToken), (t.secret = e.oauthTokenSecret))
                : w('argument-error'),
            t
          );
        }
        toJSON() {
          return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
          };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e,
            { providerId: n, signInMethod: r } = t,
            i = s(t, ['providerId', 'signInMethod']);
          if (!n || !r) return null;
          const o = new gt(n, r);
          return (
            (o.idToken = i.idToken || void 0),
            (o.accessToken = i.accessToken || void 0),
            (o.secret = i.secret),
            (o.nonce = i.nonce),
            (o.pendingToken = i.pendingToken || null),
            o
          );
        }
        _getIdTokenResponse(e) {
          const t = this.buildRequest();
          return dt(e, t);
        }
        _linkToIdToken(e, t) {
          const n = this.buildRequest();
          return (n.idToken = t), dt(e, n);
        }
        _getReauthenticationResolver(e) {
          const t = this.buildRequest();
          return (t.autoCreate = !1), dt(e, t);
        }
        buildRequest() {
          const e = { requestUri: pt, returnSecureToken: !0 };
          if (this.pendingToken) e.pendingToken = this.pendingToken;
          else {
            const t = {};
            this.idToken && (t['id_token'] = this.idToken),
              this.accessToken && (t['access_token'] = this.accessToken),
              this.secret && (t['oauth_token_secret'] = this.secret),
              (t['providerId'] = this.providerId),
              this.nonce && !this.pendingToken && (t['nonce'] = this.nonce),
              (e.postBody = (0, i.xO)(t));
          }
          return e;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function mt(e, t) {
        return F(e, 'POST', '/v1/accounts:sendVerificationCode', M(e, t));
      }
      async function vt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, t));
      }
      async function yt(e, t) {
        const n = await V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, t));
        if (n.temporaryProof) throw q(e, 'account-exists-with-different-credential', n);
        return n;
      }
