       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function be(e) {
        let t;
        const n = await we(e.appConfig, n => {
          const r = _e(n),
            i = Ie(e, r);
          return (t = i.registrationPromise), i.installationEntry;
        });
        return n.fid === te ? { installationEntry: await t } : { installationEntry: n, registrationPromise: t };
      }
      function _e(e) {
        const t = e || { fid: ne(), registrationStatus: 0 };
        return Ae(t);
      }
      function Ie(e, t) {
        if (0 === t.registrationStatus) {
          if (!navigator.onLine) {
            const e = Promise.reject(B.create('app-offline'));
            return { installationEntry: t, registrationPromise: e };
          }
          const n = { fid: t.fid, registrationStatus: 1, registrationTime: Date.now() },
            r = Ee(e, n);
          return { installationEntry: n, registrationPromise: r };
        }
        return 1 === t.registrationStatus ? { installationEntry: t, registrationPromise: Se(e) } : { installationEntry: t };
      }
      async function Ee(e, t) {
        try {
          const n = await X(e, t);
          return ve(e.appConfig, n);
        } catch (n) {
          throw ($(n) && 409 === n.customData.serverCode ? await ye(e.appConfig) : await ve(e.appConfig, { fid: t.fid, registrationStatus: 0 }), n);
        }
      }
      async function Se(e) {
        let t = await Te(e.appConfig);
        while (1 === t.registrationStatus) await J(100), (t = await Te(e.appConfig));
        if (0 === t.registrationStatus) {
          const { installationEntry: t, registrationPromise: n } = await be(e);
          return n || t;
        }
        return t;
      }
      function Te(e) {
        return we(e, e => {
          if (!e) throw B.create('installation-not-found');
          return Ae(e);
        });
      }
      function Ae(e) {
        return xe(e) ? { fid: e.fid, registrationStatus: 0 } : e;
      }
      function xe(e) {
        return 1 === e.registrationStatus && e.registrationTime + P < Date.now();
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ce({ appConfig: e, heartbeatServiceProvider: t }, n) {
        const r = ke(e, n),
          i = H(e, n),
          o = t.getImmediate({ optional: !0 });
        if (o) {
          const e = await o.getHeartbeatsHeader();
          e && i.append('x-firebase-client', e);
        }
        const s = { installation: { sdkVersion: D, appId: e.appId } },
          a = { method: 'POST', headers: i, body: JSON.stringify(s) },
          u = await K(() => fetch(r, a));
        if (u.ok) {
          const e = await u.json(),
            t = z(e);
          return t;
        }
        throw await G('Generate Auth Token', u);
      }
      function ke(e, { fid: t }) {
        return `${q(e)}/${t}/authTokens:generate`;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Oe(e, t = !1) {
        let n;
        const r = await we(e.appConfig, r => {
            if (!De(r)) throw B.create('not-registered');
            const i = r.authToken;
            if (!t && Le(i)) return r;
            if (1 === i.requestStatus) return (n = Ne(e, t)), r;
            {
              if (!navigator.onLine) throw B.create('app-offline');
              const t = Me(r);
              return (n = Pe(e, t)), t;
            }
          }),
          i = n ? await n : r.authToken;
        return i;
      }
      async function Ne(e, t) {
        let n = await Re(e.appConfig);
        while (1 === n.authToken.requestStatus) await J(100), (n = await Re(e.appConfig));
        const r = n.authToken;
        return 0 === r.requestStatus ? Oe(e, t) : r;
      }
      function Re(e) {
        return we(e, e => {
          if (!De(e)) throw B.create('not-registered');
          const t = e.authToken;
          return Fe(t) ? Object.assign(Object.assign({}, e), { authToken: { requestStatus: 0 } }) : e;
        });
      }
      async function Pe(e, t) {
        try {
          const n = await Ce(e, t),
            r = Object.assign(Object.assign({}, t), { authToken: n });
          return await ve(e.appConfig, r), n;
        } catch (n) {
          if (!$(n) || (401 !== n.customData.serverCode && 404 !== n.customData.serverCode)) {
            const n = Object.assign(Object.assign({}, t), { authToken: { requestStatus: 0 } });
            await ve(e.appConfig, n);
          } else await ye(e.appConfig);
          throw n;
        }
      }
      function De(e) {
        return void 0 !== e && 2 === e.registrationStatus;
      }
      function Le(e) {
        return 2 === e.requestStatus && !je(e);
      }
      function je(e) {
        const t = Date.now();
        return t < e.creationTime || e.creationTime + e.expiresIn < t + M;
      }
      function Me(e) {
        const t = { requestStatus: 1, requestTime: Date.now() };
        return Object.assign(Object.assign({}, e), { authToken: t });
      }
      function Fe(e) {
        return 1 === e.requestStatus && e.requestTime + P < Date.now();
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ue(e) {
        const t = e,
          { installationEntry: n, registrationPromise: r } = await be(t);
        return r ? r.catch(console.error) : Oe(t).catch(console.error), n.fid;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ve(e, t = !1) {
        const n = e;
        await Be(n);
        const r = await Oe(n, t);
        return r.token;
      }
      async function Be(e) {
        const { registrationPromise: t } = await be(e);
        t && (await t);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function $e(e) {
        if (!e || !e.options) throw qe('App Configuration');
        if (!e.name) throw qe('App Name');
        const t = ['projectId', 'apiKey', 'appId'];
        for (const n of t) if (!e.options[n]) throw qe(n);
        return { appName: e.name, projectId: e.options.projectId, apiKey: e.options.apiKey, appId: e.options.appId };
      }
      function qe(e) {
        return B.create('missing-app-config-values', { valueName: e });
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ze = 'installations',
        Ge = 'installations-internal',
        We = e => {
          const t = e.getProvider('app').getImmediate(),
            n = $e(t),
            r = (0, i._getProvider)(t, 'heartbeat'),
            o = { app: t, appConfig: n, heartbeatServiceProvider: r, _delete: () => Promise.resolve() };
          return o;
        },
        He = e => {
          const t = e.getProvider('app').getImmediate(),
            n = (0, i._getProvider)(t, ze).getImmediate(),
            r = { getId: () => Ue(n), getToken: e => Ve(n, e) };
          return r;
        };
      function Ke() {
        (0, i._registerComponent)(new a.wA(ze, We, 'PUBLIC')), (0, i._registerComponent)(new a.wA(Ge, He, 'PRIVATE'));
      }
      Ke(), (0, i.registerVersion)(N, R), (0, i.registerVersion)(N, R, 'esm2017');
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const Qe = 'analytics',
        Ye = 'firebase_id',
        Xe = 'origin',
        Je = 6e4,
        Ze = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig',
        et = 'https://www.googletagmanager.com/gtag/js',
        tt = new o.Yd('@firebase/analytics'),
        nt = {
          ['already-exists']:
            'A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.',
          ['already-initialized']:
            'initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.',
          ['already-initialized-settings']:
            'Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.',
          ['interop-component-reg-failed']: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',
          ['invalid-analytics-context']:
            'Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}',
          ['indexeddb-unavailable']:
            'IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}',
          ['fetch-throttle']:
            'The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
          ['config-fetch-failed']: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',
          ['no-api-key']:
            'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',
          ['no-app-id']: 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',
          ['no-client-id']: 'The "client_id" field is empty.',
          ['invalid-gtag-resource']: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'
        },
        rt = new s.LL('analytics', 'Analytics', nt);
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function it(e) {
        if (!e.startsWith(et)) {
          const t = rt.create('invalid-gtag-resource', { gtagURL: e });
          return tt.warn(t.message), '';
        }
        return e;
      }
      function ot(e) {
        return Promise.all(e.map(e => e.catch(e => e)));
      }
      function st(e, t) {
        let n;
        return window.trustedTypes && (n = window.trustedTypes.createPolicy(e, t)), n;
      }
      function at(e, t) {
        const n = st('firebase-js-sdk-policy', { createScriptURL: it }),
          r = document.createElement('script'),
          i = `${et}?l=${e}&id=${t}`;
        (r.src = n ? (null === n || void 0 === n ? void 0 : n.createScriptURL(i)) : i), (r.async = !0), document.head.appendChild(r);
      }
      function ut(e) {
        let t = [];
        return Array.isArray(window[e]) ? (t = window[e]) : (window[e] = t), t;
      }
      async function ct(e, t, n, r, i, o) {
        const s = r[i];
        try {
          if (s) await t[s];
          else {
            const e = await ot(n),
              r = e.find(e => e.measurementId === i);
            r && (await t[r.appId]);
          }
        } catch (a) {
          tt.error(a);
        }
        e('config', i, o);
      }
      async function lt(e, t, n, r, i) {
        try {
          let o = [];
          if (i && i['send_to']) {
            let e = i['send_to'];
            Array.isArray(e) || (e = [e]);
            const r = await ot(n);
            for (const n of e) {
              const e = r.find(e => e.measurementId === n),
                i = e && t[e.appId];
              if (!i) {
                o = [];
                break;
              }
