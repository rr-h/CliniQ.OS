remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
            'experimentalForceLongPolling',
            e.experimentalForceLongPolling,
            'experimentalAutoDetectLongPolling',
            e.experimentalAutoDetectLongPolling
          ),
            (this.experimentalForceLongPolling = !!e.experimentalForceLongPolling),
            this.experimentalForceLongPolling
              ? (this.experimentalAutoDetectLongPolling = !1)
              : void 0 === e.experimentalAutoDetectLongPolling
                ? (this.experimentalAutoDetectLongPolling = !0)
                : (this.experimentalAutoDetectLongPolling = !!e.experimentalAutoDetectLongPolling),
            (this.experimentalLongPollingOptions = dp(null !== (n = e.experimentalLongPollingOptions) && void 0 !== n ? n : {})),
            (function (e) {
              if (void 0 !== e.timeoutSeconds) {
                if (isNaN(e.timeoutSeconds)) throw new li(ci.INVALID_ARGUMENT, `invalid long polling timeout: ${e.timeoutSeconds} (must not be NaN)`);
                if (e.timeoutSeconds < 5)
                  throw new li(ci.INVALID_ARGUMENT, `invalid long polling timeout: ${e.timeoutSeconds} (minimum allowed value is 5)`);
                if (e.timeoutSeconds > 30)
                  throw new li(ci.INVALID_ARGUMENT, `invalid long polling timeout: ${e.timeoutSeconds} (maximum allowed value is 30)`);
              }
            })(
              /**
               * @license
               * Copyright 2020 Google LLC
               *
               * Licensed under the Apache License, Version 2.0 (the "License");
               * you may not use this file except in compliance with the License.
               * You may obtain a copy of the License at
               *
               *   http://www.apache.org/licenses/LICENSE-2.0
               *
               * Unless required by applicable law or agreed to in writing, software
               * distributed under the License is distributed on an "AS IS" BASIS,
               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               * See the License for the specific language governing permissions and
               * limitations under the License.
               */ this.experimentalLongPollingOptions
            ),
            (this.useFetchStreams = !!e.useFetchStreams);
        }
        isEqual(e) {
          return (
            this.host === e.host &&
            this.ssl === e.ssl &&
            this.credentials === e.credentials &&
            this.cacheSizeBytes === e.cacheSizeBytes &&
            this.experimentalForceLongPolling === e.experimentalForceLongPolling &&
            this.experimentalAutoDetectLongPolling === e.experimentalAutoDetectLongPolling &&
            ((t = this.experimentalLongPollingOptions), (n = e.experimentalLongPollingOptions), t.timeoutSeconds === n.timeoutSeconds) &&
            this.ignoreUndefinedProperties === e.ignoreUndefinedProperties &&
            this.useFetchStreams === e.useFetchStreams
          );
          var t, n;
        }
      }
      class Ep {
        constructor(e, t, n, r) {
          (this._authCredentials = e),
            (this._appCheckCredentials = t),
            (this._databaseId = n),
            (this._app = r),
            (this.type = 'firestore-lite'),
            (this._persistenceKey = '(lite)'),
            (this._settings = new Ip({})),
            (this._settingsFrozen = !1);
        }
        get app() {
          if (!this._app) throw new li(ci.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
          return this._app;
        }
        get _initialized() {
          return this._settingsFrozen;
        }
        get _terminated() {
          return void 0 !== this._terminateTask;
        }
        _setSettings(e) {
          if (this._settingsFrozen)
            throw new li(
              ci.FAILED_PRECONDITION,
              'Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.'
            );
          (this._settings = new Ip(e)),
            void 0 !== e.credentials &&
              (this._authCredentials = (function (e) {
                if (!e) return new di();
                switch (e.type) {
                  case 'firstParty':
                    return new vi(e.sessionIndex || '0', e.iamToken || null, e.authTokenFactory || null);
                  case 'provider':
                    return e.client;
                  default:
                    throw new li(ci.INVALID_ARGUMENT, 'makeAuthCredentialsProvider failed due to invalid credential type');
                }
              })(e.credentials));
        }
        _getSettings() {
          return this._settings;
        }
        _freezeSettings() {
          return (this._settingsFrozen = !0), this._settings;
        }
        _delete() {
          return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
        }
        toJSON() {
          return { app: this._app, databaseId: this._databaseId, settings: this._settings };
        }
        _terminate() {
          return (
            (function (e) {
              const t = pp.get(e);
              t && (ti('ComponentProvider', 'Removing Datastore'), pp.delete(e), t.terminate());
            })(this),
            Promise.resolve()
          );
        }
      }
      function Sp(e, t, n, r = {}) {
        var i;
        const o = (e = bp(e, Ep))._getSettings(),
          s = `${t}:${n}`;
        if (
          ('firestore.googleapis.com' !== o.host &&
            o.host !== s &&
            ri('Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.'),
          e._setSettings(Object.assign(Object.assign({}, o), { host: s, ssl: !1 })),
          r.mockUserToken)
        ) {
          let t, n;
          if ('string' == typeof r.mockUserToken) (t = r.mockUserToken), (n = Yr.MOCK_USER);
          else {
            t = (0, u.Sg)(r.mockUserToken, null === (i = e._app) || void 0 === i ? void 0 : i.options.projectId);
            const o = r.mockUserToken.sub || r.mockUserToken.user_id;
            if (!o) throw new li(ci.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
            n = new Yr(o);
          }
          e._authCredentials = new pi(new fi(t, n));
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Tp {
        constructor(e, t, n) {
          (this.converter = t), (this._key = n), (this.type = 'document'), (this.firestore = e);
        }
        get _path() {
          return this._key.path;
        }
        get id() {
          return this._key.path.lastSegment();
        }
        get path() {
          return this._key.path.canonicalString();
        }
        get parent() {
          return new xp(this.firestore, this.converter, this._key.path.popLast());
        }
        withConverter(e) {
          return new Tp(this.firestore, e, this._key);
        }
      }
      class Ap {
        constructor(e, t, n) {
          (this.converter = t), (this._query = n), (this.type = 'query'), (this.firestore = e);
        }
        withConverter(e) {
          return new Ap(this.firestore, e, this._query);
        }
      }
      class xp extends Ap {
        constructor(e, t, n) {
          super(e, t, ua(n)), (this._path = n), (this.type = 'collection');
        }
        get id() {
          return this._query.path.lastSegment();
        }
        get path() {
          return this._query.path.canonicalString();
        }
        get parent() {
          const e = this._path.popLast();
          return e.isEmpty() ? null : new Tp(this.firestore, null, new Ni(e));
        }
        withConverter(e) {
          return new xp(this.firestore, e, this._path);
        }
      }
      function Cp(e, t, ...n) {
        if (((e = (0, u.m9)(e)), gp('collection', 'path', t), e instanceof Ep)) {
          const r = Ci.fromString(t, ...n);
          return yp(r), new xp(e, null, r);
        }
        {
          if (!(e instanceof Tp || e instanceof xp))
            throw new li(
              ci.INVALID_ARGUMENT,
              'Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore'
            );
          const r = e._path.child(Ci.fromString(t, ...n));
          return yp(r), new xp(e.firestore, null, r);
        }
      }
      function kp(e, t) {
        if (((e = bp(e, Ep)), gp('collectionGroup', 'collection id', t), t.indexOf('/') >= 0))
          throw new li(
            ci.INVALID_ARGUMENT,
            `Invalid collection ID '${t}' passed to function collectionGroup(). Collection IDs must not contain '/'.`
          );
        return new Ap(
          e,
          null,
          (function (e) {
            return new sa(Ci.emptyPath(), e);
          })(t)
        );
      }
      function Op(e, t, ...n) {
        if (((e = (0, u.m9)(e)), 1 === arguments.length && (t = _i.A()), gp('doc', 'path', t), e instanceof Ep)) {
          const r = Ci.fromString(t, ...n);
          return vp(r), new Tp(e, null, new Ni(r));
        }
        {
          if (!(e instanceof Tp || e instanceof xp))
            throw new li(
              ci.INVALID_ARGUMENT,
              'Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore'
            );
          const r = e._path.child(Ci.fromString(t, ...n));
          return vp(r), new Tp(e.firestore, e instanceof xp ? e.converter : null, new Ni(r));
        }
      }
      function Np(e, t) {
        return (
          (e = (0, u.m9)(e)),
          (t = (0, u.m9)(t)),
          (e instanceof Tp || e instanceof xp) &&
            (t instanceof Tp || t instanceof xp) &&
            e.firestore === t.firestore &&
            e.path === t.path &&
            e.converter === t.converter
        );
      }
      function Rp(e, t) {
        return (
          (e = (0, u.m9)(e)),
          (t = (0, u.m9)(t)),
          e instanceof Ap && t instanceof Ap && e.firestore === t.firestore && va(e._query, t._query) && e.converter === t.converter
        );
        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
      }
      class Pp {
        constructor() {
          (this.Gc = Promise.resolve()),
            (this.Qc = []),
            (this.jc = !1),
            (this.zc = []),
            (this.Wc = null),
            (this.Hc = !1),
            (this.Jc = !1),
            (this.Yc = []),
            (this.qo = new ef(this, 'async_queue_retry')),
            (this.Xc = () => {
              const e = Jh();
              e && ti('AsyncQueue', 'Visibility state changed to ' + e.visibilityState), this.qo.Mo();
            });
          const e = Jh();
          e && 'function' == typeof e.addEventListener && e.addEventListener('visibilitychange', this.Xc);
        }
        get isShuttingDown() {
          return this.jc;
        }
        enqueueAndForget(e) {
          this.enqueue(e);
        }
        enqueueAndForgetEvenWhileRestricted(e) {
          this.Zc(), this.ta(e);
        }
        enterRestrictedMode(e) {
          if (!this.jc) {
            (this.jc = !0), (this.Jc = e || !1);
            const t = Jh();
            t && 'function' == typeof t.removeEventListener && t.removeEventListener('visibilitychange', this.Xc);
          }
        }
        enqueue(e) {
          if ((this.Zc(), this.jc)) return new Promise(() => {});
          const t = new hi();
          return this.ta(() => (this.jc && this.Jc ? Promise.resolve() : (e().then(t.resolve, t.reject), t.promise))).then(() => t.promise);
        }
        enqueueRetryable(e) {
          this.enqueueAndForget(() => (this.Qc.push(e), this.ea()));
        }
        async ea() {
          if (0 !== this.Qc.length) {
            try {
              await this.Qc[0](), this.Qc.shift(), this.qo.reset();
            } catch (e) {
              if (!Qi(e)) throw e;
              ti('AsyncQueue', 'Operation failed with retryable error: ' + e);
            }
            this.Qc.length > 0 && this.qo.No(() => this.ea());
          }
        }
        ta(e) {
          const t = this.Gc.then(
            () => (
              (this.Hc = !0),
              e()
                .catch(e => {
                  (this.Wc = e), (this.Hc = !1);
                  const t = (function (e) {
                    let t = e.message || '';
                    return e.stack && (t = e.stack.includes(e.message) ? e.stack : e.message + '\n' + e.stack), t;
                  })(
                    /**
                     * @license
                     * Copyright 2017 Google LLC
                     *
                     * Licensed under the Apache License, Version 2.0 (the "License");
                     * you may not use this file except in compliance with the License.
                     * You may obtain a copy of the License at
                     *
                     *   http://www.apache.org/licenses/LICENSE-2.0
                     *
                     * Unless required by applicable law or agreed to in writing, software
                     * distributed under the License is distributed on an "AS IS" BASIS,
                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                     * See the License for the specific language governing permissions and
                     * limitations under the License.
                     */ e
                  );
                  throw (ni('INTERNAL UNHANDLED ERROR: ', t), e);
                })
                .then(e => ((this.Hc = !1), e))
            )
          );
          return (this.Gc = t), t;
        }
        enqueueAfterDelay(e, t, n) {
          this.Zc(), this.Yc.indexOf(e) > -1 && (t = 0);
          const r = jf.createAndSchedule(this, e, t, n, e => this.na(e));
          return this.zc.push(r), r;
        }
        Zc() {
          this.Wc && oi();
        }
        verifyOperationInProgress() {}
        async sa() {
          let e;
          do {
            (e = this.Gc), await e;
          } while (e !== this.Gc);
        }
        ia(e) {
          for (const t of this.zc) if (t.timerId === e) return !0;
          return !1;
        }
        ra(e) {
          return this.sa().then(() => {
            this.zc.sort((e, t) => e.targetTimeMs - t.targetTimeMs);
            for (const t of this.zc) if ((t.skipDelay(), 'all' !== e && t.timerId === e)) break;
            return this.sa();
          });
        }
        oa(e) {
          this.Yc.push(e);
        }
        na(e) {
          const t = this.zc.indexOf(e);
          this.zc.splice(t, 1);
        }
