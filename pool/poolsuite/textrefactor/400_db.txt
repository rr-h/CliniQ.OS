remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
        }
        static _create(e, t) {
          return new Pt(e, t);
        }
        buildRequest() {
          return { requestUri: Rt, returnSecureToken: !0, pendingToken: this.pendingToken };
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Dt = 'saml.';
      class Lt extends At {
        constructor(e) {
          S(e.startsWith(Dt), 'argument-error'), super(e);
        }
        static credentialFromResult(e) {
          return Lt.samlCredentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Lt.samlCredentialFromTaggedObject(e.customData || {});
        }
        static credentialFromJSON(e) {
          const t = Pt.fromJSON(e);
          return S(t, 'argument-error'), t;
        }
        static samlCredentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { pendingToken: t, providerId: n } = e;
          if (!t || !n) return null;
          try {
            return Pt._create(n, t);
          } catch (r) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class jt extends xt {
        constructor() {
          super('twitter.com');
        }
        static credential(e, t) {
          return gt._fromParams({ providerId: jt.PROVIDER_ID, signInMethod: jt.TWITTER_SIGN_IN_METHOD, oauthToken: e, oauthTokenSecret: t });
        }
        static credentialFromResult(e) {
          return jt.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return jt.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { oauthAccessToken: t, oauthTokenSecret: n } = e;
          if (!t || !n) return null;
          try {
            return jt.credential(t, n);
          } catch (r) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      async function Mt(e, t) {
        return V(e, 'POST', '/v1/accounts:signUp', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ (jt.TWITTER_SIGN_IN_METHOD = 'twitter.com'), (jt.PROVIDER_ID = 'twitter.com');
      class Ft {
        constructor(e) {
          (this.user = e.user), (this.providerId = e.providerId), (this._tokenResponse = e._tokenResponse), (this.operationType = e.operationType);
        }
        static async _fromIdTokenResponse(e, t, n, r = !1) {
          const i = await ce._fromIdTokenResponse(e, n, r),
            o = Ut(n),
            s = new Ft({ user: i, providerId: o, _tokenResponse: n, operationType: t });
          return s;
        }
        static async _forOperation(e, t, n) {
          await e._updateTokensIfNecessary(n, !0);
          const r = Ut(n);
          return new Ft({ user: e, providerId: r, _tokenResponse: n, operationType: t });
        }
      }
      function Ut(e) {
        return e.providerId ? e.providerId : 'phoneNumber' in e ? 'phone' : null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Vt(e) {
        var t;
        const n = We(e);
        if ((await n._initializationPromise, null === (t = n.currentUser) || void 0 === t ? void 0 : t.isAnonymous))
          return new Ft({ user: n.currentUser, providerId: null, operationType: 'signIn' });
        const r = await Mt(n, { returnSecureToken: !0 }),
          i = await Ft._fromIdTokenResponse(n, 'signIn', r, !0);
        return await n._updateCurrentUser(i.user), i;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Bt extends i.ZR {
        constructor(e, t, n, r) {
          var i;
          super(t.code, t.message),
            (this.operationType = n),
            (this.user = r),
            Object.setPrototypeOf(this, Bt.prototype),
            (this.customData = {
              appName: e.name,
              tenantId: null !== (i = e.tenantId) && void 0 !== i ? i : void 0,
              _serverResponse: t.customData._serverResponse,
              operationType: n
            });
        }
        static _fromErrorAndOperation(e, t, n, r) {
          return new Bt(e, t, n, r);
        }
      }
      function $t(e, t, n, r) {
        const i = 'reauthenticate' === t ? n._getReauthenticationResolver(e) : n._getIdTokenResponse(e);
        return i.catch(n => {
          if ('auth/multi-factor-auth-required' === n.code) throw Bt._fromErrorAndOperation(e, n, t, r);
          throw n;
        });
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function qt(e) {
        return new Set(e.map(({ providerId: e }) => e).filter(e => !!e));
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function zt(e, t) {
        const n = (0, i.m9)(e);
        await Wt(!0, n, t);
        const { providerUserInfo: r } = await G(n.auth, { idToken: await n.getIdToken(), deleteProvider: [t] }),
          o = qt(r || []);
        return (
          (n.providerData = n.providerData.filter(e => o.has(e.providerId))),
          o.has('phone') || (n.phoneNumber = null),
          await n.auth._persistUserIfCurrent(n),
          n
        );
      }
      async function Gt(e, t, n = !1) {
        const r = await J(e, t._linkToIdToken(e.auth, await e.getIdToken()), n);
        return Ft._forOperation(e, 'link', r);
      }
      async function Wt(e, t, n) {
        await ne(t);
        const r = qt(t.providerData),
          i = !1 === e ? 'provider-already-linked' : 'no-such-provider';
        S(r.has(n) === e, t.auth, i);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ht(e, t, n = !1) {
        const { auth: r } = e,
          i = 'reauthenticate';
        try {
          const o = await J(e, $t(r, i, t, e), n);
          S(o.idToken, r, 'internal-error');
          const s = Y(o.idToken);
          S(s, r, 'internal-error');
          const { sub: a } = s;
          return S(e.uid === a, r, 'user-mismatch'), Ft._forOperation(e, i, o);
        } catch (o) {
          throw ('auth/user-not-found' === (null === o || void 0 === o ? void 0 : o.code) && w(r, 'user-mismatch'), o);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Kt(e, t, n = !1) {
        const r = 'signIn',
          i = await $t(e, r, t),
          o = await Ft._fromIdTokenResponse(e, r, i);
        return n || (await e._updateCurrentUser(o.user)), o;
      }
      async function Qt(e, t) {
        return Kt(We(e), t);
      }
      async function Yt(e, t) {
        const n = (0, i.m9)(e);
        return await Wt(!1, n, t.providerId), Gt(n, t);
      }
      async function Xt(e, t) {
        return Ht((0, i.m9)(e), t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Jt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithCustomToken', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Zt(e, t) {
        const n = We(e),
          r = await Jt(n, { token: t, returnSecureToken: !0 }),
          i = await Ft._fromIdTokenResponse(n, 'signIn', r);
        return await n._updateCurrentUser(i.user), i;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class en {
        constructor(e, t) {
          (this.factorId = e),
            (this.uid = t.mfaEnrollmentId),
            (this.enrollmentTime = new Date(t.enrolledAt).toUTCString()),
            (this.displayName = t.displayName);
        }
        static _fromServerResponse(e, t) {
          return 'phoneInfo' in t ? tn._fromServerResponse(e, t) : 'totpInfo' in t ? nn._fromServerResponse(e, t) : w(e, 'internal-error');
        }
      }
      class tn extends en {
        constructor(e) {
          super('phone', e), (this.phoneNumber = e.phoneInfo);
        }
        static _fromServerResponse(e, t) {
          return new tn(t);
        }
      }
      class nn extends en {
        constructor(e) {
          super('totp', e);
        }
        static _fromServerResponse(e, t) {
          return new nn(t);
