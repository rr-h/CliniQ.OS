remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
      lo.FACTOR_ID = 'phone';
      class ho {
        static assertionForEnrollment(e, t) {
          return fo._fromSecret(e, t);
        }
        static assertionForSignIn(e, t) {
          return fo._fromEnrollmentId(e, t);
        }
        static async generateSecret(e) {
          const t = e;
          S('undefined' !== typeof t.auth, 'internal-error');
          const n = await Mn(t.auth, { idToken: t.credential, totpEnrollmentInfo: {} });
          return po._fromStartTotpMfaEnrollmentResponse(n, t.auth);
        }
      }
      ho.FACTOR_ID = 'totp';
      class fo extends uo {
        constructor(e, t, n) {
          super('totp'), (this.otp = e), (this.enrollmentId = t), (this.secret = n);
        }
        static _fromSecret(e, t) {
          return new fo(t, void 0, e);
        }
        static _fromEnrollmentId(e, t) {
          return new fo(t, e);
        }
        async _finalizeEnroll(e, t, n) {
          return (
            S('undefined' !== typeof this.secret, e, 'argument-error'),
            Fn(e, { idToken: t, displayName: n, totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp) })
          );
        }
        async _finalizeSignIn(e, t) {
          S(void 0 !== this.enrollmentId && void 0 !== this.otp, e, 'argument-error');
          const n = { verificationCode: this.otp };
          return Tr(e, { mfaPendingCredential: t, mfaEnrollmentId: this.enrollmentId, totpVerificationInfo: n });
        }
      }
      class po {
        constructor(e, t, n, r, i, o, s) {
          (this.sessionInfo = o),
            (this.auth = s),
            (this.secretKey = e),
            (this.hashingAlgorithm = t),
            (this.codeLength = n),
            (this.codeIntervalSeconds = r),
            (this.enrollmentCompletionDeadline = i);
        }
        static _fromStartTotpMfaEnrollmentResponse(e, t) {
          return new po(
            e.totpSessionInfo.sharedSecretKey,
            e.totpSessionInfo.hashingAlgorithm,
            e.totpSessionInfo.verificationCodeLength,
            e.totpSessionInfo.periodSec,
            new Date(e.totpSessionInfo.finalizeEnrollmentTime).toUTCString(),
            e.totpSessionInfo.sessionInfo,
            t
          );
        }
        _makeTotpVerificationInfo(e) {
          return { sessionInfo: this.sessionInfo, verificationCode: e };
        }
        generateQrCodeUrl(e, t) {
          var n;
          let r = !1;
          return (
            (go(e) || go(t)) && (r = !0),
            r &&
              (go(e) && (e = (null === (n = this.auth.currentUser) || void 0 === n ? void 0 : n.email) || 'unknownuser'),
              go(t) && (t = this.auth.name)),
            `otpauth://totp/${t}:${e}?secret=${this.secretKey}&issuer=${t}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`
          );
        }
      }
      function go(e) {
        return 'undefined' === typeof e || 0 === (null === e || void 0 === e ? void 0 : e.length);
      }
      var mo = '@firebase/auth',
        vo = '0.23.2';
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class yo {
        constructor(e) {
          (this.auth = e), (this.internalListeners = new Map());
        }
        getUid() {
          var e;
          return this.assertAuthConfigured(), (null === (e = this.auth.currentUser) || void 0 === e ? void 0 : e.uid) || null;
        }
        async getToken(e) {
          if ((this.assertAuthConfigured(), await this.auth._initializationPromise, !this.auth.currentUser)) return null;
          const t = await this.auth.currentUser.getIdToken(e);
          return { accessToken: t };
        }
        addAuthTokenListener(e) {
          if ((this.assertAuthConfigured(), this.internalListeners.has(e))) return;
          const t = this.auth.onIdTokenChanged(t => {
            e((null === t || void 0 === t ? void 0 : t.stsTokenManager.accessToken) || null);
          });
          this.internalListeners.set(e, t), this.updateProactiveRefresh();
        }
        removeAuthTokenListener(e) {
          this.assertAuthConfigured();
          const t = this.internalListeners.get(e);
          t && (this.internalListeners.delete(e), t(), this.updateProactiveRefresh());
        }
        assertAuthConfigured() {
          S(this.auth._initializationPromise, 'dependent-sdk-initialized-before-auth');
        }
        updateProactiveRefresh() {
          this.internalListeners.size > 0 ? this.auth._startProactiveRefresh() : this.auth._stopProactiveRefresh();
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function wo(e) {
        switch (e) {
          case 'Node':
            return 'node';
          case 'ReactNative':
            return 'rn';
          case 'Worker':
            return 'webworker';
          case 'Cordova':
            return 'cordova';
          default:
            return;
        }
      }
      function bo(e) {
        (0, o._registerComponent)(
          new u.wA(
            'auth',
            (t, { options: n }) => {
              const r = t.getProvider('app').getImmediate(),
                i = t.getProvider('heartbeat'),
                o = t.getProvider('app-check-internal'),
                { apiKey: s, authDomain: a } = r.options;
              S(s && !s.includes(':'), 'invalid-api-key', { appName: r.name });
              const u = {
                  apiKey: s,
                  authDomain: a,
                  clientPlatform: e,
                  apiHost: 'identitytoolkit.googleapis.com',
                  tokenApiHost: 'securetoken.googleapis.com',
                  apiScheme: 'https',
                  sdkClientVersion: Oe(e)
                },
                c = new Ge(r, i, o, u);
              return Ke(c, n), c;
            },
            'PUBLIC'
          )
            .setInstantiationMode('EXPLICIT')
            .setInstanceCreatedCallback((e, t, n) => {
              const r = e.getProvider('auth-internal');
              r.initialize();
            })
        ),
          (0, o._registerComponent)(
            new u.wA(
              'auth-internal',
              e => {
                const t = We(e.getProvider('auth').getImmediate());
                return (e => new yo(e))(t);
              },
              'PRIVATE'
            ).setInstantiationMode('EXPLICIT')
          ),
          (0, o.registerVersion)(mo, vo, wo(e)),
          (0, o.registerVersion)(mo, vo, 'esm2017');
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const _o = 300;
      (0, i.Pz)('authIdTokenMaxAge');
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function Io() {
        return window;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ bo('Browser');
      const Eo = 2e3;
      async function So(e, t, n) {
        var r;
        const { BuildInfo: i } = Io();
        A(t.sessionId, 'AuthEvent did not contain a session ID');
        const o = await ko(t.sessionId),
          s = {};
        return (
          Se() ? (s['ibi'] = i.packageName) : _e() ? (s['apn'] = i.packageName) : w(e, 'operation-not-supported-in-this-environment'),
          i.displayName && (s['appDisplayName'] = i.displayName),
          (s['sessionId'] = o),
          ro(e, n, t.type, void 0, null !== (r = t.eventId) && void 0 !== r ? r : void 0, s)
        );
      }
      async function To(e) {
        const { BuildInfo: t } = Io(),
          n = {};
        Se() ? (n.iosBundleId = t.packageName) : _e() ? (n.androidPackageName = t.packageName) : w(e, 'operation-not-supported-in-this-environment'),
          await ki(e, n);
      }
      function Ao(e) {
        const { cordova: t } = Io();
        return new Promise(n => {
          t.plugins.browsertab.isAvailable(r => {
            let i = null;
            r ? t.plugins.browsertab.openUrl(e) : (i = t.InAppBrowser.open(e, Te() ? '_blank' : '_system', 'location=yes')), n(i);
          });
        });
      }
      async function xo(e, t, n) {
        const { cordova: r } = Io();
        let i = () => {};
        try {
          await new Promise((o, s) => {
            let a = null;
            function u() {
              var e;
              o();
              const t = null === (e = r.plugins.browsertab) || void 0 === e ? void 0 : e.close;
              'function' === typeof t && t(), 'function' === typeof (null === n || void 0 === n ? void 0 : n.close) && n.close();
            }
            function c() {
              a ||
                (a = window.setTimeout(() => {
                  s(b(e, 'redirect-cancelled-by-user'));
                }, Eo));
            }
            function l() {
              'visible' === (null === document || void 0 === document ? void 0 : document.visibilityState) && c();
            }
            t.addPassiveListener(u),
              document.addEventListener('resume', c, !1),
              _e() && document.addEventListener('visibilitychange', l, !1),
              (i = () => {
                t.removePassiveListener(u),
                  document.removeEventListener('resume', c, !1),
                  document.removeEventListener('visibilitychange', l, !1),
                  a && window.clearTimeout(a);
              });
          });
        } finally {
          i();
        }
      }
      function Co(e) {
        var t, n, r, i, o, s, a, u, c, l;
        const h = Io();
        S(
          'function' === typeof (null === (t = null === h || void 0 === h ? void 0 : h.universalLinks) || void 0 === t ? void 0 : t.subscribe),
          e,
          'invalid-cordova-configuration',
          { missingPlugin: 'cordova-universal-links-plugin-fix' }
        ),
          S(
            'undefined' !== typeof (null === (n = null === h || void 0 === h ? void 0 : h.BuildInfo) || void 0 === n ? void 0 : n.packageName),
            e,
            'invalid-cordova-configuration',
            { missingPlugin: 'cordova-plugin-buildInfo' }
          ),
          S(
            'function' ===
              typeof (null ===
                (o =
                  null === (i = null === (r = null === h || void 0 === h ? void 0 : h.cordova) || void 0 === r ? void 0 : r.plugins) || void 0 === i
                    ? void 0
                    : i.browsertab) || void 0 === o
                ? void 0
                : o.openUrl),
            e,
            'invalid-cordova-configuration',
            { missingPlugin: 'cordova-plugin-browsertab' }
          ),
          S(
            'function' ===
              typeof (null ===
                (u =
                  null === (a = null === (s = null === h || void 0 === h ? void 0 : h.cordova) || void 0 === s ? void 0 : s.plugins) || void 0 === a
                    ? void 0
                    : a.browsertab) || void 0 === u
                ? void 0
                : u.isAvailable),
            e,
            'invalid-cordova-configuration',
            { missingPlugin: 'cordova-plugin-browsertab' }
          ),
          S(
            'function' ===
              typeof (null === (l = null === (c = null === h || void 0 === h ? void 0 : h.cordova) || void 0 === c ? void 0 : c.InAppBrowser) ||
              void 0 === l
                ? void 0
                : l.open),
            e,
            'invalid-cordova-configuration',
            { missingPlugin: 'cordova-plugin-inappbrowser' }
          );
      }
      async function ko(e) {
        const t = Oo(e),
          n = await crypto.subtle.digest('SHA-256', t),
          r = Array.from(new Uint8Array(n));
        return r.map(e => e.toString(16).padStart(2, '0')).join('');
      }
      function Oo(e) {
        if ((A(/[0-9a-zA-Z]+/.test(e), 'Can only convert alpha-numeric strings'), 'undefined' !== typeof TextEncoder))
          return new TextEncoder().encode(e);
        const t = new ArrayBuffer(e.length),
          n = new Uint8Array(t);
        for (let r = 0; r < e.length; r++) n[r] = e.charCodeAt(r);
        return n;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const No = 20;
      class Ro extends Ti {
        constructor() {
          super(...arguments),
