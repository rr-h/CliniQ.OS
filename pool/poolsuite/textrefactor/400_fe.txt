remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
        }
        doc(e) {
          try {
            return new Hm(this, Op(this._delegate, e));
          } catch (t) {
            throw Km(t, 'doc()', 'Firestore.doc()');
          }
        }
        collectionGroup(e) {
          try {
            return new Zm(this, kp(this._delegate, e));
          } catch (t) {
            throw Km(t, 'collectionGroup()', 'Firestore.collectionGroup()');
          }
        }
        runTransaction(e) {
          return Am(this._delegate, t => e(new zm(this, t)));
        }
        batch() {
          return Fp(this._delegate), new Gm(new Em(this._delegate, e => bm(this._delegate, e)));
        }
        loadBundle(e) {
          return Hp(this._delegate, e);
        }
        namedQuery(e) {
          return Kp(this._delegate, e).then(e => (e ? new Zm(this, e) : null));
        }
      }
      class $m extends Jg {
        constructor(e) {
          super(), (this.firestore = e);
        }
        convertBytes(e) {
          return new Mm(new Yp(e));
        }
        convertReference(e) {
          const t = this.convertDocumentKey(e, this.firestore._databaseId);
          return Hm.forKey(t, this.firestore, null);
        }
      }
      function qm(e) {
        ei(e);
      }
      class zm {
        constructor(e, t) {
          (this._firestore = e), (this._delegate = t), (this._userDataWriter = new $m(e));
        }
        get(e) {
          const t = rv(e);
          return this._delegate
            .get(t)
            .then(
              e => new Xm(this._firestore, new nm(this._firestore._delegate, this._userDataWriter, e._key, e._document, e.metadata, t.converter))
            );
        }
        set(e, t, n) {
          const r = rv(e);
          return n ? (Dm('Transaction.set', n), this._delegate.set(r, t, n)) : this._delegate.set(r, t), this;
        }
        update(e, t, n, ...r) {
          const i = rv(e);
          return 2 === arguments.length ? this._delegate.update(i, t) : this._delegate.update(i, t, n, ...r), this;
        }
        delete(e) {
          const t = rv(e);
          return this._delegate.delete(t), this;
        }
      }
      class Gm {
        constructor(e) {
          this._delegate = e;
        }
        set(e, t, n) {
          const r = rv(e);
          return n ? (Dm('WriteBatch.set', n), this._delegate.set(r, t, n)) : this._delegate.set(r, t), this;
        }
        update(e, t, n, ...r) {
          const i = rv(e);
          return 2 === arguments.length ? this._delegate.update(i, t) : this._delegate.update(i, t, n, ...r), this;
        }
        delete(e) {
          const t = rv(e);
          return this._delegate.delete(t), this;
        }
        commit() {
          return this._delegate.commit();
        }
      }
      class Wm {
        constructor(e, t, n) {
          (this._firestore = e), (this._userDataWriter = t), (this._delegate = n);
        }
        fromFirestore(e, t) {
          const n = new rm(this._firestore._delegate, this._userDataWriter, e._key, e._document, e.metadata, null);
          return this._delegate.fromFirestore(new Jm(this._firestore, n), null !== t && void 0 !== t ? t : {});
        }
        toFirestore(e, t) {
          return t ? this._delegate.toFirestore(e, t) : this._delegate.toFirestore(e);
        }
        static getInstance(e, t) {
          const n = Wm.INSTANCES;
          let r = n.get(e);
          r || ((r = new WeakMap()), n.set(e, r));
          let i = r.get(t);
          return i || ((i = new Wm(e, new $m(e), t)), r.set(t, i)), i;
        }
      }
      Wm.INSTANCES = new WeakMap();
      class Hm {
        constructor(e, t) {
          (this.firestore = e), (this._delegate = t), (this._userDataWriter = new $m(e));
        }
        static forPath(e, t, n) {
          if (e.length % 2 !== 0)
            throw new li(
              'invalid-argument',
              `Invalid document reference. Document references must have an even number of segments, but ${e.canonicalString()} has ${e.length}`
            );
          return new Hm(t, new Tp(t._delegate, n, new Ni(e)));
        }
        static forKey(e, t, n) {
          return new Hm(t, new Tp(t._delegate, n, e));
        }
        get id() {
          return this._delegate.id;
        }
        get parent() {
          return new nv(this.firestore, this._delegate.parent);
        }
        get path() {
          return this._delegate.path;
        }
        collection(e) {
          try {
            return new nv(this.firestore, Cp(this._delegate, e));
          } catch (t) {
            throw Km(t, 'collection()', 'DocumentReference.collection()');
          }
        }
        isEqual(e) {
          return (e = (0, u.m9)(e)), e instanceof Tp && Np(this._delegate, e);
        }
        set(e, t) {
          t = Dm('DocumentReference.set', t);
          try {
            return t ? pm(this._delegate, e, t) : pm(this._delegate, e);
          } catch (n) {
            throw Km(n, 'setDoc()', 'DocumentReference.set()');
          }
        }
        update(e, t, ...n) {
          try {
            return 1 === arguments.length ? gm(this._delegate, e) : gm(this._delegate, e, t, ...n);
          } catch (r) {
            throw Km(r, 'updateDoc()', 'DocumentReference.update()');
          }
        }
        delete() {
          return mm(this._delegate);
        }
        onSnapshot(...e) {
          const t = Qm(e),
            n = Ym(
              e,
              e =>
                new Xm(
                  this.firestore,
                  new nm(this.firestore._delegate, this._userDataWriter, e._key, e._document, e.metadata, this._delegate.converter)
                )
            );
          return ym(this._delegate, t, n);
        }
        get(e) {
          let t;
          return (
            (t =
              'cache' === (null === e || void 0 === e ? void 0 : e.source)
                ? cm(this._delegate)
                : 'server' === (null === e || void 0 === e ? void 0 : e.source)
                  ? lm(this._delegate)
                  : am(this._delegate)),
            t.then(
              e =>
                new Xm(
                  this.firestore,
                  new nm(this.firestore._delegate, this._userDataWriter, e._key, e._document, e.metadata, this._delegate.converter)
                )
            )
          );
        }
        withConverter(e) {
          return new Hm(this.firestore, e ? this._delegate.withConverter(Wm.getInstance(this.firestore, e)) : this._delegate.withConverter(null));
        }
      }
      function Km(e, t, n) {
        return (e.message = e.message.replace(t, n)), e;
      }
      function Qm(e) {
        for (const t of e) if ('object' === typeof t && !Fm(t)) return t;
        return {};
      }
      function Ym(e, t) {
        var n, r;
        let i;
        return (
          (i = Fm(e[0])
            ? e[0]
            : Fm(e[1])
              ? e[1]
              : 'function' === typeof e[0]
                ? { next: e[0], error: e[1], complete: e[2] }
                : { next: e[1], error: e[2], complete: e[3] }),
          {
            next: e => {
              i.next && i.next(t(e));
            },
            error: null === (n = i.error) || void 0 === n ? void 0 : n.bind(i),
            complete: null === (r = i.complete) || void 0 === r ? void 0 : r.bind(i)
          }
        );
      }
      class Xm {
        constructor(e, t) {
          (this._firestore = e), (this._delegate = t);
        }
        get ref() {
          return new Hm(this._firestore, this._delegate.ref);
        }
        get id() {
          return this._delegate.id;
        }
        get metadata() {
          return this._delegate.metadata;
        }
        get exists() {
          return this._delegate.exists();
        }
        data(e) {
          return this._delegate.data(e);
        }
        get(e, t) {
          return this._delegate.get(e, t);
        }
        isEqual(e) {
          return sm(this._delegate, e._delegate);
        }
      }
      class Jm extends Xm {
        data(e) {
          const t = this._delegate.data(e);
          return ai(void 0 !== t, 'Document in a QueryDocumentSnapshot should exist'), t;
        }
      }
      class Zm {
        constructor(e, t) {
          (this.firestore = e), (this._delegate = t), (this._userDataWriter = new $m(e));
        }
        where(e, t, n) {
          try {
            return new Zm(this.firestore, Rg(this._delegate, Dg(e, t, n)));
          } catch (r) {
            throw Km(r, /(orderBy|where)\(\)/, 'Query.$1()');
          }
        }
        orderBy(e, t) {
          try {
            return new Zm(this.firestore, Rg(this._delegate, Mg(e, t)));
          } catch (n) {
            throw Km(n, /(orderBy|where)\(\)/, 'Query.$1()');
          }
        }
        limit(e) {
          try {
            return new Zm(this.firestore, Rg(this._delegate, Ug(e)));
          } catch (t) {
            throw Km(t, 'limit()', 'Query.limit()');
          }
        }
        limitToLast(e) {
          try {
            return new Zm(this.firestore, Rg(this._delegate, Vg(e)));
          } catch (t) {
            throw Km(t, 'limitToLast()', 'Query.limitToLast()');
          }
        }
        startAt(...e) {
          try {
            return new Zm(this.firestore, Rg(this._delegate, $g(...e)));
          } catch (t) {
            throw Km(t, 'startAt()', 'Query.startAt()');
          }
        }
        startAfter(...e) {
          try {
            return new Zm(this.firestore, Rg(this._delegate, qg(...e)));
          } catch (t) {
            throw Km(t, 'startAfter()', 'Query.startAfter()');
          }
        }
        endBefore(...e) {
          try {
            return new Zm(this.firestore, Rg(this._delegate, Gg(...e)));
          } catch (t) {
            throw Km(t, 'endBefore()', 'Query.endBefore()');
          }
        }
        endAt(...e) {
          try {
            return new Zm(this.firestore, Rg(this._delegate, Wg(...e)));
          } catch (t) {
            throw Km(t, 'endAt()', 'Query.endAt()');
          }
        }
        isEqual(e) {
          return Rp(this._delegate, e._delegate);
        }
        get(e) {
          let t;
          return (
            (t =
              'cache' === (null === e || void 0 === e ? void 0 : e.source)
                ? fm(this._delegate)
                : 'server' === (null === e || void 0 === e ? void 0 : e.source)
                  ? dm(this._delegate)
                  : hm(this._delegate)),
            t.then(e => new tv(this.firestore, new im(this.firestore._delegate, this._userDataWriter, this._delegate, e._snapshot)))
          );
        }
        onSnapshot(...e) {
          const t = Qm(e),
            n = Ym(e, e => new tv(this.firestore, new im(this.firestore._delegate, this._userDataWriter, this._delegate, e._snapshot)));
          return ym(this._delegate, t, n);
        }
        withConverter(e) {
          return new Zm(this.firestore, e ? this._delegate.withConverter(Wm.getInstance(this.firestore, e)) : this._delegate.withConverter(null));
        }
      }
      class ev {
        constructor(e, t) {
          (this._firestore = e), (this._delegate = t);
        }
        get type() {
          return this._delegate.type;
        }
        get doc() {
          return new Jm(this._firestore, this._delegate.doc);
        }
        get oldIndex() {
          return this._delegate.oldIndex;
        }
        get newIndex() {
          return this._delegate.newIndex;
        }
      }
      class tv {
        constructor(e, t) {
          (this._firestore = e), (this._delegate = t);
        }
        get query() {
          return new Zm(this._firestore, this._delegate.query);
        }
        get metadata() {
          return this._delegate.metadata;
        }
        get size() {
          return this._delegate.size;
        }
        get empty() {
          return this._delegate.empty;
        }
        get docs() {
          return this._delegate.docs.map(e => new Jm(this._firestore, e));
        }
        docChanges(e) {
          return this._delegate.docChanges(e).map(e => new ev(this._firestore, e));
        }
        forEach(e, t) {
          this._delegate.forEach(n => {
            e.call(t, new Jm(this._firestore, n));
          });
        }
        isEqual(e) {
          return sm(this._delegate, e._delegate);
        }
      }
      class nv extends Zm {
        constructor(e, t) {
          super(e, t), (this.firestore = e), (this._delegate = t);
        }
        get id() {
          return this._delegate.id;
        }
        get path() {
          return this._delegate.path;
        }
        get parent() {
          const e = this._delegate.parent;
          return e ? new Hm(this.firestore, e) : null;
        }
        doc(e) {
