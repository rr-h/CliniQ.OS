remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
            return !1;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function ki(e, t = {}) {
        return F(e, 'GET', '/v1/projects', t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Oi = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,
        Ni = /^https?/;
      async function Ri(e) {
        if (e.config.emulator) return;
        const { authorizedDomains: t } = await ki(e);
        for (const r of t)
          try {
            if (Pi(r)) return;
          } catch (n) {}
        w(e, 'unauthorized-domain');
      }
      function Pi(e) {
        const t = x(),
          { protocol: n, hostname: r } = new URL(t);
        if (e.startsWith('chrome-extension://')) {
          const i = new URL(e);
          return '' === i.hostname && '' === r
            ? 'chrome-extension:' === n && e.replace('chrome-extension://', '') === t.replace('chrome-extension://', '')
            : 'chrome-extension:' === n && i.hostname === r;
        }
        if (!Ni.test(n)) return !1;
        if (Oi.test(e)) return r === e;
        const i = e.replace(/\./g, '\\.'),
          o = new RegExp('^(.+\\.' + i + '|' + i + ')$', 'i');
        return o.test(r);
      }
      /**
       * @license
       * Copyright 2020 Google LLC.
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Di = new R(3e4, 6e4);
      function Li() {
        const e = nr().___jsl;
        if (null === e || void 0 === e ? void 0 : e.H)
          for (const t of Object.keys(e.H))
            if (((e.H[t].r = e.H[t].r || []), (e.H[t].L = e.H[t].L || []), (e.H[t].r = [...e.H[t].L]), e.CP))
              for (let n = 0; n < e.CP.length; n++) e.CP[n] = null;
      }
      function ji(e) {
        return new Promise((t, n) => {
          var r, i, o;
          function s() {
            Li(),
              gapi.load('gapi.iframes', {
                callback: () => {
                  t(gapi.iframes.getContext());
                },
                ontimeout: () => {
                  Li(), n(b(e, 'network-request-failed'));
                },
                timeout: Di.get()
              });
          }
          if (null === (i = null === (r = nr().gapi) || void 0 === r ? void 0 : r.iframes) || void 0 === i ? void 0 : i.Iframe)
            t(gapi.iframes.getContext());
          else {
            if (!(null === (o = nr().gapi) || void 0 === o ? void 0 : o.load)) {
              const t = Fe('iframefcb');
              return (
                (nr()[t] = () => {
                  gapi.load ? s() : n(b(e, 'network-request-failed'));
                }),
                Me(`https://apis.google.com/js/api.js?onload=${t}`).catch(e => n(e))
              );
            }
            s();
          }
        }).catch(e => {
          throw ((Mi = null), e);
        });
      }
      let Mi = null;
      function Fi(e) {
        return (Mi = Mi || ji(e)), Mi;
      }
      /**
       * @license
       * Copyright 2020 Google LLC.
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Ui = new R(5e3, 15e3),
        Vi = '__/auth/iframe',
        Bi = 'emulator/auth/iframe',
        $i = { style: { position: 'absolute', top: '-100px', width: '1px', height: '1px' }, 'aria-hidden': 'true', tabindex: '-1' },
        qi = new Map([
          ['identitytoolkit.googleapis.com', 'p'],
          ['staging-identitytoolkit.sandbox.googleapis.com', 's'],
          ['test-identitytoolkit.sandbox.googleapis.com', 't']
        ]);
      function zi(e) {
        const t = e.config;
        S(t.authDomain, e, 'auth-domain-config-required');
        const n = t.emulator ? P(t, Bi) : `https://${e.config.authDomain}/${Vi}`,
          r = { apiKey: t.apiKey, appName: e.name, v: o.SDK_VERSION },
          s = qi.get(e.config.apiHost);
        s && (r.eid = s);
        const a = e._getFrameworks();
        return a.length && (r.fw = a.join(',')), `${n}?${(0, i.xO)(r).slice(1)}`;
      }
      async function Gi(e) {
        const t = await Fi(e),
          n = nr().gapi;
        return (
          S(n, e, 'internal-error'),
          t.open(
            { where: document.body, url: zi(e), messageHandlersFilter: n.iframes.CROSS_ORIGIN_IFRAMES_FILTER, attributes: $i, dontclear: !0 },
            t =>
              new Promise(async (n, r) => {
                await t.restyle({ setHideOnLeave: !1 });
                const i = b(e, 'network-request-failed'),
                  o = nr().setTimeout(() => {
                    r(i);
                  }, Ui.get());
                function s() {
                  nr().clearTimeout(o), n(t);
                }
                t.ping(s).then(s, () => {
                  r(i);
                });
              })
          )
        );
      }
      /**
       * @license
       * Copyright 2020 Google LLC.
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Wi = { location: 'yes', resizable: 'yes', statusbar: 'yes', toolbar: 'no' },
        Hi = 500,
        Ki = 600,
        Qi = '_blank',
        Yi = 'http://localhost';
      class Xi {
        constructor(e) {
          (this.window = e), (this.associatedEvent = null);
        }
        close() {
          if (this.window)
            try {
              this.window.close();
            } catch (e) {}
        }
      }
      function Ji(e, t, n, r = Hi, o = Ki) {
        const s = Math.max((window.screen.availHeight - o) / 2, 0).toString(),
          a = Math.max((window.screen.availWidth - r) / 2, 0).toString();
        let u = '';
        const c = Object.assign(Object.assign({}, Wi), { width: r.toString(), height: o.toString(), top: s, left: a }),
          l = (0, i.z$)().toLowerCase();
        n && (u = we(l) ? Qi : n), ve(l) && ((t = t || Yi), (c.scrollbars = 'yes'));
        const h = Object.entries(c).reduce((e, [t, n]) => `${e}${t}=${n},`, '');
        if (Ae(l) && '_self' !== u) return Zi(t || '', u), new Xi(null);
        const f = window.open(t || '', u, h);
        S(f, e, 'popup-blocked');
        try {
          f.focus();
        } catch (d) {}
        return new Xi(f);
      }
      function Zi(e, t) {
        const n = document.createElement('a');
        (n.href = e), (n.target = t);
        const r = document.createEvent('MouseEvent');
        r.initMouseEvent('click', !0, !0, window, 1, 0, 0, 0, 0, !1, !1, !1, !1, 1, null), n.dispatchEvent(r);
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const eo = '__/auth/handler',
        to = 'emulator/auth/handler',
        no = encodeURIComponent('fac');
      async function ro(e, t, n, r, s, a) {
        S(e.config.authDomain, e, 'auth-domain-config-required'), S(e.config.apiKey, e, 'invalid-api-key');
        const u = { apiKey: e.config.apiKey, appName: e.name, authType: n, redirectUrl: r, v: o.SDK_VERSION, eventId: s };
        if (t instanceof At) {
          t.setDefaultLanguage(e.languageCode),
            (u.providerId = t.providerId || ''),
            (0, i.xb)(t.getCustomParameters()) || (u.customParameters = JSON.stringify(t.getCustomParameters()));
          for (const [e, t] of Object.entries(a || {})) u[e] = t;
        }
        if (t instanceof xt) {
          const e = t.getScopes().filter(e => '' !== e);
          e.length > 0 && (u.scopes = e.join(','));
        }
        e.tenantId && (u.tid = e.tenantId);
        const c = u;
        for (const i of Object.keys(c)) void 0 === c[i] && delete c[i];
        const l = await e._getAppCheckToken(),
          h = l ? `#${no}=${encodeURIComponent(l)}` : '';
        return `${io(e)}?${(0, i.xO)(c).slice(1)}${h}`;
      }
      function io({ config: e }) {
        return e.emulator ? P(e, to) : `https://${e.authDomain}/${eo}`;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const oo = 'webStorageSupport';
      class so {
        constructor() {
          (this.eventManagers = {}),
            (this.iframes = {}),
            (this.originValidationPromises = {}),
            (this._redirectPersistence = Xn),
            (this._completeRedirectFn = Ii),
            (this._overrideRedirectResult = fi);
        }
        async _openPopup(e, t, n, r) {
          var i;
          A(null === (i = this.eventManagers[e._key()]) || void 0 === i ? void 0 : i.manager, '_initialize() not called before _openPopup()');
          const o = await ro(e, t, n, x(), r);
          return Ji(e, o, er());
        }
        async _openRedirect(e, t, n, r) {
          await this._originValidation(e);
          const i = await ro(e, t, n, x(), r);
          return rr(i), new Promise(() => {});
        }
        _initialize(e) {
          const t = e._key();
          if (this.eventManagers[t]) {
            const { manager: e, promise: n } = this.eventManagers[t];
            return e ? Promise.resolve(e) : (A(n, 'If manager is not set, promise should be'), n);
          }
          const n = this.initAndGetManager(e);
          return (
            (this.eventManagers[t] = { promise: n }),
            n.catch(() => {
              delete this.eventManagers[t];
            }),
            n
          );
        }
        async initAndGetManager(e) {
          const t = await Gi(e),
            n = new Ti(e);
          return (
            t.register(
              'authEvent',
              t => {
                S(null === t || void 0 === t ? void 0 : t.authEvent, e, 'invalid-auth-event');
                const r = n.onEvent(t.authEvent);
                return { status: r ? 'ACK' : 'ERROR' };
              },
              gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER
            ),
            (this.eventManagers[e._key()] = { manager: n }),
            (this.iframes[e._key()] = t),
            n
          );
        }
        _isIframeWebStorageSupported(e, t) {
          const n = this.iframes[e._key()];
          n.send(
            oo,
            { type: oo },
            n => {
              var r;
              const i = null === (r = null === n || void 0 === n ? void 0 : n[0]) || void 0 === r ? void 0 : r[oo];
              void 0 !== i && t(!!i), w(e, 'internal-error');
            },
            gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER
          );
        }
        _originValidation(e) {
          const t = e._key();
          return this.originValidationPromises[t] || (this.originValidationPromises[t] = Ri(e)), this.originValidationPromises[t];
        }
        get _shouldInitProactively() {
          return Ce() || ye() || Se();
        }
      }
      const ao = so;
      class uo {
        constructor(e) {
          this.factorId = e;
        }
        _process(e, t, n) {
          switch (t.type) {
            case 'enroll':
              return this._finalizeEnroll(e, t.credential, n);
            case 'signin':
              return this._finalizeSignIn(e, t.credential);
            default:
              return T('unexpected MultiFactorSessionType');
          }
        }
      }
      class co extends uo {
        constructor(e) {
          super('phone'), (this.credential = e);
        }
        static _fromCredential(e) {
          return new co(e);
        }
        _finalizeEnroll(e, t, n) {
          return jn(e, { idToken: t, displayName: n, phoneVerificationInfo: this.credential._makeVerificationRequest() });
        }
        _finalizeSignIn(e, t) {
          return Sr(e, { mfaPendingCredential: t, phoneVerificationInfo: this.credential._makeVerificationRequest() });
        }
      }
      class lo {
        constructor() {}
        static assertion(e) {
          return co._fromCredential(e);
        }
      }
