remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
          })(e, t) &&
          (function (e, t) {
            for (const n of e.filters) if (!n.matches(t)) return !1;
            return !0;
          })(e, t) &&
          (function (e, t) {
            return (
              !(
                e.startAt &&
                !(function (e, t, n) {
                  const r = ks(e, t, n);
                  return e.inclusive ? r <= 0 : r < 0;
                })(e.startAt, da(e), t)
              ) &&
              !(
                e.endAt &&
                !(function (e, t, n) {
                  const r = ks(e, t, n);
                  return e.inclusive ? r >= 0 : r > 0;
                })(e.endAt, da(e), t)
              )
            );
          })(e, t)
        );
      }
      function _a(e) {
        return e.collectionGroup || (e.path.length % 2 == 1 ? e.path.lastSegment() : e.path.get(e.path.length - 2));
      }
      function Ia(e) {
        return (t, n) => {
          let r = !1;
          for (const i of da(e)) {
            const e = Ea(i, t, n);
            if (0 !== e) return e;
            r = r || i.field.isKeyField();
          }
          return 0;
        };
      }
      function Ea(e, t, n) {
        const r = e.field.isKeyField()
          ? Ni.comparator(t.key, n.key)
          : (function (e, t, n) {
              const r = t.data.field(e),
                i = n.data.field(e);
              return null !== r && null !== i ? cs(r, i) : oi();
            })(e.field, t, n);
        switch (e.dir) {
          case 'asc':
            return r;
          case 'desc':
            return -1 * r;
          default:
            return oi();
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Sa {
        constructor(e, t) {
          (this.mapKeyFn = e), (this.equalsFn = t), (this.inner = {}), (this.innerSize = 0);
        }
        get(e) {
          const t = this.mapKeyFn(e),
            n = this.inner[t];
          if (void 0 !== n) for (const [r, i] of n) if (this.equalsFn(r, e)) return i;
        }
        has(e) {
          return void 0 !== this.get(e);
        }
        set(e, t) {
          const n = this.mapKeyFn(e),
            r = this.inner[n];
          if (void 0 === r) return (this.inner[n] = [[e, t]]), void this.innerSize++;
          for (let i = 0; i < r.length; i++) if (this.equalsFn(r[i][0], e)) return void (r[i] = [e, t]);
          r.push([e, t]), this.innerSize++;
        }
        delete(e) {
          const t = this.mapKeyFn(e),
            n = this.inner[t];
          if (void 0 === n) return !1;
          for (let r = 0; r < n.length; r++)
            if (this.equalsFn(n[r][0], e)) return 1 === n.length ? delete this.inner[t] : n.splice(r, 1), this.innerSize--, !0;
          return !1;
        }
        forEach(e) {
          Mo(this.inner, (t, n) => {
            for (const [r, i] of n) e(r, i);
          });
        }
        isEmpty() {
          return Fo(this.inner);
        }
        size() {
          return this.innerSize;
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Ta = new Uo(Ni.comparator);
      function Aa() {
        return Ta;
      }
      const xa = new Uo(Ni.comparator);
      function Ca(...e) {
        let t = xa;
        for (const n of e) t = t.insert(n.key, n);
        return t;
      }
      function ka(e) {
        let t = xa;
        return e.forEach((e, n) => (t = t.insert(e, n.overlayedDocument))), t;
      }
      function Oa() {
        return Ra();
      }
      function Na() {
        return Ra();
      }
      function Ra() {
        return new Sa(
          e => e.toString(),
          (e, t) => e.isEqual(t)
        );
      }
      const Pa = new Uo(Ni.comparator),
        Da = new $o(Ni.comparator);
      function La(...e) {
        let t = Da;
        for (const n of e) t = t.add(n);
        return t;
      }
      const ja = new $o(Ii);
      function Ma() {
        return ja;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Fa(e, t) {
        if (e.useProto3Json) {
          if (isNaN(t)) return { doubleValue: 'NaN' };
          if (t === 1 / 0) return { doubleValue: 'Infinity' };
          if (t === -1 / 0) return { doubleValue: '-Infinity' };
        }
        return { doubleValue: io(t) ? '-0' : t };
      }
      function Ua(e) {
        return { integerValue: '' + e };
      }
      function Va(e, t) {
        return oo(t) ? Ua(t) : Fa(e, t);
      }
      /**
       * @license
       * Copyright 2018 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Ba {
        constructor() {
          this._ = void 0;
        }
      }
      function $a(e, t, n) {
        return e instanceof Ga
          ? (function (e, t) {
              const n = {
                fields: {
                  __type__: { stringValue: 'server_timestamp' },
                  __local_write_time__: { timestampValue: { seconds: e.seconds, nanos: e.nanoseconds } }
                }
              };
              return t && Zo(t) && (t = es(t)), t && (n.fields.__previous_value__ = t), { mapValue: n };
            })(n, t)
          : e instanceof Wa
            ? Ha(e, t)
            : e instanceof Ka
              ? Qa(e, t)
              : (function (e, t) {
                  const n = za(e, t),
                    r = Xa(n) + Xa(e.gt);
                  return ps(n) && ps(e.gt) ? Ua(r) : Fa(e.serializer, r);
                })(e, t);
      }
      function qa(e, t, n) {
        return e instanceof Wa ? Ha(e, t) : e instanceof Ka ? Qa(e, t) : n;
      }
      function za(e, t) {
        return e instanceof Ya
          ? ps((n = t)) ||
            (function (e) {
              return !!e && 'doubleValue' in e;
            })(n)
            ? t
            : { integerValue: 0 }
          : null;
        var n;
      }
      class Ga extends Ba {}
      class Wa extends Ba {
        constructor(e) {
          super(), (this.elements = e);
        }
      }
      function Ha(e, t) {
        const n = Ja(t);
        for (const r of e.elements) n.some(e => as(e, r)) || n.push(r);
        return { arrayValue: { values: n } };
      }
      class Ka extends Ba {
        constructor(e) {
          super(), (this.elements = e);
        }
      }
      function Qa(e, t) {
        let n = Ja(t);
        for (const r of e.elements) n = n.filter(e => !as(e, r));
        return { arrayValue: { values: n } };
      }
      class Ya extends Ba {
        constructor(e, t) {
          super(), (this.serializer = e), (this.gt = t);
        }
      }
      function Xa(e) {
        return Xo(e.integerValue || e.doubleValue);
      }
      function Ja(e) {
        return gs(e) && e.arrayValue.values ? e.arrayValue.values.slice() : [];
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Za {
        constructor(e, t) {
          (this.field = e), (this.transform = t);
        }
      }
      function eu(e, t) {
        return (
          e.field.isEqual(t.field) &&
          (function (e, t) {
            return (e instanceof Wa && t instanceof Wa) || (e instanceof Ka && t instanceof Ka)
              ? Ei(e.elements, t.elements, as)
              : e instanceof Ya && t instanceof Ya
                ? as(e.gt, t.gt)
                : e instanceof Ga && t instanceof Ga;
          })(e.transform, t.transform)
        );
      }
      class tu {
        constructor(e, t) {
          (this.version = e), (this.transformResults = t);
        }
      }
      class nu {
        constructor(e, t) {
          (this.updateTime = e), (this.exists = t);
        }
        static none() {
          return new nu();
        }
        static exists(e) {
          return new nu(void 0, e);
        }
        static updateTime(e) {
          return new nu(e);
        }
        get isNone() {
          return void 0 === this.updateTime && void 0 === this.exists;
        }
        isEqual(e) {
          return this.exists === e.exists && (this.updateTime ? !!e.updateTime && this.updateTime.isEqual(e.updateTime) : !e.updateTime);
        }
      }
      function ru(e, t) {
        return void 0 !== e.updateTime
          ? t.isFoundDocument() && t.version.isEqual(e.updateTime)
          : void 0 === e.exists || e.exists === t.isFoundDocument();
      }
      class iu {}
      function ou(e, t) {
        if (!e.hasLocalMutations || (t && 0 === t.fields.length)) return null;
        if (null === t) return e.isNoDocument() ? new gu(e.key, nu.none()) : new lu(e.key, e.data, nu.none());
        {
          const n = e.data,
            r = Ts.empty();
          let i = new $o(Oi.comparator);
          for (let e of t.fields)
            if (!i.has(e)) {
              let t = n.field(e);
              null === t && e.length > 1 && ((e = e.popLast()), (t = n.field(e))), null === t ? r.delete(e) : r.set(e, t), (i = i.add(e));
            }
          return new hu(e.key, r, new Go(i.toArray()), nu.none());
        }
      }
      function su(e, t, n) {
        e instanceof lu
          ? (function (e, t, n) {
              const r = e.value.clone(),
                i = du(e.fieldTransforms, t, n.transformResults);
              r.setAll(i), t.convertToFoundDocument(n.version, r).setHasCommittedMutations();
            })(e, t, n)
          : e instanceof hu
            ? (function (e, t, n) {
                if (!ru(e.precondition, t)) return void t.convertToUnknownDocument(n.version);
                const r = du(e.fieldTransforms, t, n.transformResults),
                  i = t.data;
                i.setAll(fu(e)), i.setAll(r), t.convertToFoundDocument(n.version, i).setHasCommittedMutations();
              })(e, t, n)
            : (function (e, t, n) {
                t.convertToNoDocument(n.version).setHasCommittedMutations();
              })(0, t, n);
      }
      function au(e, t, n, r) {
        return e instanceof lu
          ? (function (e, t, n, r) {
              if (!ru(e.precondition, t)) return n;
              const i = e.value.clone(),
                o = pu(e.fieldTransforms, r, t);
              return i.setAll(o), t.convertToFoundDocument(t.version, i).setHasLocalMutations(), null;
            })(e, t, n, r)
          : e instanceof hu
            ? (function (e, t, n, r) {
                if (!ru(e.precondition, t)) return n;
                const i = pu(e.fieldTransforms, r, t),
                  o = t.data;
                return (
                  o.setAll(fu(e)),
                  o.setAll(i),
                  t.convertToFoundDocument(t.version, o).setHasLocalMutations(),
                  null === n ? null : n.unionWith(e.fieldMask.fields).unionWith(e.fieldTransforms.map(e => e.field))
                );
              })(e, t, n, r)
            : (function (e, t, n) {
                return ru(e.precondition, t) ? (t.convertToNoDocument(t.version).setHasLocalMutations(), null) : n;
              })(e, t, n);
      }
      function uu(e, t) {
        let n = null;
