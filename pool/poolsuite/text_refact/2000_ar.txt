remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
            return !1;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function ki(e, t = {}) {
        return F(e, 'GET', '/v1/projects', t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Oi = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,
        Ni = /^https?/;
      async function Ri(e) {
        if (e.config.emulator) return;
        const { authorizedDomains: t } = await ki(e);
        for (const r of t)
          try {
            if (Pi(r)) return;
          } catch (n) {}
        w(e, 'unauthorized-domain');
      }
      function Pi(e) {
        const t = x(),
          { protocol: n, hostname: r } = new URL(t);
        if (e.startsWith('chrome-extension://')) {
          const i = new URL(e);
          return '' === i.hostname && '' === r
            ? 'chrome-extension:' === n && e.replace('chrome-extension://', '') === t.replace('chrome-extension://', '')
            : 'chrome-extension:' === n && i.hostname === r;
        }
        if (!Ni.test(n)) return !1;
        if (Oi.test(e)) return r === e;
        const i = e.replace(/\./g, '\\.'),
          o = new RegExp('^(.+\\.' + i + '|' + i + ')$', 'i');
        return o.test(r);
      }
      /**
       * @license
       * Copyright 2020 Google LLC.
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Di = new R(3e4, 6e4);
      function Li() {
        const e = nr().___jsl;
        if (null === e || void 0 === e ? void 0 : e.H)
          for (const t of Object.keys(e.H))
            if (((e.H[t].r = e.H[t].r || []), (e.H[t].L = e.H[t].L || []), (e.H[t].r = [...e.H[t].L]), e.CP))
              for (let n = 0; n < e.CP.length; n++) e.CP[n] = null;
      }
      function ji(e) {
        return new Promise((t, n) => {
          var r, i, o;
          function s() {
            Li(),
              gapi.load('gapi.iframes', {
                callback: () => {
                  t(gapi.iframes.getContext());
                },
                ontimeout: () => {
                  Li(), n(b(e, 'network-request-failed'));
                },
                timeout: Di.get()
              });
          }
          if (null === (i = null === (r = nr().gapi) || void 0 === r ? void 0 : r.iframes) || void 0 === i ? void 0 : i.Iframe)
            t(gapi.iframes.getContext());
          else {
            if (!(null === (o = nr().gapi) || void 0 === o ? void 0 : o.load)) {
              const t = Fe('iframefcb');
              return (
                (nr()[t] = () => {
                  gapi.load ? s() : n(b(e, 'network-request-failed'));
                }),
                Me(`https://apis.google.com/js/api.js?onload=${t}`).catch(e => n(e))
              );
            }
            s();
          }
        }).catch(e => {
          throw ((Mi = null), e);
        });
      }
      let Mi = null;
      function Fi(e) {
        return (Mi = Mi || ji(e)), Mi;
      }
      /**
       * @license
       * Copyright 2020 Google LLC.
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Ui = new R(5e3, 15e3),
        Vi = '__/auth/iframe',
        Bi = 'emulator/auth/iframe',
        $i = { style: { position: 'absolute', top: '-100px', width: '1px', height: '1px' }, 'aria-hidden': 'true', tabindex: '-1' },
        qi = new Map([
          ['identitytoolkit.googleapis.com', 'p'],
          ['staging-identitytoolkit.sandbox.googleapis.com', 's'],
          ['test-identitytoolkit.sandbox.googleapis.com', 't']
        ]);
      function zi(e) {
        const t = e.config;
        S(t.authDomain, e, 'auth-domain-config-required');
        const n = t.emulator ? P(t, Bi) : `https://${e.config.authDomain}/${Vi}`,
          r = { apiKey: t.apiKey, appName: e.name, v: o.SDK_VERSION },
          s = qi.get(e.config.apiHost);
        s && (r.eid = s);
        const a = e._getFrameworks();
        return a.length && (r.fw = a.join(',')), `${n}?${(0, i.xO)(r).slice(1)}`;
      }
      async function Gi(e) {
        const t = await Fi(e),
          n = nr().gapi;
        return (
          S(n, e, 'internal-error'),
          t.open(
            { where: document.body, url: zi(e), messageHandlersFilter: n.iframes.CROSS_ORIGIN_IFRAMES_FILTER, attributes: $i, dontclear: !0 },
            t =>
              new Promise(async (n, r) => {
                await t.restyle({ setHideOnLeave: !1 });
                const i = b(e, 'network-request-failed'),
                  o = nr().setTimeout(() => {
                    r(i);
                  }, Ui.get());
                function s() {
                  nr().clearTimeout(o), n(t);
                }
                t.ping(s).then(s, () => {
                  r(i);
                });
              })
          )
        );
      }
      /**
       * @license
       * Copyright 2020 Google LLC.
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Wi = { location: 'yes', resizable: 'yes', statusbar: 'yes', toolbar: 'no' },
        Hi = 500,
        Ki = 600,
        Qi = '_blank',
        Yi = 'http://localhost';
      class Xi {
        constructor(e) {
          (this.window = e), (this.associatedEvent = null);
        }
        close() {
          if (this.window)
            try {
              this.window.close();
            } catch (e) {}
        }
      }
      function Ji(e, t, n, r = Hi, o = Ki) {
        const s = Math.max((window.screen.availHeight - o) / 2, 0).toString(),
          a = Math.max((window.screen.availWidth - r) / 2, 0).toString();
        let u = '';
        const c = Object.assign(Object.assign({}, Wi), { width: r.toString(), height: o.toString(), top: s, left: a }),
          l = (0, i.z$)().toLowerCase();
        n && (u = we(l) ? Qi : n), ve(l) && ((t = t || Yi), (c.scrollbars = 'yes'));
        const h = Object.entries(c).reduce((e, [t, n]) => `${e}${t}=${n},`, '');
        if (Ae(l) && '_self' !== u) return Zi(t || '', u), new Xi(null);
        const f = window.open(t || '', u, h);
        S(f, e, 'popup-blocked');
        try {
          f.focus();
        } catch (d) {}
        return new Xi(f);
      }
      function Zi(e, t) {
        const n = document.createElement('a');
        (n.href = e), (n.target = t);
        const r = document.createEvent('MouseEvent');
        r.initMouseEvent('click', !0, !0, window, 1, 0, 0, 0, 0, !1, !1, !1, !1, 1, null), n.dispatchEvent(r);
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const eo = '__/auth/handler',
        to = 'emulator/auth/handler',
        no = encodeURIComponent('fac');
      async function ro(e, t, n, r, s, a) {
        S(e.config.authDomain, e, 'auth-domain-config-required'), S(e.config.apiKey, e, 'invalid-api-key');
        const u = { apiKey: e.config.apiKey, appName: e.name, authType: n, redirectUrl: r, v: o.SDK_VERSION, eventId: s };
        if (t instanceof At) {
          t.setDefaultLanguage(e.languageCode),
            (u.providerId = t.providerId || ''),
            (0, i.xb)(t.getCustomParameters()) || (u.customParameters = JSON.stringify(t.getCustomParameters()));
          for (const [e, t] of Object.entries(a || {})) u[e] = t;
        }
        if (t instanceof xt) {
          const e = t.getScopes().filter(e => '' !== e);
          e.length > 0 && (u.scopes = e.join(','));
        }
        e.tenantId && (u.tid = e.tenantId);
        const c = u;
        for (const i of Object.keys(c)) void 0 === c[i] && delete c[i];
        const l = await e._getAppCheckToken(),
          h = l ? `#${no}=${encodeURIComponent(l)}` : '';
        return `${io(e)}?${(0, i.xO)(c).slice(1)}${h}`;
      }
      function io({ config: e }) {
        return e.emulator ? P(e, to) : `https://${e.authDomain}/${eo}`;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const oo = 'webStorageSupport';
      class so {
        constructor() {
          (this.eventManagers = {}),
            (this.iframes = {}),
            (this.originValidationPromises = {}),
            (this._redirectPersistence = Xn),
            (this._completeRedirectFn = Ii),
            (this._overrideRedirectResult = fi);
        }
        async _openPopup(e, t, n, r) {
          var i;
          A(null === (i = this.eventManagers[e._key()]) || void 0 === i ? void 0 : i.manager, '_initialize() not called before _openPopup()');
          const o = await ro(e, t, n, x(), r);
          return Ji(e, o, er());
        }
        async _openRedirect(e, t, n, r) {
          await this._originValidation(e);
          const i = await ro(e, t, n, x(), r);
          return rr(i), new Promise(() => {});
        }
        _initialize(e) {
          const t = e._key();
          if (this.eventManagers[t]) {
            const { manager: e, promise: n } = this.eventManagers[t];
            return e ? Promise.resolve(e) : (A(n, 'If manager is not set, promise should be'), n);
          }
          const n = this.initAndGetManager(e);
          return (
            (this.eventManagers[t] = { promise: n }),
            n.catch(() => {
              delete this.eventManagers[t];
            }),
            n
          );
        }
        async initAndGetManager(e) {
          const t = await Gi(e),
            n = new Ti(e);
          return (
            t.register(
              'authEvent',
              t => {
                S(null === t || void 0 === t ? void 0 : t.authEvent, e, 'invalid-auth-event');
                const r = n.onEvent(t.authEvent);
                return { status: r ? 'ACK' : 'ERROR' };
              },
              gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER
            ),
            (this.eventManagers[e._key()] = { manager: n }),
            (this.iframes[e._key()] = t),
            n
          );
        }
        _isIframeWebStorageSupported(e, t) {
          const n = this.iframes[e._key()];
          n.send(
            oo,
            { type: oo },
            n => {
              var r;
              const i = null === (r = null === n || void 0 === n ? void 0 : n[0]) || void 0 === r ? void 0 : r[oo];
              void 0 !== i && t(!!i), w(e, 'internal-error');
            },
            gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER
          );
        }
        _originValidation(e) {
          const t = e._key();
          return this.originValidationPromises[t] || (this.originValidationPromises[t] = Ri(e)), this.originValidationPromises[t];
        }
        get _shouldInitProactively() {
          return Ce() || ye() || Se();
        }
      }
      const ao = so;
      class uo {
        constructor(e) {
          this.factorId = e;
        }
        _process(e, t, n) {
          switch (t.type) {
            case 'enroll':
              return this._finalizeEnroll(e, t.credential, n);
            case 'signin':
              return this._finalizeSignIn(e, t.credential);
            default:
              return T('unexpected MultiFactorSessionType');
          }
        }
      }
      class co extends uo {
        constructor(e) {
          super('phone'), (this.credential = e);
        }
        static _fromCredential(e) {
          return new co(e);
        }
        _finalizeEnroll(e, t, n) {
          return jn(e, { idToken: t, displayName: n, phoneVerificationInfo: this.credential._makeVerificationRequest() });
        }
        _finalizeSignIn(e, t) {
          return Sr(e, { mfaPendingCredential: t, phoneVerificationInfo: this.credential._makeVerificationRequest() });
        }
      }
      class lo {
        constructor() {}
        static assertion(e) {
          return co._fromCredential(e);
        }
      }
      lo.FACTOR_ID = 'phone';
      class ho {
        static assertionForEnrollment(e, t) {
          return fo._fromSecret(e, t);
        }
        static assertionForSignIn(e, t) {
          return fo._fromEnrollmentId(e, t);
        }
        static async generateSecret(e) {
          const t = e;
          S('undefined' !== typeof t.auth, 'internal-error');
          const n = await Mn(t.auth, { idToken: t.credential, totpEnrollmentInfo: {} });
          return po._fromStartTotpMfaEnrollmentResponse(n, t.auth);
        }
      }
      ho.FACTOR_ID = 'totp';
      class fo extends uo {
        constructor(e, t, n) {
          super('totp'), (this.otp = e), (this.enrollmentId = t), (this.secret = n);
        }
        static _fromSecret(e, t) {
          return new fo(t, void 0, e);
        }
        static _fromEnrollmentId(e, t) {
          return new fo(t, e);
        }
        async _finalizeEnroll(e, t, n) {
          return (
            S('undefined' !== typeof this.secret, e, 'argument-error'),
            Fn(e, { idToken: t, displayName: n, totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp) })
          );
        }
        async _finalizeSignIn(e, t) {
          S(void 0 !== this.enrollmentId && void 0 !== this.otp, e, 'argument-error');
          const n = { verificationCode: this.otp };
          return Tr(e, { mfaPendingCredential: t, mfaEnrollmentId: this.enrollmentId, totpVerificationInfo: n });
        }
      }
      class po {
        constructor(e, t, n, r, i, o, s) {
          (this.sessionInfo = o),
            (this.auth = s),
            (this.secretKey = e),
            (this.hashingAlgorithm = t),
            (this.codeLength = n),
            (this.codeIntervalSeconds = r),
            (this.enrollmentCompletionDeadline = i);
        }
        static _fromStartTotpMfaEnrollmentResponse(e, t) {
          return new po(
            e.totpSessionInfo.sharedSecretKey,
            e.totpSessionInfo.hashingAlgorithm,
            e.totpSessionInfo.verificationCodeLength,
            e.totpSessionInfo.periodSec,
            new Date(e.totpSessionInfo.finalizeEnrollmentTime).toUTCString(),
            e.totpSessionInfo.sessionInfo,
            t
          );
        }
        _makeTotpVerificationInfo(e) {
          return { sessionInfo: this.sessionInfo, verificationCode: e };
        }
        generateQrCodeUrl(e, t) {
          var n;
          let r = !1;
          return (
            (go(e) || go(t)) && (r = !0),
            r &&
              (go(e) && (e = (null === (n = this.auth.currentUser) || void 0 === n ? void 0 : n.email) || 'unknownuser'),
              go(t) && (t = this.auth.name)),
            `otpauth://totp/${t}:${e}?secret=${this.secretKey}&issuer=${t}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`
          );
        }
      }
      function go(e) {
        return 'undefined' === typeof e || 0 === (null === e || void 0 === e ? void 0 : e.length);
      }
      var mo = '@firebase/auth',
        vo = '0.23.2';
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class yo {
        constructor(e) {
          (this.auth = e), (this.internalListeners = new Map());
        }
        getUid() {
          var e;
          return this.assertAuthConfigured(), (null === (e = this.auth.currentUser) || void 0 === e ? void 0 : e.uid) || null;
        }
        async getToken(e) {
          if ((this.assertAuthConfigured(), await this.auth._initializationPromise, !this.auth.currentUser)) return null;
          const t = await this.auth.currentUser.getIdToken(e);
          return { accessToken: t };
        }
        addAuthTokenListener(e) {
          if ((this.assertAuthConfigured(), this.internalListeners.has(e))) return;
          const t = this.auth.onIdTokenChanged(t => {
            e((null === t || void 0 === t ? void 0 : t.stsTokenManager.accessToken) || null);
          });
          this.internalListeners.set(e, t), this.updateProactiveRefresh();
        }
        removeAuthTokenListener(e) {
          this.assertAuthConfigured();
          const t = this.internalListeners.get(e);
          t && (this.internalListeners.delete(e), t(), this.updateProactiveRefresh());
        }
        assertAuthConfigured() {
          S(this.auth._initializationPromise, 'dependent-sdk-initialized-before-auth');
        }
        updateProactiveRefresh() {
          this.internalListeners.size > 0 ? this.auth._startProactiveRefresh() : this.auth._stopProactiveRefresh();
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function wo(e) {
        switch (e) {
          case 'Node':
            return 'node';
          case 'ReactNative':
            return 'rn';
          case 'Worker':
            return 'webworker';
          case 'Cordova':
            return 'cordova';
          default:
            return;
        }
      }
      function bo(e) {
        (0, o._registerComponent)(
          new u.wA(
            'auth',
            (t, { options: n }) => {
              const r = t.getProvider('app').getImmediate(),
                i = t.getProvider('heartbeat'),
                o = t.getProvider('app-check-internal'),
                { apiKey: s, authDomain: a } = r.options;
              S(s && !s.includes(':'), 'invalid-api-key', { appName: r.name });
              const u = {
                  apiKey: s,
                  authDomain: a,
                  clientPlatform: e,
                  apiHost: 'identitytoolkit.googleapis.com',
                  tokenApiHost: 'securetoken.googleapis.com',
                  apiScheme: 'https',
                  sdkClientVersion: Oe(e)
                },
                c = new Ge(r, i, o, u);
              return Ke(c, n), c;
            },
            'PUBLIC'
          )
            .setInstantiationMode('EXPLICIT')
            .setInstanceCreatedCallback((e, t, n) => {
              const r = e.getProvider('auth-internal');
              r.initialize();
            })
        ),
          (0, o._registerComponent)(
            new u.wA(
              'auth-internal',
              e => {
                const t = We(e.getProvider('auth').getImmediate());
                return (e => new yo(e))(t);
              },
              'PRIVATE'
            ).setInstantiationMode('EXPLICIT')
          ),
          (0, o.registerVersion)(mo, vo, wo(e)),
          (0, o.registerVersion)(mo, vo, 'esm2017');
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const _o = 300;
      (0, i.Pz)('authIdTokenMaxAge');
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function Io() {
        return window;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ bo('Browser');
      const Eo = 2e3;
      async function So(e, t, n) {
        var r;
        const { BuildInfo: i } = Io();
        A(t.sessionId, 'AuthEvent did not contain a session ID');
        const o = await ko(t.sessionId),
          s = {};
        return (
          Se() ? (s['ibi'] = i.packageName) : _e() ? (s['apn'] = i.packageName) : w(e, 'operation-not-supported-in-this-environment'),
          i.displayName && (s['appDisplayName'] = i.displayName),
          (s['sessionId'] = o),
          ro(e, n, t.type, void 0, null !== (r = t.eventId) && void 0 !== r ? r : void 0, s)
        );
      }
      async function To(e) {
        const { BuildInfo: t } = Io(),
          n = {};
        Se() ? (n.iosBundleId = t.packageName) : _e() ? (n.androidPackageName = t.packageName) : w(e, 'operation-not-supported-in-this-environment'),
          await ki(e, n);
      }
      function Ao(e) {
        const { cordova: t } = Io();
        return new Promise(n => {
          t.plugins.browsertab.isAvailable(r => {
            let i = null;
            r ? t.plugins.browsertab.openUrl(e) : (i = t.InAppBrowser.open(e, Te() ? '_blank' : '_system', 'location=yes')), n(i);
          });
        });
      }
      async function xo(e, t, n) {
        const { cordova: r } = Io();
        let i = () => {};
        try {
          await new Promise((o, s) => {
            let a = null;
            function u() {
              var e;
              o();
              const t = null === (e = r.plugins.browsertab) || void 0 === e ? void 0 : e.close;
              'function' === typeof t && t(), 'function' === typeof (null === n || void 0 === n ? void 0 : n.close) && n.close();
            }
            function c() {
              a ||
                (a = window.setTimeout(() => {
                  s(b(e, 'redirect-cancelled-by-user'));
                }, Eo));
            }
            function l() {
              'visible' === (null === document || void 0 === document ? void 0 : document.visibilityState) && c();
            }
            t.addPassiveListener(u),
              document.addEventListener('resume', c, !1),
              _e() && document.addEventListener('visibilitychange', l, !1),
              (i = () => {
                t.removePassiveListener(u),
                  document.removeEventListener('resume', c, !1),
                  document.removeEventListener('visibilitychange', l, !1),
                  a && window.clearTimeout(a);
              });
          });
        } finally {
          i();
        }
      }
      function Co(e) {
        var t, n, r, i, o, s, a, u, c, l;
        const h = Io();
        S(
          'function' === typeof (null === (t = null === h || void 0 === h ? void 0 : h.universalLinks) || void 0 === t ? void 0 : t.subscribe),
          e,
          'invalid-cordova-configuration',
          { missingPlugin: 'cordova-universal-links-plugin-fix' }
        ),
          S(
            'undefined' !== typeof (null === (n = null === h || void 0 === h ? void 0 : h.BuildInfo) || void 0 === n ? void 0 : n.packageName),
            e,
            'invalid-cordova-configuration',
            { missingPlugin: 'cordova-plugin-buildInfo' }
          ),
          S(
            'function' ===
              typeof (null ===
                (o =
                  null === (i = null === (r = null === h || void 0 === h ? void 0 : h.cordova) || void 0 === r ? void 0 : r.plugins) || void 0 === i
                    ? void 0
                    : i.browsertab) || void 0 === o
                ? void 0
                : o.openUrl),
            e,
            'invalid-cordova-configuration',
            { missingPlugin: 'cordova-plugin-browsertab' }
          ),
          S(
            'function' ===
              typeof (null ===
                (u =
                  null === (a = null === (s = null === h || void 0 === h ? void 0 : h.cordova) || void 0 === s ? void 0 : s.plugins) || void 0 === a
                    ? void 0
                    : a.browsertab) || void 0 === u
                ? void 0
                : u.isAvailable),
            e,
            'invalid-cordova-configuration',
            { missingPlugin: 'cordova-plugin-browsertab' }
          ),
          S(
            'function' ===
              typeof (null === (l = null === (c = null === h || void 0 === h ? void 0 : h.cordova) || void 0 === c ? void 0 : c.InAppBrowser) ||
              void 0 === l
                ? void 0
                : l.open),
            e,
            'invalid-cordova-configuration',
            { missingPlugin: 'cordova-plugin-inappbrowser' }
          );
      }
      async function ko(e) {
        const t = Oo(e),
          n = await crypto.subtle.digest('SHA-256', t),
          r = Array.from(new Uint8Array(n));
        return r.map(e => e.toString(16).padStart(2, '0')).join('');
      }
      function Oo(e) {
        if ((A(/[0-9a-zA-Z]+/.test(e), 'Can only convert alpha-numeric strings'), 'undefined' !== typeof TextEncoder))
          return new TextEncoder().encode(e);
        const t = new ArrayBuffer(e.length),
          n = new Uint8Array(t);
        for (let r = 0; r < e.length; r++) n[r] = e.charCodeAt(r);
        return n;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const No = 20;
      class Ro extends Ti {
        constructor() {
          super(...arguments),
            (this.passiveListeners = new Set()),
            (this.initPromise = new Promise(e => {
              this.resolveInialized = e;
            }));
        }
        addPassiveListener(e) {
          this.passiveListeners.add(e);
        }
        removePassiveListener(e) {
          this.passiveListeners.delete(e);
        }
        resetRedirect() {
          (this.queuedRedirectEvent = null), (this.hasHandledPotentialRedirect = !1);
        }
        onEvent(e) {
          return this.resolveInialized(), this.passiveListeners.forEach(t => t(e)), super.onEvent(e);
        }
        async initialized() {
          await this.initPromise;
        }
      }
      function Po(e, t, n = null) {
        return { type: t, eventId: n, urlResponse: null, sessionId: Mo(), postBody: null, tenantId: e.tenantId, error: b(e, 'no-auth-event') };
      }
      function Do(e, t) {
        return Fo()._set(Uo(e), t);
      }
      async function Lo(e) {
        const t = await Fo()._get(Uo(e));
        return t && (await Fo()._remove(Uo(e))), t;
      }
      function jo(e, t) {
        var n, r;
        const i = Bo(t);
        if (i.includes('/__/auth/callback')) {
          const t = $o(i),
            o = t['firebaseError'] ? Vo(decodeURIComponent(t['firebaseError'])) : null,
            s =
              null === (r = null === (n = null === o || void 0 === o ? void 0 : o['code']) || void 0 === n ? void 0 : n.split('auth/')) ||
              void 0 === r
                ? void 0
                : r[1],
            a = s ? b(s) : null;
          return a
            ? { type: e.type, eventId: e.eventId, tenantId: e.tenantId, error: a, urlResponse: null, sessionId: null, postBody: null }
            : { type: e.type, eventId: e.eventId, tenantId: e.tenantId, sessionId: e.sessionId, urlResponse: i, postBody: null };
        }
        return null;
      }
      function Mo() {
        const e = [],
          t = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (let n = 0; n < No; n++) {
          const n = Math.floor(Math.random() * t.length);
          e.push(t.charAt(n));
        }
        return e.join('');
      }
      function Fo() {
        return he(Qn);
      }
      function Uo(e) {
        return pe('authEvent', e.config.apiKey, e.name);
      }
      function Vo(e) {
        try {
          return JSON.parse(e);
        } catch (t) {
          return null;
        }
      }
      function Bo(e) {
        const t = $o(e),
          n = t['link'] ? decodeURIComponent(t['link']) : void 0,
          r = $o(n)['link'],
          i = t['deep_link_id'] ? decodeURIComponent(t['deep_link_id']) : void 0,
          o = $o(i)['link'];
        return o || i || r || n || e;
      }
      function $o(e) {
        if (!(null === e || void 0 === e ? void 0 : e.includes('?'))) return {};
        const [t, ...n] = e.split('?');
        return (0, i.zd)(n.join('?'));
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const qo = 500;
      class zo {
        constructor() {
          (this._redirectPersistence = Xn),
            (this._shouldInitProactively = !0),
            (this.eventManagers = new Map()),
            (this.originValidationPromises = {}),
            (this._completeRedirectFn = Ii),
            (this._overrideRedirectResult = fi);
        }
        async _initialize(e) {
          const t = e._key();
          let n = this.eventManagers.get(t);
          return n || ((n = new Ro(e)), this.eventManagers.set(t, n), this.attachCallbackListeners(e, n)), n;
        }
        _openPopup(e) {
          w(e, 'operation-not-supported-in-this-environment');
        }
        async _openRedirect(e, t, n, r) {
          Co(e);
          const i = await this._initialize(e);
          await i.initialized(), i.resetRedirect(), hi(), await this._originValidation(e);
          const o = Po(e, n, r);
          await Do(e, o);
          const s = await So(e, o, t),
            a = await Ao(s);
          return xo(e, i, a);
        }
        _isIframeWebStorageSupported(e, t) {
          throw new Error('Method not implemented.');
        }
        _originValidation(e) {
          const t = e._key();
          return this.originValidationPromises[t] || (this.originValidationPromises[t] = To(e)), this.originValidationPromises[t];
        }
        attachCallbackListeners(e, t) {
          const { universalLinks: n, handleOpenURL: r, BuildInfo: i } = Io(),
            o = setTimeout(async () => {
              await Lo(e), t.onEvent(Wo());
            }, qo),
            s = async n => {
              clearTimeout(o);
              const r = await Lo(e);
              let i = null;
              r && (null === n || void 0 === n ? void 0 : n['url']) && (i = jo(r, n['url'])), t.onEvent(i || Wo());
            };
          'undefined' !== typeof n && 'function' === typeof n.subscribe && n.subscribe(null, s);
          const a = r,
            u = `${i.packageName.toLowerCase()}://`;
          Io().handleOpenURL = async e => {
            if ((e.toLowerCase().startsWith(u) && s({ url: e }), 'function' === typeof a))
              try {
                a(e);
              } catch (t) {
                console.error(t);
              }
          };
        }
      }
      const Go = zo;
      function Wo() {
        return { type: 'unknown', eventId: null, sessionId: null, urlResponse: null, postBody: null, tenantId: null, error: b('no-auth-event') };
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Ho(e, t) {
        We(e)._logFramework(t);
      }
      var Ko = '@firebase/auth-compat',
        Qo = '0.4.2';
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const Yo = 1e3;
      function Xo() {
        var e;
        return (null === (e = null === self || void 0 === self ? void 0 : self.location) || void 0 === e ? void 0 : e.protocol) || null;
      }
      function Jo() {
        return 'http:' === Xo() || 'https:' === Xo();
      }
      function Zo(e = (0, i.z$)()) {
        return !(('file:' !== Xo() && 'ionic:' !== Xo() && 'capacitor:' !== Xo()) || !e.toLowerCase().match(/iphone|ipad|ipod|android/));
      }
      function es() {
        return (0, i.b$)() || (0, i.UG)();
      }
      function ts() {
        return (0, i.w1)() && 11 === (null === document || void 0 === document ? void 0 : document.documentMode);
      }
      function ns(e = (0, i.z$)()) {
        return /Edge\/\d+/.test(e);
      }
      function rs(e = (0, i.z$)()) {
        return ts() || ns(e);
      }
      function is() {
        try {
          const e = self.localStorage,
            t = er();
          if (e) return e['setItem'](t, '1'), e['removeItem'](t), !rs() || (0, i.hl)();
        } catch (e) {
          return os() && (0, i.hl)();
        }
        return !1;
      }
      function os() {
        return 'undefined' !== typeof n.g && 'WorkerGlobalScope' in n.g && 'importScripts' in n.g;
      }
      function ss() {
        return (Jo() || (0, i.ru)() || Zo()) && !es() && is() && !os();
      }
      function as() {
        return Zo() && 'undefined' !== typeof document;
      }
      async function us() {
        return (
          !!as() &&
          new Promise(e => {
            const t = setTimeout(() => {
              e(!1);
            }, Yo);
            document.addEventListener('deviceready', () => {
              clearTimeout(t), e(!0);
            });
          })
        );
      }
      function cs() {
        return 'undefined' !== typeof window ? window : null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ls = { LOCAL: 'local', NONE: 'none', SESSION: 'session' },
        hs = S,
        fs = 'persistence';
      function ds(e, t) {
        hs(Object.values(ls).includes(t), e, 'invalid-persistence-type'),
          (0, i.b$)()
            ? hs(t !== ls.SESSION, e, 'unsupported-persistence-type')
            : (0, i.UG)()
              ? hs(t === ls.NONE, e, 'unsupported-persistence-type')
              : os()
                ? hs(t === ls.NONE || (t === ls.LOCAL && (0, i.hl)()), e, 'unsupported-persistence-type')
                : hs(t === ls.NONE || is(), e, 'unsupported-persistence-type');
      }
      async function ps(e) {
        await e._initializationPromise;
        const t = ms(),
          n = pe(fs, e.config.apiKey, e.name);
        t && t.setItem(n, e._getPersistence());
      }
      function gs(e, t) {
        const n = ms();
        if (!n) return [];
        const r = pe(fs, e, t),
          i = n.getItem(r);
        switch (i) {
          case ls.NONE:
            return [de];
          case ls.LOCAL:
            return [Ir, Xn];
          case ls.SESSION:
            return [Xn];
          default:
            return [];
        }
      }
      function ms() {
        var e;
        try {
          return (null === (e = cs()) || void 0 === e ? void 0 : e.sessionStorage) || null;
        } catch (t) {
          return null;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const vs = S;
      class ys {
        constructor() {
          (this.browserResolver = he(ao)),
            (this.cordovaResolver = he(Go)),
            (this.underlyingResolver = null),
            (this._redirectPersistence = Xn),
            (this._completeRedirectFn = Ii),
            (this._overrideRedirectResult = fi);
        }
        async _initialize(e) {
          return await this.selectUnderlyingResolver(), this.assertedUnderlyingResolver._initialize(e);
        }
        async _openPopup(e, t, n, r) {
          return await this.selectUnderlyingResolver(), this.assertedUnderlyingResolver._openPopup(e, t, n, r);
        }
        async _openRedirect(e, t, n, r) {
          return await this.selectUnderlyingResolver(), this.assertedUnderlyingResolver._openRedirect(e, t, n, r);
        }
        _isIframeWebStorageSupported(e, t) {
          this.assertedUnderlyingResolver._isIframeWebStorageSupported(e, t);
        }
        _originValidation(e) {
          return this.assertedUnderlyingResolver._originValidation(e);
        }
        get _shouldInitProactively() {
          return as() || this.browserResolver._shouldInitProactively;
        }
        get assertedUnderlyingResolver() {
          return vs(this.underlyingResolver, 'internal-error'), this.underlyingResolver;
        }
        async selectUnderlyingResolver() {
          if (this.underlyingResolver) return;
          const e = await us();
          this.underlyingResolver = e ? this.cordovaResolver : this.browserResolver;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function ws(e) {
        return e.unwrap();
      }
      function bs(e) {
        return e.wrapped();
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function _s(e) {
        return Es(e);
      }
      function Is(e, t) {
        var n;
        const r = null === (n = t.customData) || void 0 === n ? void 0 : n._tokenResponse;
        if ('auth/multi-factor-auth-required' === (null === t || void 0 === t ? void 0 : t.code)) {
          const n = t;
          n.resolver = new As(e, Dn(e, t));
        } else if (r) {
          const e = Es(t),
            n = t;
          e && ((n.credential = e), (n.tenantId = r.tenantId || void 0), (n.email = r.email || void 0), (n.phoneNumber = r.phoneNumber || void 0));
        }
      }
      function Es(e) {
        const { _tokenResponse: t } = e instanceof i.ZR ? e.customData : e;
        if (!t) return null;
        if (!(e instanceof i.ZR) && 'temporaryProof' in t && 'phoneNumber' in t) return Kr.credentialFromResult(e);
        const n = t.providerId;
        if (!n || n === c.PASSWORD) return null;
        let r;
        switch (n) {
          case c.GOOGLE:
            r = Ot;
            break;
          case c.FACEBOOK:
            r = kt;
            break;
          case c.GITHUB:
            r = Nt;
            break;
          case c.TWITTER:
            r = jt;
            break;
          default:
            const { oauthIdToken: e, oauthAccessToken: i, oauthTokenSecret: o, pendingToken: s, nonce: a } = t;
            return i || o || e || s
              ? s
                ? n.startsWith('saml.')
                  ? Pt._create(n, s)
                  : gt._fromParams({ providerId: n, signInMethod: n, pendingToken: s, idToken: e, accessToken: i })
                : new Ct(n).credential({ idToken: e, accessToken: i, rawNonce: a })
              : null;
        }
        return e instanceof i.ZR ? r.credentialFromError(e) : r.credentialFromResult(e);
      }
      function Ss(e, t) {
        return t
          .catch(t => {
            throw (t instanceof i.ZR && Is(e, t), t);
          })
          .then(e => {
            const t = e.operationType,
              n = e.user;
            return { operationType: t, credential: _s(e), additionalUserInfo: Nn(e), user: xs.getOrCreate(n) };
          });
      }
      async function Ts(e, t) {
        const n = await t;
        return { verificationId: n.verificationId, confirm: t => Ss(e, n.confirm(t)) };
      }
      class As {
        constructor(e, t) {
          (this.resolver = t), (this.auth = bs(e));
        }
        get session() {
          return this.resolver.session;
        }
        get hints() {
          return this.resolver.hints;
        }
        resolveSignIn(e) {
          return Ss(ws(this.auth), this.resolver.resolveSignIn(e));
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class xs {
        constructor(e) {
          (this._delegate = e), (this.multiFactor = $n(e));
        }
        static getOrCreate(e) {
          return xs.USER_MAP.has(e) || xs.USER_MAP.set(e, new xs(e)), xs.USER_MAP.get(e);
        }
        delete() {
          return this._delegate.delete();
        }
        reload() {
          return this._delegate.reload();
        }
        toJSON() {
          return this._delegate.toJSON();
        }
        getIdTokenResult(e) {
          return this._delegate.getIdTokenResult(e);
        }
        getIdToken(e) {
          return this._delegate.getIdToken(e);
        }
        linkAndRetrieveDataWithCredential(e) {
          return this.linkWithCredential(e);
        }
        async linkWithCredential(e) {
          return Ss(this.auth, Yt(this._delegate, e));
        }
        async linkWithPhoneNumber(e, t) {
          return Ts(this.auth, zr(this._delegate, e, t));
        }
        async linkWithPopup(e) {
          return Ss(this.auth, ii(this._delegate, e, ys));
        }
        async linkWithRedirect(e) {
          return await ps(We(this.auth)), wi(this._delegate, e, ys);
        }
        reauthenticateAndRetrieveDataWithCredential(e) {
          return this.reauthenticateWithCredential(e);
        }
        async reauthenticateWithCredential(e) {
          return Ss(this.auth, Xt(this._delegate, e));
        }
        reauthenticateWithPhoneNumber(e, t) {
          return Ts(this.auth, Gr(this._delegate, e, t));
        }
        reauthenticateWithPopup(e) {
          return Ss(this.auth, ri(this._delegate, e, ys));
        }
        async reauthenticateWithRedirect(e) {
          return await ps(We(this.auth)), vi(this._delegate, e, ys);
        }
        sendEmailVerification(e) {
          return vn(this._delegate, e);
        }
        async unlink(e) {
          return await zt(this._delegate, e), this;
        }
        updateEmail(e) {
          return _n(this._delegate, e);
        }
        updatePassword(e) {
          return In(this._delegate, e);
        }
        updatePhoneNumber(e) {
          return Hr(this._delegate, e);
        }
        updateProfile(e) {
          return bn(this._delegate, e);
        }
        verifyBeforeUpdateEmail(e, t) {
          return yn(this._delegate, e, t);
        }
        get emailVerified() {
          return this._delegate.emailVerified;
        }
        get isAnonymous() {
          return this._delegate.isAnonymous;
        }
        get metadata() {
          return this._delegate.metadata;
        }
        get phoneNumber() {
          return this._delegate.phoneNumber;
        }
        get providerData() {
          return this._delegate.providerData;
        }
        get refreshToken() {
          return this._delegate.refreshToken;
        }
        get tenantId() {
          return this._delegate.tenantId;
        }
        get displayName() {
          return this._delegate.displayName;
        }
        get email() {
          return this._delegate.email;
        }
        get photoURL() {
          return this._delegate.photoURL;
        }
        get providerId() {
          return this._delegate.providerId;
        }
        get uid() {
          return this._delegate.uid;
        }
        get auth() {
          return this._delegate.auth;
        }
      }
      xs.USER_MAP = new WeakMap();
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const Cs = S;
      class ks {
        constructor(e, t) {
          if (((this.app = e), t.isInitialized())) return (this._delegate = t.getImmediate()), void this.linkUnderlyingAuth();
          const { apiKey: n } = e.options;
          Cs(n, 'invalid-api-key', { appName: e.name }), Cs(n, 'invalid-api-key', { appName: e.name });
          const r = 'undefined' !== typeof window ? ys : void 0;
          (this._delegate = t.initialize({ options: { persistence: Ns(n, e.name), popupRedirectResolver: r } })),
            this._delegate._updateErrorMap(d),
            this.linkUnderlyingAuth();
        }
        get emulatorConfig() {
          return this._delegate.emulatorConfig;
        }
        get currentUser() {
          return this._delegate.currentUser ? xs.getOrCreate(this._delegate.currentUser) : null;
        }
        get languageCode() {
          return this._delegate.languageCode;
        }
        set languageCode(e) {
          this._delegate.languageCode = e;
        }
        get settings() {
          return this._delegate.settings;
        }
        get tenantId() {
          return this._delegate.tenantId;
        }
        set tenantId(e) {
          this._delegate.tenantId = e;
        }
        useDeviceLanguage() {
          this._delegate.useDeviceLanguage();
        }
        signOut() {
          return this._delegate.signOut();
        }
        useEmulator(e, t) {
          Qe(this._delegate, e, t);
        }
        applyActionCode(e) {
          return an(this._delegate, e);
        }
        checkActionCode(e) {
          return un(this._delegate, e);
        }
        confirmPasswordReset(e, t) {
          return sn(this._delegate, e, t);
        }
        async createUserWithEmailAndPassword(e, t) {
          return Ss(this._delegate, ln(this._delegate, e, t));
        }
        fetchProvidersForEmail(e) {
          return this.fetchSignInMethodsForEmail(e);
        }
        fetchSignInMethodsForEmail(e) {
          return mn(this._delegate, e);
        }
        isSignInWithEmailLink(e) {
          return dn(this._delegate, e);
        }
        async getRedirectResult() {
          Cs(ss(), this._delegate, 'operation-not-supported-in-this-environment');
          const e = await _i(this._delegate, ys);
          return e ? Ss(this._delegate, Promise.resolve(e)) : { credential: null, user: null };
        }
        addFrameworkForLogging(e) {
          Ho(this._delegate, e);
        }
        onAuthStateChanged(e, t, n) {
          const { next: r, error: i, complete: o } = Os(e, t, n);
          return this._delegate.onAuthStateChanged(r, i, o);
        }
        onIdTokenChanged(e, t, n) {
          const { next: r, error: i, complete: o } = Os(e, t, n);
          return this._delegate.onIdTokenChanged(r, i, o);
        }
        sendSignInLinkToEmail(e, t) {
          return fn(this._delegate, e, t);
        }
        sendPasswordResetEmail(e, t) {
          return on(this._delegate, e, t || void 0);
        }
        async setPersistence(e) {
          let t;
          switch ((ds(this._delegate, e), e)) {
            case ls.SESSION:
              t = Xn;
              break;
            case ls.LOCAL:
              const e = await he(Ir)._isAvailable();
              t = e ? Ir : Qn;
              break;
            case ls.NONE:
              t = de;
              break;
            default:
              return w('argument-error', { appName: this._delegate.name });
          }
          return this._delegate.setPersistence(t);
        }
        signInAndRetrieveDataWithCredential(e) {
          return this.signInWithCredential(e);
        }
        signInAnonymously() {
          return Ss(this._delegate, Vt(this._delegate));
        }
        signInWithCredential(e) {
          return Ss(this._delegate, Qt(this._delegate, e));
        }
        signInWithCustomToken(e) {
          return Ss(this._delegate, Zt(this._delegate, e));
        }
        signInWithEmailAndPassword(e, t) {
          return Ss(this._delegate, hn(this._delegate, e, t));
        }
        signInWithEmailLink(e, t) {
          return Ss(this._delegate, pn(this._delegate, e, t));
        }
        signInWithPhoneNumber(e, t) {
          return Ts(this._delegate, qr(this._delegate, e, t));
        }
        async signInWithPopup(e) {
          return Cs(ss(), this._delegate, 'operation-not-supported-in-this-environment'), Ss(this._delegate, ni(this._delegate, e, ys));
        }
        async signInWithRedirect(e) {
          return Cs(ss(), this._delegate, 'operation-not-supported-in-this-environment'), await ps(this._delegate), gi(this._delegate, e, ys);
        }
        updateCurrentUser(e) {
          return this._delegate.updateCurrentUser(e);
        }
        verifyPasswordResetCode(e) {
          return cn(this._delegate, e);
        }
        unwrap() {
          return this._delegate;
        }
        _delete() {
          return this._delegate._delete();
        }
        linkUnderlyingAuth() {
          this._delegate.wrapped = () => this;
        }
      }
      function Os(e, t, n) {
        let r = e;
        'function' !== typeof e && ({ next: r, error: t, complete: n } = e);
        const i = r,
          o = e => i(e && xs.getOrCreate(e));
        return { next: o, error: t, complete: n };
      }
      function Ns(e, t) {
        const n = gs(e, t);
        if (('undefined' === typeof self || n.includes(Ir) || n.push(Ir), 'undefined' !== typeof window))
          for (const r of [Qn, Xn]) n.includes(r) || n.push(r);
        return n.includes(de) || n.push(de), n;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ ks.Persistence = ls;
      class Rs {
        constructor() {
          (this.providerId = 'phone'), (this._delegate = new Kr(ws(r.Z.auth())));
        }
        static credential(e, t) {
          return Kr.credential(e, t);
        }
        verifyPhoneNumber(e, t) {
          return this._delegate.verifyPhoneNumber(e, t);
        }
        unwrap() {
          return this._delegate;
        }
      }
      (Rs.PHONE_SIGN_IN_METHOD = Kr.PHONE_SIGN_IN_METHOD), (Rs.PROVIDER_ID = Kr.PROVIDER_ID);
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const Ps = S;
      class Ds {
        constructor(e, t, n = r.Z.app()) {
          var i;
          Ps(null === (i = n.options) || void 0 === i ? void 0 : i.apiKey, 'invalid-api-key', { appName: n.name }),
            (this._delegate = new Vr(e, t, n.auth())),
            (this.type = this._delegate.type);
        }
        clear() {
          this._delegate.clear();
        }
        render() {
          return this._delegate.render();
        }
        verify() {
          return this._delegate.verify();
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Ls = 'auth-compat';
      function js(e) {
        e.INTERNAL.registerComponent(
          new u.wA(
            Ls,
            e => {
              const t = e.getProvider('app-compat').getImmediate(),
                n = e.getProvider('auth');
              return new ks(t, n);
            },
            'PUBLIC'
          )
            .setServiceProps({
              ActionCodeInfo: {
                Operation: {
                  EMAIL_SIGNIN: l.EMAIL_SIGNIN,
                  PASSWORD_RESET: l.PASSWORD_RESET,
                  RECOVER_EMAIL: l.RECOVER_EMAIL,
                  REVERT_SECOND_FACTOR_ADDITION: l.REVERT_SECOND_FACTOR_ADDITION,
                  VERIFY_AND_CHANGE_EMAIL: l.VERIFY_AND_CHANGE_EMAIL,
                  VERIFY_EMAIL: l.VERIFY_EMAIL
                }
              },
              EmailAuthProvider: Tt,
              FacebookAuthProvider: kt,
              GithubAuthProvider: Nt,
              GoogleAuthProvider: Ot,
              OAuthProvider: Ct,
              SAMLAuthProvider: Lt,
              PhoneAuthProvider: Rs,
              PhoneMultiFactorGenerator: lo,
              RecaptchaVerifier: Ds,
              TwitterAuthProvider: jt,
              Auth: ks,
              AuthCredential: et,
              Error: i.ZR
            })
            .setInstantiationMode('LAZY')
            .setMultipleInstances(!1)
        ),
          e.registerVersion(Ko, Qo);
      }
      js(r.Z);
    },
    14673: (e, t, n) => {
      'use strict';
      var r,
        i = n(98180),
        o = n(25816),
        s = n(8463),
        a = n(53333),
        u = n(74444),
        c =
          'undefined' !== typeof globalThis
            ? globalThis
            : 'undefined' !== typeof window
              ? window
              : 'undefined' !== typeof global
                ? global
                : 'undefined' !== typeof self
                  ? self
                  : {},
        l = {},
        h = h || {},
        f = c || self;
      function d(e) {
        var t = typeof e;
        return (
          (t = 'object' != t ? t : e ? (Array.isArray(e) ? 'array' : t) : 'null'), 'array' == t || ('object' == t && 'number' == typeof e.length)
        );
      }
      function p(e) {
        var t = typeof e;
        return ('object' == t && null != e) || 'function' == t;
      }
      function g(e) {
        return (Object.prototype.hasOwnProperty.call(e, m) && e[m]) || (e[m] = ++v);
      }
      var m = 'closure_uid_' + ((1e9 * Math.random()) >>> 0),
        v = 0;
      function y(e, t, n) {
        return e.call.apply(e.bind, arguments);
      }
      function w(e, t, n) {
        if (!e) throw Error();
        if (2 < arguments.length) {
          var r = Array.prototype.slice.call(arguments, 2);
          return function () {
            var n = Array.prototype.slice.call(arguments);
            return Array.prototype.unshift.apply(n, r), e.apply(t, n);
          };
        }
        return function () {
          return e.apply(t, arguments);
        };
      }
      function b(e, t, n) {
        return (b = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf('native code') ? y : w), b.apply(null, arguments);
      }
      function _(e, t) {
        var n = Array.prototype.slice.call(arguments, 1);
        return function () {
          var t = n.slice();
          return t.push.apply(t, arguments), e.apply(this, t);
        };
      }
      function I(e, t) {
        function n() {}
        (n.prototype = t.prototype),
          (e.$ = t.prototype),
          (e.prototype = new n()),
          (e.prototype.constructor = e),
          (e.ac = function (e, n, r) {
            for (var i = Array(arguments.length - 2), o = 2; o < arguments.length; o++) i[o - 2] = arguments[o];
            return t.prototype[n].apply(e, i);
          });
      }
      function E() {
        (this.s = this.s), (this.o = this.o);
      }
      var S = 0;
      (E.prototype.s = !1),
        (E.prototype.sa = function () {
          this.s || ((this.s = !0), this.N(), 0 == S) || g(this);
        }),
        (E.prototype.N = function () {
          if (this.o) for (; this.o.length; ) this.o.shift()();
        });
      const T = Array.prototype.indexOf
        ? function (e, t) {
            return Array.prototype.indexOf.call(e, t, void 0);
          }
        : function (e, t) {
            if ('string' === typeof e) return 'string' !== typeof t || 1 != t.length ? -1 : e.indexOf(t, 0);
            for (let n = 0; n < e.length; n++) if (n in e && e[n] === t) return n;
            return -1;
          };
      function A(e) {
        const t = e.length;
        if (0 < t) {
          const n = Array(t);
          for (let r = 0; r < t; r++) n[r] = e[r];
          return n;
        }
        return [];
      }
      function x(e, t) {
        for (let n = 1; n < arguments.length; n++) {
          const t = arguments[n];
          if (d(t)) {
            const n = e.length || 0,
              r = t.length || 0;
            e.length = n + r;
            for (let i = 0; i < r; i++) e[n + i] = t[i];
          } else e.push(t);
        }
      }
      function C(e, t) {
        (this.type = e), (this.g = this.target = t), (this.defaultPrevented = !1);
      }
      C.prototype.h = function () {
        this.defaultPrevented = !0;
      };
      var k = (function () {
        if (!f.addEventListener || !Object.defineProperty) return !1;
        var e = !1,
          t = Object.defineProperty({}, 'passive', {
            get: function () {
              e = !0;
            }
          });
        try {
          f.addEventListener('test', () => {}, t), f.removeEventListener('test', () => {}, t);
        } catch (n) {}
        return e;
      })();
      function O(e) {
        return /^[\s\xa0]*$/.test(e);
      }
      function N() {
        var e = f.navigator;
        return e && (e = e.userAgent) ? e : '';
      }
      function R(e) {
        return -1 != N().indexOf(e);
      }
      function P(e) {
        return P[' '](e), e;
      }
      function D(e, t) {
        var n = _r;
        return Object.prototype.hasOwnProperty.call(n, e) ? n[e] : (n[e] = t(e));
      }
      P[' '] = function () {};
      var L,
        j,
        M = R('Opera'),
        F = R('Trident') || R('MSIE'),
        U = R('Edge'),
        V = U || F,
        B = R('Gecko') && !(-1 != N().toLowerCase().indexOf('webkit') && !R('Edge')) && !(R('Trident') || R('MSIE')) && !R('Edge'),
        $ = -1 != N().toLowerCase().indexOf('webkit') && !R('Edge');
      function q() {
        var e = f.document;
        return e ? e.documentMode : void 0;
      }
      e: {
        var z = '',
          G = (function () {
            var e = N();
            return B
              ? /rv:([^\);]+)(\)|;)/.exec(e)
              : U
                ? /Edge\/([\d\.]+)/.exec(e)
                : F
                  ? /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(e)
                  : $
                    ? /WebKit\/(\S+)/.exec(e)
                    : M
                      ? /(?:Version)[ \/]?(\S+)/.exec(e)
                      : void 0;
          })();
        if ((G && (z = G ? G[1] : ''), F)) {
          var W = q();
          if (null != W && W > parseFloat(z)) {
            L = String(W);
            break e;
          }
        }
        L = z;
      }
      if (f.document && F) {
        var H = q();
        j = H || parseInt(L, 10) || void 0;
      } else j = void 0;
      var K = j;
      function Q(e, t) {
        if (
          (C.call(this, e ? e.type : ''),
          (this.relatedTarget = this.g = this.target = null),
          (this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0),
          (this.key = ''),
          (this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1),
          (this.state = null),
          (this.pointerId = 0),
          (this.pointerType = ''),
          (this.i = null),
          e)
        ) {
          var n = (this.type = e.type),
            r = e.changedTouches && e.changedTouches.length ? e.changedTouches[0] : null;
          if (((this.target = e.target || e.srcElement), (this.g = t), (t = e.relatedTarget))) {
            if (B) {
              e: {
                try {
                  P(t.nodeName);
                  var i = !0;
                  break e;
                } catch (o) {}
                i = !1;
              }
              i || (t = null);
            }
          } else 'mouseover' == n ? (t = e.fromElement) : 'mouseout' == n && (t = e.toElement);
          (this.relatedTarget = t),
            r
              ? ((this.clientX = void 0 !== r.clientX ? r.clientX : r.pageX),
                (this.clientY = void 0 !== r.clientY ? r.clientY : r.pageY),
                (this.screenX = r.screenX || 0),
                (this.screenY = r.screenY || 0))
              : ((this.clientX = void 0 !== e.clientX ? e.clientX : e.pageX),
                (this.clientY = void 0 !== e.clientY ? e.clientY : e.pageY),
                (this.screenX = e.screenX || 0),
                (this.screenY = e.screenY || 0)),
            (this.button = e.button),
            (this.key = e.key || ''),
            (this.ctrlKey = e.ctrlKey),
            (this.altKey = e.altKey),
            (this.shiftKey = e.shiftKey),
            (this.metaKey = e.metaKey),
            (this.pointerId = e.pointerId || 0),
            (this.pointerType = 'string' === typeof e.pointerType ? e.pointerType : Y[e.pointerType] || ''),
            (this.state = e.state),
            (this.i = e),
            e.defaultPrevented && Q.$.h.call(this);
        }
      }
      I(Q, C);
      var Y = { 2: 'touch', 3: 'pen', 4: 'mouse' };
      Q.prototype.h = function () {
        Q.$.h.call(this);
        var e = this.i;
        e.preventDefault ? e.preventDefault() : (e.returnValue = !1);
      };
      var X = 'closure_listenable_' + ((1e6 * Math.random()) | 0),
        J = 0;
      function Z(e, t, n, r, i) {
        (this.listener = e),
          (this.proxy = null),
          (this.src = t),
          (this.type = n),
          (this.capture = !!r),
          (this.la = i),
          (this.key = ++J),
          (this.fa = this.ia = !1);
      }
      function ee(e) {
        (e.fa = !0), (e.listener = null), (e.proxy = null), (e.src = null), (e.la = null);
      }
      function te(e, t, n) {
        for (const r in e) t.call(n, e[r], r, e);
      }
      function ne(e, t) {
        for (const n in e) t.call(void 0, e[n], n, e);
      }
      function re(e) {
        const t = {};
        for (const n in e) t[n] = e[n];
        return t;
      }
      const ie = 'constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf'.split(' ');
      function oe(e, t) {
        let n, r;
        for (let i = 1; i < arguments.length; i++) {
          for (n in ((r = arguments[i]), r)) e[n] = r[n];
          for (let t = 0; t < ie.length; t++) (n = ie[t]), Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
        }
      }
      function se(e) {
        (this.src = e), (this.g = {}), (this.h = 0);
      }
      function ae(e, t) {
        var n = t.type;
        if (n in e.g) {
          var r,
            i = e.g[n],
            o = T(i, t);
          (r = 0 <= o) && Array.prototype.splice.call(i, o, 1), r && (ee(t), 0 == e.g[n].length && (delete e.g[n], e.h--));
        }
