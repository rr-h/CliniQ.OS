remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
          for (r = Mr(r, 2), n = Mr(n, 2); !kr(r); ) {
            var s = o.add(r);
            0 >= s.X(e) && ((i = i.add(n)), (o = s)), (r = Mr(r, 1)), (n = Mr(n, 1));
          }
          return (t = Rr(e, i.R(t))), new Dr(i, t);
        }
        for (i = Ar; 0 <= e.X(t); ) {
          for (
            n = Math.max(1, Math.floor(e.ea() / t.ea())),
              r = Math.ceil(Math.log(n) / Math.LN2),
              r = 48 >= r ? 1 : Math.pow(2, r - 48),
              o = Er(n),
              s = o.R(t);
            Or(s) || 0 < s.X(e);

          )
            (n -= r), (o = Er(n)), (s = o.R(t));
          kr(o) && (o = xr), (i = i.add(o)), (e = Rr(e, s));
        }
        return new Dr(i, e);
      }
      function jr(e) {
        for (var t = e.g.length + 1, n = [], r = 0; r < t; r++) n[r] = (e.D(r) << 1) | (e.D(r - 1) >>> 31);
        return new br(n, e.h);
      }
      function Mr(e, t) {
        var n = t >> 5;
        t %= 32;
        for (var r = e.g.length - n, i = [], o = 0; o < r; o++) i[o] = 0 < t ? (e.D(o + n) >>> t) | (e.D(o + n + 1) << (32 - t)) : e.D(o + n);
        return new br(i, e.h);
      }
      (r = br.prototype),
        (r.ea = function () {
          if (Or(this)) return -Nr(this).ea();
          for (var e = 0, t = 1, n = 0; n < this.g.length; n++) {
            var r = this.D(n);
            (e += (0 <= r ? r : Tr + r) * t), (t *= Tr);
          }
          return e;
        }),
        (r.toString = function (e) {
          if (((e = e || 10), 2 > e || 36 < e)) throw Error('radix out of range: ' + e);
          if (kr(this)) return '0';
          if (Or(this)) return '-' + Nr(this).toString(e);
          for (var t = Er(Math.pow(e, 6)), n = this, r = ''; ; ) {
            var i = Lr(n, t).g;
            n = Rr(n, i.R(t));
            var o = ((0 < n.g.length ? n.g[0] : n.h) >>> 0).toString(e);
            if (((n = i), kr(n))) return o + r;
            for (; 6 > o.length; ) o = '0' + o;
            r = o + r;
          }
        }),
        (r.D = function (e) {
          return 0 > e ? 0 : e < this.g.length ? this.g[e] : this.h;
        }),
        (r.X = function (e) {
          return (e = Rr(this, e)), Or(e) ? -1 : kr(e) ? 0 : 1;
        }),
        (r.abs = function () {
          return Or(this) ? Nr(this) : this;
        }),
        (r.add = function (e) {
          for (var t = Math.max(this.g.length, e.g.length), n = [], r = 0, i = 0; i <= t; i++) {
            var o = r + (65535 & this.D(i)) + (65535 & e.D(i)),
              s = (o >>> 16) + (this.D(i) >>> 16) + (e.D(i) >>> 16);
            (r = s >>> 16), (o &= 65535), (s &= 65535), (n[i] = (s << 16) | o);
          }
          return new br(n, -2147483648 & n[n.length - 1] ? -1 : 0);
        }),
        (r.R = function (e) {
          if (kr(this) || kr(e)) return Ar;
          if (Or(this)) return Or(e) ? Nr(this).R(Nr(e)) : Nr(Nr(this).R(e));
          if (Or(e)) return Nr(this.R(Nr(e)));
          if (0 > this.X(Cr) && 0 > e.X(Cr)) return Er(this.ea() * e.ea());
          for (var t = this.g.length + e.g.length, n = [], r = 0; r < 2 * t; r++) n[r] = 0;
          for (r = 0; r < this.g.length; r++)
            for (var i = 0; i < e.g.length; i++) {
              var o = this.D(r) >>> 16,
                s = 65535 & this.D(r),
                a = e.D(i) >>> 16,
                u = 65535 & e.D(i);
              (n[2 * r + 2 * i] += s * u),
                Pr(n, 2 * r + 2 * i),
                (n[2 * r + 2 * i + 1] += o * u),
                Pr(n, 2 * r + 2 * i + 1),
                (n[2 * r + 2 * i + 1] += s * a),
                Pr(n, 2 * r + 2 * i + 1),
                (n[2 * r + 2 * i + 2] += o * a),
                Pr(n, 2 * r + 2 * i + 2);
            }
          for (r = 0; r < t; r++) n[r] = (n[2 * r + 1] << 16) | n[2 * r];
          for (r = t; r < 2 * t; r++) n[r] = 0;
          return new br(n, 0);
        }),
        (r.gb = function (e) {
          return Lr(this, e).h;
        }),
        (r.and = function (e) {
          for (var t = Math.max(this.g.length, e.g.length), n = [], r = 0; r < t; r++) n[r] = this.D(r) & e.D(r);
          return new br(n, this.h & e.h);
        }),
        (r.or = function (e) {
          for (var t = Math.max(this.g.length, e.g.length), n = [], r = 0; r < t; r++) n[r] = this.D(r) | e.D(r);
          return new br(n, this.h | e.h);
        }),
        (r.xor = function (e) {
          for (var t = Math.max(this.g.length, e.g.length), n = [], r = 0; r < t; r++) n[r] = this.D(r) ^ e.D(r);
          return new br(n, this.h ^ e.h);
        }),
        (fr.prototype.createWebChannel = fr.prototype.g),
        (dr.prototype.send = dr.prototype.u),
        (dr.prototype.open = dr.prototype.m),
        (dr.prototype.close = dr.prototype.close),
        (ut.NO_ERROR = 0),
        (ut.TIMEOUT = 8),
        (ut.HTTP_ERROR = 6),
        (ct.COMPLETE = 'complete'),
        (ft.EventType = pt),
        (pt.OPEN = 'a'),
        (pt.CLOSE = 'b'),
        (pt.ERROR = 'c'),
        (pt.MESSAGE = 'd'),
        (Ie.prototype.listen = Ie.prototype.O),
        (kn.prototype.listenOnce = kn.prototype.P),
        (kn.prototype.getLastError = kn.prototype.Sa),
        (kn.prototype.getLastErrorCode = kn.prototype.Ia),
        (kn.prototype.getStatus = kn.prototype.da),
        (kn.prototype.getResponseJson = kn.prototype.Wa),
        (kn.prototype.getResponseText = kn.prototype.ja),
        (kn.prototype.send = kn.prototype.ha),
        (kn.prototype.setWithCredentials = kn.prototype.Oa),
        (yr.prototype.digest = yr.prototype.l),
        (yr.prototype.reset = yr.prototype.reset),
        (yr.prototype.update = yr.prototype.j),
        (br.prototype.add = br.prototype.add),
        (br.prototype.multiply = br.prototype.R),
        (br.prototype.modulo = br.prototype.gb),
        (br.prototype.compare = br.prototype.X),
        (br.prototype.toNumber = br.prototype.ea),
        (br.prototype.toString = br.prototype.toString),
        (br.prototype.getBits = br.prototype.D),
        (br.fromNumber = Er),
        (br.fromString = Sr);
      var Fr = (l.createWebChannelTransport = function () {
          return new fr();
        }),
        Ur = (l.getStatEventTarget = function () {
          return tt();
        }),
        Vr = (l.ErrorCode = ut),
        Br = (l.EventType = ct),
        $r = (l.Event = Ze),
        qr = (l.Stat = {
          xb: 0,
          Ab: 1,
          Bb: 2,
          Ub: 3,
          Zb: 4,
          Wb: 5,
          Xb: 6,
          Vb: 7,
          Tb: 8,
          Yb: 9,
          PROXY: 10,
          NOPROXY: 11,
          Rb: 12,
          Nb: 13,
          Ob: 14,
          Mb: 15,
          Pb: 16,
          Qb: 17,
          tb: 18,
          sb: 19,
          ub: 20
        }),
        zr = (l.FetchXmlHttpFactory = In),
        Gr = (l.WebChannel = ft),
        Wr = (l.XhrIo = kn),
        Hr = (l.Md5 = yr),
        Kr = (l.Integer = br);
      const Qr = '@firebase/firestore';
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Yr {
        constructor(e) {
          this.uid = e;
        }
        isAuthenticated() {
          return null != this.uid;
        }
        toKey() {
          return this.isAuthenticated() ? 'uid:' + this.uid : 'anonymous-user';
        }
        isEqual(e) {
          return e.uid === this.uid;
        }
      }
      (Yr.UNAUTHENTICATED = new Yr(null)),
        (Yr.GOOGLE_CREDENTIALS = new Yr('google-credentials-uid')),
        (Yr.FIRST_PARTY = new Yr('first-party-uid')),
        (Yr.MOCK_USER = new Yr('mock-user'));
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      let Xr = '9.23.0';
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Jr = new a.Yd('@firebase/firestore');
      function Zr() {
        return Jr.logLevel;
      }
      function ei(e) {
        Jr.setLogLevel(e);
      }
      function ti(e, ...t) {
        if (Jr.logLevel <= a['in'].DEBUG) {
          const n = t.map(ii);
          Jr.debug(`Firestore (${Xr}): ${e}`, ...n);
        }
      }
      function ni(e, ...t) {
        if (Jr.logLevel <= a['in'].ERROR) {
          const n = t.map(ii);
          Jr.error(`Firestore (${Xr}): ${e}`, ...n);
        }
      }
      function ri(e, ...t) {
        if (Jr.logLevel <= a['in'].WARN) {
          const n = t.map(ii);
          Jr.warn(`Firestore (${Xr}): ${e}`, ...n);
        }
      }
      function ii(e) {
        if ('string' == typeof e) return e;
        try {
          return (t = e), JSON.stringify(t);
        } catch (t) {
          return e;
        }
        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */ var t;
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function oi(e = 'Unexpected state') {
        const t = `FIRESTORE (${Xr}) INTERNAL ASSERTION FAILED: ` + e;
        throw (ni(t), new Error(t));
      }
      function si(e, t) {
        e || oi();
      }
      function ai(e, t) {
        e || oi();
      }
      function ui(e, t) {
        return e;
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ci = {
        OK: 'ok',
        CANCELLED: 'cancelled',
        UNKNOWN: 'unknown',
        INVALID_ARGUMENT: 'invalid-argument',
        DEADLINE_EXCEEDED: 'deadline-exceeded',
        NOT_FOUND: 'not-found',
        ALREADY_EXISTS: 'already-exists',
        PERMISSION_DENIED: 'permission-denied',
        UNAUTHENTICATED: 'unauthenticated',
        RESOURCE_EXHAUSTED: 'resource-exhausted',
        FAILED_PRECONDITION: 'failed-precondition',
        ABORTED: 'aborted',
        OUT_OF_RANGE: 'out-of-range',
        UNIMPLEMENTED: 'unimplemented',
        INTERNAL: 'internal',
        UNAVAILABLE: 'unavailable',
        DATA_LOSS: 'data-loss'
      };
      class li extends u.ZR {
        constructor(e, t) {
          super(e, t), (this.code = e), (this.message = t), (this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`);
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class hi {
        constructor() {
          this.promise = new Promise((e, t) => {
            (this.resolve = e), (this.reject = t);
          });
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class fi {
        constructor(e, t) {
          (this.user = t), (this.type = 'OAuth'), (this.headers = new Map()), this.headers.set('Authorization', `Bearer ${e}`);
        }
      }
      class di {
        getToken() {
          return Promise.resolve(null);
        }
        invalidateToken() {}
        start(e, t) {
          e.enqueueRetryable(() => t(Yr.UNAUTHENTICATED));
        }
        shutdown() {}
      }
      class pi {
        constructor(e) {
          (this.token = e), (this.changeListener = null);
        }
        getToken() {
          return Promise.resolve(this.token);
        }
        invalidateToken() {}
        start(e, t) {
          (this.changeListener = t), e.enqueueRetryable(() => t(this.token.user));
        }
        shutdown() {
          this.changeListener = null;
        }
      }
      class gi {
        constructor(e) {
          (this.t = e), (this.currentUser = Yr.UNAUTHENTICATED), (this.i = 0), (this.forceRefresh = !1), (this.auth = null);
        }
        start(e, t) {
          let n = this.i;
          const r = e => (this.i !== n ? ((n = this.i), t(e)) : Promise.resolve());
          let i = new hi();
          this.o = () => {
            this.i++, (this.currentUser = this.u()), i.resolve(), (i = new hi()), e.enqueueRetryable(() => r(this.currentUser));
          };
          const o = () => {
              const t = i;
              e.enqueueRetryable(async () => {
                await t.promise, await r(this.currentUser);
              });
            },
            s = e => {
              ti('FirebaseAuthCredentialsProvider', 'Auth detected'), (this.auth = e), this.auth.addAuthTokenListener(this.o), o();
            };
          this.t.onInit(e => s(e)),
            setTimeout(() => {
              if (!this.auth) {
                const e = this.t.getImmediate({ optional: !0 });
                e ? s(e) : (ti('FirebaseAuthCredentialsProvider', 'Auth not yet detected'), i.resolve(), (i = new hi()));
              }
            }, 0),
            o();
        }
        getToken() {
          const e = this.i,
            t = this.forceRefresh;
          return (
            (this.forceRefresh = !1),
            this.auth
              ? this.auth
                  .getToken(t)
                  .then(t =>
                    this.i !== e
                      ? (ti('FirebaseAuthCredentialsProvider', 'getToken aborted due to token change.'), this.getToken())
                      : t
                        ? (si('string' == typeof t.accessToken), new fi(t.accessToken, this.currentUser))
                        : null
                  )
              : Promise.resolve(null)
          );
        }
        invalidateToken() {
          this.forceRefresh = !0;
        }
        shutdown() {
          this.auth && this.auth.removeAuthTokenListener(this.o);
        }
        u() {
          const e = this.auth && this.auth.getUid();
          return si(null === e || 'string' == typeof e), new Yr(e);
        }
      }
      class mi {
        constructor(e, t, n) {
          (this.h = e), (this.l = t), (this.m = n), (this.type = 'FirstParty'), (this.user = Yr.FIRST_PARTY), (this.g = new Map());
        }
        p() {
          return this.m ? this.m() : null;
        }
        get headers() {
          this.g.set('X-Goog-AuthUser', this.h);
          const e = this.p();
          return e && this.g.set('Authorization', e), this.l && this.g.set('X-Goog-Iam-Authorization-Token', this.l), this.g;
        }
      }
      class vi {
        constructor(e, t, n) {
          (this.h = e), (this.l = t), (this.m = n);
        }
        getToken() {
          return Promise.resolve(new mi(this.h, this.l, this.m));
        }
        start(e, t) {
          e.enqueueRetryable(() => t(Yr.FIRST_PARTY));
        }
        shutdown() {}
        invalidateToken() {}
      }
      class yi {
        constructor(e) {
          (this.value = e),
            (this.type = 'AppCheck'),
            (this.headers = new Map()),
            e && e.length > 0 && this.headers.set('x-firebase-appcheck', this.value);
        }
      }
      class wi {
        constructor(e) {
          (this.I = e), (this.forceRefresh = !1), (this.appCheck = null), (this.T = null);
        }
        start(e, t) {
          const n = e => {
            null != e.error &&
              ti('FirebaseAppCheckTokenProvider', `Error getting App Check token; using placeholder token instead. Error: ${e.error.message}`);
            const n = e.token !== this.T;
            return (
              (this.T = e.token), ti('FirebaseAppCheckTokenProvider', `Received ${n ? 'new' : 'existing'} token.`), n ? t(e.token) : Promise.resolve()
            );
          };
          this.o = t => {
            e.enqueueRetryable(() => n(t));
          };
          const r = e => {
            ti('FirebaseAppCheckTokenProvider', 'AppCheck detected'), (this.appCheck = e), this.appCheck.addTokenListener(this.o);
          };
          this.I.onInit(e => r(e)),
            setTimeout(() => {
              if (!this.appCheck) {
                const e = this.I.getImmediate({ optional: !0 });
                e ? r(e) : ti('FirebaseAppCheckTokenProvider', 'AppCheck not yet detected');
              }
            }, 0);
        }
        getToken() {
          const e = this.forceRefresh;
          return (
            (this.forceRefresh = !1),
            this.appCheck
              ? this.appCheck.getToken(e).then(e => (e ? (si('string' == typeof e.token), (this.T = e.token), new yi(e.token)) : null))
              : Promise.resolve(null)
          );
        }
        invalidateToken() {
          this.forceRefresh = !0;
        }
        shutdown() {
          this.appCheck && this.appCheck.removeTokenListener(this.o);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function bi(e) {
        const t = 'undefined' != typeof self && (self.crypto || self.msCrypto),
          n = new Uint8Array(e);
        if (t && 'function' == typeof t.getRandomValues) t.getRandomValues(n);
        else for (let r = 0; r < e; r++) n[r] = Math.floor(256 * Math.random());
        return n;
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class _i {
        static A() {
          const e = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
            t = Math.floor(256 / e.length) * e.length;
          let n = '';
          for (; n.length < 20; ) {
            const r = bi(40);
            for (let i = 0; i < r.length; ++i) n.length < 20 && r[i] < t && (n += e.charAt(r[i] % e.length));
          }
          return n;
        }
      }
      function Ii(e, t) {
        return e < t ? -1 : e > t ? 1 : 0;
      }
      function Ei(e, t, n) {
        return e.length === t.length && e.every((e, r) => n(e, t[r]));
      }
      function Si(e) {
        return e + '\0';
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Ti {
        constructor(e, t) {
          if (((this.seconds = e), (this.nanoseconds = t), t < 0)) throw new li(ci.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + t);
          if (t >= 1e9) throw new li(ci.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + t);
          if (e < -62135596800) throw new li(ci.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + e);
          if (e >= 253402300800) throw new li(ci.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + e);
        }
        static now() {
          return Ti.fromMillis(Date.now());
        }
        static fromDate(e) {
          return Ti.fromMillis(e.getTime());
        }
        static fromMillis(e) {
          const t = Math.floor(e / 1e3),
            n = Math.floor(1e6 * (e - 1e3 * t));
          return new Ti(t, n);
        }
        toDate() {
          return new Date(this.toMillis());
        }
        toMillis() {
          return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }
        _compareTo(e) {
          return this.seconds === e.seconds ? Ii(this.nanoseconds, e.nanoseconds) : Ii(this.seconds, e.seconds);
        }
        isEqual(e) {
          return e.seconds === this.seconds && e.nanoseconds === this.nanoseconds;
        }
        toString() {
          return 'Timestamp(seconds=' + this.seconds + ', nanoseconds=' + this.nanoseconds + ')';
        }
        toJSON() {
          return { seconds: this.seconds, nanoseconds: this.nanoseconds };
        }
        valueOf() {
          const e = this.seconds - -62135596800;
          return String(e).padStart(12, '0') + '.' + String(this.nanoseconds).padStart(9, '0');
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Ai {
        constructor(e) {
          this.timestamp = e;
        }
        static fromTimestamp(e) {
          return new Ai(e);
        }
        static min() {
          return new Ai(new Ti(0, 0));
        }
        static max() {
          return new Ai(new Ti(253402300799, 999999999));
        }
        compareTo(e) {
          return this.timestamp._compareTo(e.timestamp);
        }
        isEqual(e) {
          return this.timestamp.isEqual(e.timestamp);
        }
        toMicroseconds() {
          return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }
        toString() {
          return 'SnapshotVersion(' + this.timestamp.toString() + ')';
        }
        toTimestamp() {
          return this.timestamp;
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class xi {
        constructor(e, t, n) {
          void 0 === t ? (t = 0) : t > e.length && oi(),
            void 0 === n ? (n = e.length - t) : n > e.length - t && oi(),
            (this.segments = e),
            (this.offset = t),
            (this.len = n);
        }
        get length() {
          return this.len;
        }
        isEqual(e) {
          return 0 === xi.comparator(this, e);
        }
        child(e) {
          const t = this.segments.slice(this.offset, this.limit());
          return (
            e instanceof xi
              ? e.forEach(e => {
                  t.push(e);
                })
              : t.push(e),
            this.construct(t)
          );
        }
        limit() {
          return this.offset + this.length;
        }
        popFirst(e) {
          return (e = void 0 === e ? 1 : e), this.construct(this.segments, this.offset + e, this.length - e);
        }
        popLast() {
          return this.construct(this.segments, this.offset, this.length - 1);
        }
        firstSegment() {
          return this.segments[this.offset];
        }
        lastSegment() {
          return this.get(this.length - 1);
        }
        get(e) {
          return this.segments[this.offset + e];
        }
        isEmpty() {
          return 0 === this.length;
        }
        isPrefixOf(e) {
          if (e.length < this.length) return !1;
          for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return !1;
          return !0;
        }
        isImmediateParentOf(e) {
          if (this.length + 1 !== e.length) return !1;
          for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return !1;
          return !0;
        }
        forEach(e) {
          for (let t = this.offset, n = this.limit(); t < n; t++) e(this.segments[t]);
        }
        toArray() {
          return this.segments.slice(this.offset, this.limit());
        }
        static comparator(e, t) {
          const n = Math.min(e.length, t.length);
          for (let r = 0; r < n; r++) {
            const n = e.get(r),
              i = t.get(r);
            if (n < i) return -1;
            if (n > i) return 1;
          }
          return e.length < t.length ? -1 : e.length > t.length ? 1 : 0;
        }
      }
      class Ci extends xi {
        construct(e, t, n) {
          return new Ci(e, t, n);
        }
        canonicalString() {
          return this.toArray().join('/');
        }
        toString() {
          return this.canonicalString();
        }
        static fromString(...e) {
          const t = [];
          for (const n of e) {
            if (n.indexOf('//') >= 0) throw new li(ci.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
            t.push(...n.split('/').filter(e => e.length > 0));
          }
          return new Ci(t);
        }
        static emptyPath() {
          return new Ci([]);
        }
      }
      const ki = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
      class Oi extends xi {
        construct(e, t, n) {
          return new Oi(e, t, n);
        }
        static isValidIdentifier(e) {
          return ki.test(e);
        }
        canonicalString() {
          return this.toArray()
            .map(e => ((e = e.replace(/\\/g, '\\\\').replace(/`/g, '\\`')), Oi.isValidIdentifier(e) || (e = '`' + e + '`'), e))
            .join('.');
        }
        toString() {
          return this.canonicalString();
        }
        isKeyField() {
          return 1 === this.length && '__name__' === this.get(0);
        }
        static keyField() {
          return new Oi(['__name__']);
        }
        static fromServerFormat(e) {
          const t = [];
          let n = '',
            r = 0;
          const i = () => {
            if (0 === n.length)
              throw new li(ci.INVALID_ARGUMENT, `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
            t.push(n), (n = '');
          };
          let o = !1;
          for (; r < e.length; ) {
            const t = e[r];
            if ('\\' === t) {
              if (r + 1 === e.length) throw new li(ci.INVALID_ARGUMENT, 'Path has trailing escape character: ' + e);
              const t = e[r + 1];
              if ('\\' !== t && '.' !== t && '`' !== t) throw new li(ci.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + e);
              (n += t), (r += 2);
            } else '`' === t ? ((o = !o), r++) : '.' !== t || o ? ((n += t), r++) : (i(), r++);
          }
          if ((i(), o)) throw new li(ci.INVALID_ARGUMENT, 'Unterminated ` in path: ' + e);
          return new Oi(t);
        }
        static emptyPath() {
          return new Oi([]);
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Ni {
        constructor(e) {
          this.path = e;
        }
        static fromPath(e) {
          return new Ni(Ci.fromString(e));
        }
        static fromName(e) {
          return new Ni(Ci.fromString(e).popFirst(5));
        }
        static empty() {
          return new Ni(Ci.emptyPath());
        }
        get collectionGroup() {
          return this.path.popLast().lastSegment();
        }
        hasCollectionId(e) {
          return this.path.length >= 2 && this.path.get(this.path.length - 2) === e;
        }
        getCollectionGroup() {
          return this.path.get(this.path.length - 2);
        }
        getCollectionPath() {
          return this.path.popLast();
        }
        isEqual(e) {
          return null !== e && 0 === Ci.comparator(this.path, e.path);
        }
        toString() {
          return this.path.toString();
        }
        static comparator(e, t) {
          return Ci.comparator(e.path, t.path);
        }
        static isDocumentKey(e) {
          return e.length % 2 == 0;
        }
        static fromSegments(e) {
          return new Ni(new Ci(e.slice()));
        }
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Ri {
        constructor(e, t, n, r) {
          (this.indexId = e), (this.collectionGroup = t), (this.fields = n), (this.indexState = r);
        }
      }
      function Pi(e) {
        return e.fields.find(e => 2 === e.kind);
      }
      function Di(e) {
        return e.fields.filter(e => 2 !== e.kind);
      }
      Ri.UNKNOWN_ID = -1;
      class Li {
        constructor(e, t) {
          (this.fieldPath = e), (this.kind = t);
        }
      }
      class ji {
        constructor(e, t) {
          (this.sequenceNumber = e), (this.offset = t);
        }
        static empty() {
          return new ji(0, Ui.min());
        }
      }
      function Mi(e, t) {
        const n = e.toTimestamp().seconds,
          r = e.toTimestamp().nanoseconds + 1,
          i = Ai.fromTimestamp(1e9 === r ? new Ti(n + 1, 0) : new Ti(n, r));
        return new Ui(i, Ni.empty(), t);
      }
      function Fi(e) {
        return new Ui(e.readTime, e.key, -1);
      }
      class Ui {
        constructor(e, t, n) {
          (this.readTime = e), (this.documentKey = t), (this.largestBatchId = n);
        }
        static min() {
          return new Ui(Ai.min(), Ni.empty(), -1);
        }
        static max() {
          return new Ui(Ai.max(), Ni.empty(), -1);
        }
      }
      function Vi(e, t) {
        let n = e.readTime.compareTo(t.readTime);
        return 0 !== n ? n : ((n = Ni.comparator(e.documentKey, t.documentKey)), 0 !== n ? n : Ii(e.largestBatchId, t.largestBatchId));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Bi = 'The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.';
      class $i {
        constructor() {
          this.onCommittedListeners = [];
        }
        addOnCommittedListener(e) {
          this.onCommittedListeners.push(e);
        }
        raiseOnCommittedEvent() {
          this.onCommittedListeners.forEach(e => e());
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function qi(e) {
        if (e.code !== ci.FAILED_PRECONDITION || e.message !== Bi) throw e;
        ti('LocalStore', 'Unexpectedly lost primary lease');
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class zi {
        constructor(e) {
          (this.nextCallback = null),
            (this.catchCallback = null),
            (this.result = void 0),
            (this.error = void 0),
            (this.isDone = !1),
            (this.callbackAttached = !1),
            e(
              e => {
                (this.isDone = !0), (this.result = e), this.nextCallback && this.nextCallback(e);
              },
              e => {
                (this.isDone = !0), (this.error = e), this.catchCallback && this.catchCallback(e);
              }
            );
        }
        catch(e) {
          return this.next(void 0, e);
        }
        next(e, t) {
          return (
            this.callbackAttached && oi(),
            (this.callbackAttached = !0),
            this.isDone
              ? this.error
                ? this.wrapFailure(t, this.error)
                : this.wrapSuccess(e, this.result)
              : new zi((n, r) => {
                  (this.nextCallback = t => {
                    this.wrapSuccess(e, t).next(n, r);
                  }),
                    (this.catchCallback = e => {
                      this.wrapFailure(t, e).next(n, r);
                    });
                })
          );
        }
        toPromise() {
          return new Promise((e, t) => {
            this.next(e, t);
          });
        }
        wrapUserFunction(e) {
          try {
            const t = e();
            return t instanceof zi ? t : zi.resolve(t);
          } catch (e) {
            return zi.reject(e);
          }
        }
        wrapSuccess(e, t) {
          return e ? this.wrapUserFunction(() => e(t)) : zi.resolve(t);
        }
        wrapFailure(e, t) {
          return e ? this.wrapUserFunction(() => e(t)) : zi.reject(t);
        }
        static resolve(e) {
          return new zi((t, n) => {
            t(e);
          });
        }
        static reject(e) {
          return new zi((t, n) => {
            n(e);
          });
        }
        static waitFor(e) {
          return new zi((t, n) => {
            let r = 0,
              i = 0,
              o = !1;
            e.forEach(e => {
              ++r,
                e.next(
                  () => {
                    ++i, o && i === r && t();
                  },
                  e => n(e)
                );
            }),
              (o = !0),
              i === r && t();
          });
        }
        static or(e) {
          let t = zi.resolve(!1);
          for (const n of e) t = t.next(e => (e ? zi.resolve(e) : n()));
          return t;
        }
        static forEach(e, t) {
          const n = [];
          return (
            e.forEach((e, r) => {
              n.push(t.call(this, e, r));
            }),
            this.waitFor(n)
          );
        }
        static mapArray(e, t) {
          return new zi((n, r) => {
            const i = e.length,
              o = new Array(i);
            let s = 0;
            for (let a = 0; a < i; a++) {
              const u = a;
              t(e[u]).next(
                e => {
                  (o[u] = e), ++s, s === i && n(o);
                },
                e => r(e)
              );
            }
          });
        }
        static doWhile(e, t) {
          return new zi((n, r) => {
            const i = () => {
              !0 === e()
                ? t().next(() => {
                    i();
                  }, r)
                : n();
            };
            i();
          });
        }
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Gi {
        constructor(e, t) {
          (this.action = e),
            (this.transaction = t),
            (this.aborted = !1),
            (this.v = new hi()),
            (this.transaction.oncomplete = () => {
              this.v.resolve();
            }),
            (this.transaction.onabort = () => {
              t.error ? this.v.reject(new Ki(e, t.error)) : this.v.resolve();
            }),
            (this.transaction.onerror = t => {
              const n = Zi(t.target.error);
              this.v.reject(new Ki(e, n));
            });
        }
        static open(e, t, n, r) {
          try {
            return new Gi(t, e.transaction(r, n));
          } catch (e) {
            throw new Ki(t, e);
          }
        }
        get R() {
          return this.v.promise;
        }
        abort(e) {
          e && this.v.reject(e),
            this.aborted ||
              (ti('SimpleDb', 'Aborting transaction:', e ? e.message : 'Client-initiated abort'), (this.aborted = !0), this.transaction.abort());
        }
        P() {
          const e = this.transaction;
          this.aborted || 'function' != typeof e.commit || e.commit();
        }
        store(e) {
          const t = this.transaction.objectStore(e);
          return new Yi(t);
        }
      }
      class Wi {
        constructor(e, t, n) {
          (this.name = e),
            (this.version = t),
            (this.V = n),
            12.2 === Wi.S((0, u.z$)()) &&
              ni(
                'Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.'
              );
        }
        static delete(e) {
          return ti('SimpleDb', 'Removing database:', e), Xi(window.indexedDB.deleteDatabase(e)).toPromise();
        }
        static D() {
          if (!(0, u.hl)()) return !1;
          if (Wi.C()) return !0;
          const e = (0, u.z$)(),
            t = Wi.S(e),
            n = 0 < t && t < 10,
            r = Wi.N(e),
            i = 0 < r && r < 4.5;
          return !(e.indexOf('MSIE ') > 0 || e.indexOf('Trident/') > 0 || e.indexOf('Edge/') > 0 || n || i);
        }
        static C() {
          var e;
          return (
            'undefined' != typeof process &&
            'YES' ===
              (null ===
                (e = {
                  VUE_APP_RPC_URL: 'https://eth-mainnet.alchemyapi.io/v2/liXRp8m5CdTqRuv13chxc-JNUCI7RDzW',
                  VUE_APP_POOLSUITE_API_KEY: 'ZT4OmZbR5dAuXCfXOZaHxhge3CfgXXvB',
                  VUE_APP_POOLSUITE_HOST: 'https://api-dev.poolsuite.net',
                  NODE_ENV: 'production',
                  BASE_URL: '/'
                }) || void 0 === e
                ? void 0
                : e.k)
          );
        }
        static M(e, t) {
          return e.store(t);
        }
        static S(e) {
          const t = e.match(/i(?:phone|pad|pod) os ([\d_]+)/i),
            n = t ? t[1].split('_').slice(0, 2).join('.') : '-1';
          return Number(n);
        }
        static N(e) {
          const t = e.match(/Android ([\d.]+)/i),
            n = t ? t[1].split('.').slice(0, 2).join('.') : '-1';
          return Number(n);
        }
        async $(e) {
          return (
            this.db ||
              (ti('SimpleDb', 'Opening database:', this.name),
              (this.db = await new Promise((t, n) => {
                const r = indexedDB.open(this.name, this.version);
                (r.onsuccess = e => {
                  const n = e.target.result;
                  t(n);
                }),
                  (r.onblocked = () => {
                    n(
                      new Ki(
                        e,
                        'Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed.'
                      )
                    );
                  }),
                  (r.onerror = t => {
                    const r = t.target.error;
                    'VersionError' === r.name
                      ? n(
                          new li(
                            ci.FAILED_PRECONDITION,
                            'A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.'
                          )
                        )
                      : 'InvalidStateError' === r.name
                        ? n(
                            new li(
                              ci.FAILED_PRECONDITION,
                              'Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: ' +
                                r
                            )
                          )
                        : n(new Ki(e, r));
                  }),
                  (r.onupgradeneeded = e => {
                    ti('SimpleDb', 'Database "' + this.name + '" requires upgrade from version:', e.oldVersion);
                    const t = e.target.result;
                    this.V.O(t, r.transaction, e.oldVersion, this.version).next(() => {
                      ti('SimpleDb', 'Database upgrade to version ' + this.version + ' complete');
                    });
                  });
              }))),
            this.F && (this.db.onversionchange = e => this.F(e)),
            this.db
          );
        }
        B(e) {
          (this.F = e), this.db && (this.db.onversionchange = t => e(t));
        }
        async runTransaction(e, t, n, r) {
          const i = 'readonly' === t;
          let o = 0;
          for (;;) {
            ++o;
            try {
              this.db = await this.$(e);
              const t = Gi.open(this.db, e, i ? 'readonly' : 'readwrite', n),
                o = r(t)
                  .next(e => (t.P(), e))
                  .catch(e => (t.abort(e), zi.reject(e)))
                  .toPromise();
              return o.catch(() => {}), await t.R, o;
            } catch (e) {
              const t = e,
                n = 'FirebaseError' !== t.name && o < 3;
              if ((ti('SimpleDb', 'Transaction failed with error:', t.message, 'Retrying:', n), this.close(), !n)) return Promise.reject(t);
            }
          }
        }
        close() {
          this.db && this.db.close(), (this.db = void 0);
        }
      }
      class Hi {
        constructor(e) {
          (this.L = e), (this.q = !1), (this.U = null);
        }
        get isDone() {
          return this.q;
        }
        get K() {
          return this.U;
        }
        set cursor(e) {
          this.L = e;
        }
        done() {
          this.q = !0;
        }
        G(e) {
          this.U = e;
        }
        delete() {
          return Xi(this.L.delete());
        }
      }
      class Ki extends li {
        constructor(e, t) {
          super(ci.UNAVAILABLE, `IndexedDB transaction '${e}' failed: ${t}`), (this.name = 'IndexedDbTransactionError');
        }
      }
      function Qi(e) {
        return 'IndexedDbTransactionError' === e.name;
      }
      class Yi {
        constructor(e) {
          this.store = e;
        }
        put(e, t) {
          let n;
          return (
            void 0 !== t
              ? (ti('SimpleDb', 'PUT', this.store.name, e, t), (n = this.store.put(t, e)))
              : (ti('SimpleDb', 'PUT', this.store.name, '<auto-key>', e), (n = this.store.put(e))),
            Xi(n)
          );
        }
        add(e) {
          return ti('SimpleDb', 'ADD', this.store.name, e, e), Xi(this.store.add(e));
        }
        get(e) {
          return Xi(this.store.get(e)).next(t => (void 0 === t && (t = null), ti('SimpleDb', 'GET', this.store.name, e, t), t));
        }
        delete(e) {
          return ti('SimpleDb', 'DELETE', this.store.name, e), Xi(this.store.delete(e));
        }
        count() {
          return ti('SimpleDb', 'COUNT', this.store.name), Xi(this.store.count());
        }
        j(e, t) {
          const n = this.options(e, t);
          if (n.index || 'function' != typeof this.store.getAll) {
            const e = this.cursor(n),
              t = [];
            return this.W(e, (e, n) => {
              t.push(n);
            }).next(() => t);
          }
          {
            const e = this.store.getAll(n.range);
            return new zi((t, n) => {
              (e.onerror = e => {
                n(e.target.error);
              }),
                (e.onsuccess = e => {
                  t(e.target.result);
                });
            });
          }
        }
        H(e, t) {
          const n = this.store.getAll(e, null === t ? void 0 : t);
          return new zi((e, t) => {
            (n.onerror = e => {
              t(e.target.error);
            }),
              (n.onsuccess = t => {
                e(t.target.result);
              });
          });
        }
        J(e, t) {
          ti('SimpleDb', 'DELETE ALL', this.store.name);
          const n = this.options(e, t);
          n.Y = !1;
          const r = this.cursor(n);
          return this.W(r, (e, t, n) => n.delete());
        }
        X(e, t) {
          let n;
          t ? (n = e) : ((n = {}), (t = e));
          const r = this.cursor(n);
          return this.W(r, t);
        }
        Z(e) {
          const t = this.cursor({});
          return new zi((n, r) => {
            (t.onerror = e => {
              const t = Zi(e.target.error);
              r(t);
            }),
              (t.onsuccess = t => {
                const r = t.target.result;
                r
                  ? e(r.primaryKey, r.value).next(e => {
                      e ? r.continue() : n();
                    })
                  : n();
              });
          });
        }
        W(e, t) {
          const n = [];
          return new zi((r, i) => {
            (e.onerror = e => {
              i(e.target.error);
            }),
              (e.onsuccess = e => {
                const i = e.target.result;
                if (!i) return void r();
                const o = new Hi(i),
                  s = t(i.primaryKey, i.value, o);
                if (s instanceof zi) {
                  const e = s.catch(e => (o.done(), zi.reject(e)));
                  n.push(e);
                }
                o.isDone ? r() : null === o.K ? i.continue() : i.continue(o.K);
              });
          }).next(() => zi.waitFor(n));
        }
        options(e, t) {
          let n;
          return void 0 !== e && ('string' == typeof e ? (n = e) : (t = e)), { index: n, range: t };
        }
        cursor(e) {
          let t = 'next';
          if ((e.reverse && (t = 'prev'), e.index)) {
            const n = this.store.index(e.index);
            return e.Y ? n.openKeyCursor(e.range, t) : n.openCursor(e.range, t);
          }
          return this.store.openCursor(e.range, t);
        }
      }
      function Xi(e) {
        return new zi((t, n) => {
          (e.onsuccess = e => {
            const n = e.target.result;
            t(n);
          }),
            (e.onerror = e => {
              const t = Zi(e.target.error);
              n(t);
            });
        });
      }
      let Ji = !1;
      function Zi(e) {
        const t = Wi.S((0, u.z$)());
        if (t >= 12.2 && t < 13) {
          const t = 'An internal error was encountered in the Indexed Database server';
          if (e.message.indexOf(t) >= 0) {
            const e = new li(
              'internal',
              `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${t}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`
            );
            return (
              Ji ||
                ((Ji = !0),
                setTimeout(() => {
                  throw e;
                }, 0)),
              e
            );
          }
        }
        return e;
      }
      class eo {
        constructor(e, t) {
          (this.asyncQueue = e), (this.tt = t), (this.task = null);
        }
        start() {
          this.et(15e3);
        }
        stop() {
          this.task && (this.task.cancel(), (this.task = null));
        }
        get started() {
          return null !== this.task;
        }
        et(e) {
          ti('IndexBackiller', `Scheduled in ${e}ms`),
            (this.task = this.asyncQueue.enqueueAfterDelay('index_backfill', e, async () => {
              this.task = null;
              try {
                ti('IndexBackiller', `Documents written: ${await this.tt.nt()}`);
              } catch (e) {
                Qi(e) ? ti('IndexBackiller', 'Ignoring IndexedDB error during index backfill: ', e) : await qi(e);
              }
              await this.et(6e4);
            }));
        }
      }
      class to {
        constructor(e, t) {
          (this.localStore = e), (this.persistence = t);
        }
        async nt(e = 50) {
          return this.persistence.runTransaction('Backfill Indexes', 'readwrite-primary', t => this.st(t, e));
        }
        st(e, t) {
          const n = new Set();
          let r = t,
            i = !0;
          return zi
            .doWhile(
              () => !0 === i && r > 0,
              () =>
                this.localStore.indexManager.getNextCollectionGroupToUpdate(e).next(t => {
                  if (null !== t && !n.has(t))
                    return (
                      ti('IndexBackiller', `Processing collection: ${t}`),
                      this.it(e, t, r).next(e => {
                        (r -= e), n.add(t);
                      })
                    );
                  i = !1;
                })
            )
            .next(() => t - r);
        }
        it(e, t, n) {
          return this.localStore.indexManager.getMinOffsetFromCollectionGroup(e, t).next(r =>
            this.localStore.localDocuments.getNextDocuments(e, t, r, n).next(n => {
              const i = n.changes;
              return this.localStore.indexManager
                .updateIndexEntries(e, i)
                .next(() => this.rt(r, n))
                .next(n => (ti('IndexBackiller', `Updating offset: ${n}`), this.localStore.indexManager.updateCollectionGroup(e, t, n)))
                .next(() => i.size);
            })
          );
        }
        rt(e, t) {
          let n = e;
          return (
            t.changes.forEach((e, t) => {
              const r = Fi(t);
              Vi(r, n) > 0 && (n = r);
            }),
            new Ui(n.readTime, n.documentKey, Math.max(t.batchId, e.largestBatchId))
          );
        }
      }
      /**
       * @license
       * Copyright 2018 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class no {
        constructor(e, t) {
          (this.previousValue = e), t && ((t.sequenceNumberHandler = e => this.ot(e)), (this.ut = e => t.writeSequenceNumber(e)));
        }
        ot(e) {
          return (this.previousValue = Math.max(e, this.previousValue)), this.previousValue;
        }
        next() {
          const e = ++this.previousValue;
          return this.ut && this.ut(e), e;
        }
      }
      function ro(e) {
        return null == e;
      }
      function io(e) {
        return 0 === e && 1 / e == -1 / 0;
      }
      function oo(e) {
        return 'number' == typeof e && Number.isInteger(e) && !io(e) && e <= Number.MAX_SAFE_INTEGER && e >= Number.MIN_SAFE_INTEGER;
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function so(e) {
        let t = '';
        for (let n = 0; n < e.length; n++) t.length > 0 && (t = uo(t)), (t = ao(e.get(n), t));
        return uo(t);
      }
      function ao(e, t) {
        let n = t;
        const r = e.length;
        for (let i = 0; i < r; i++) {
          const t = e.charAt(i);
          switch (t) {
            case '\0':
              n += '';
              break;
            case '':
              n += '';
              break;
            default:
              n += t;
          }
        }
        return n;
      }
      function uo(e) {
        return e + '';
      }
      function co(e) {
        const t = e.length;
        if ((si(t >= 2), 2 === t)) return si('' === e.charAt(0) && '' === e.charAt(1)), Ci.emptyPath();
        const n = t - 2,
          r = [];
        let i = '';
        for (let o = 0; o < t; ) {
          const t = e.indexOf('', o);
          switch (((t < 0 || t > n) && oi(), e.charAt(t + 1))) {
            case '':
              const n = e.substring(o, t);
              let s;
              0 === i.length ? (s = n) : ((i += n), (s = i), (i = '')), r.push(s);
              break;
            case '':
              (i += e.substring(o, t)), (i += '\0');
              break;
            case '':
              i += e.substring(o, t + 1);
              break;
            default:
              oi();
          }
          o = t + 2;
        }
        return new Ci(r);
      }
      /**
       * @license
       * Copyright 2022 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ no.ct = -1;
      const lo = ['userId', 'batchId'];
      /**
       * @license
       * Copyright 2022 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function ho(e, t) {
        return [e, so(t)];
      }
      function fo(e, t, n) {
        return [e, so(t), n];
      }
      const po = {},
        go = ['prefixPath', 'collectionGroup', 'readTime', 'documentId'],
        mo = ['prefixPath', 'collectionGroup', 'documentId'],
        vo = ['collectionGroup', 'readTime', 'prefixPath', 'documentId'],
        yo = ['canonicalId', 'targetId'],
        wo = ['targetId', 'path'],
        bo = ['path', 'targetId'],
        _o = ['collectionId', 'parent'],
        Io = ['indexId', 'uid'],
        Eo = ['uid', 'sequenceNumber'],
        So = ['indexId', 'uid', 'arrayValue', 'directionalValue', 'orderedDocumentKey', 'documentKey'],
        To = ['indexId', 'uid', 'orderedDocumentKey'],
        Ao = ['userId', 'collectionPath', 'documentId'],
        xo = ['userId', 'collectionPath', 'largestBatchId'],
        Co = ['userId', 'collectionGroup', 'largestBatchId'],
        ko = [
          'mutationQueues',
          'mutations',
          'documentMutations',
          'remoteDocuments',
          'targets',
          'owner',
          'targetGlobal',
          'targetDocuments',
          'clientMetadata',
          'remoteDocumentGlobal',
          'collectionParents',
          'bundles',
          'namedQueries'
        ],
        Oo = [...ko, 'documentOverlays'],
        No = [
          'mutationQueues',
          'mutations',
          'documentMutations',
          'remoteDocumentsV14',
          'targets',
          'owner',
          'targetGlobal',
          'targetDocuments',
          'clientMetadata',
          'remoteDocumentGlobal',
          'collectionParents',
          'bundles',
          'namedQueries',
          'documentOverlays'
        ],
        Ro = No,
        Po = [...Ro, 'indexConfiguration', 'indexState', 'indexEntries'];
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Do extends $i {
        constructor(e, t) {
          super(), (this.ht = e), (this.currentSequenceNumber = t);
        }
      }
      function Lo(e, t) {
        const n = ui(e);
        return Wi.M(n.ht, t);
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function jo(e) {
        let t = 0;
        for (const n in e) Object.prototype.hasOwnProperty.call(e, n) && t++;
        return t;
      }
      function Mo(e, t) {
        for (const n in e) Object.prototype.hasOwnProperty.call(e, n) && t(n, e[n]);
      }
      function Fo(e) {
        for (const t in e) if (Object.prototype.hasOwnProperty.call(e, t)) return !1;
        return !0;
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Uo {
        constructor(e, t) {
          (this.comparator = e), (this.root = t || Bo.EMPTY);
        }
        insert(e, t) {
          return new Uo(this.comparator, this.root.insert(e, t, this.comparator).copy(null, null, Bo.BLACK, null, null));
        }
        remove(e) {
          return new Uo(this.comparator, this.root.remove(e, this.comparator).copy(null, null, Bo.BLACK, null, null));
        }
        get(e) {
          let t = this.root;
          for (; !t.isEmpty(); ) {
            const n = this.comparator(e, t.key);
            if (0 === n) return t.value;
            n < 0 ? (t = t.left) : n > 0 && (t = t.right);
          }
          return null;
        }
        indexOf(e) {
          let t = 0,
            n = this.root;
          for (; !n.isEmpty(); ) {
            const r = this.comparator(e, n.key);
            if (0 === r) return t + n.left.size;
            r < 0 ? (n = n.left) : ((t += n.left.size + 1), (n = n.right));
          }
          return -1;
        }
        isEmpty() {
          return this.root.isEmpty();
        }
        get size() {
          return this.root.size;
        }
        minKey() {
          return this.root.minKey();
        }
        maxKey() {
          return this.root.maxKey();
        }
        inorderTraversal(e) {
          return this.root.inorderTraversal(e);
        }
        forEach(e) {
          this.inorderTraversal((t, n) => (e(t, n), !1));
        }
        toString() {
          const e = [];
          return this.inorderTraversal((t, n) => (e.push(`${t}:${n}`), !1)), `{${e.join(', ')}}`;
        }
        reverseTraversal(e) {
          return this.root.reverseTraversal(e);
        }
        getIterator() {
          return new Vo(this.root, null, this.comparator, !1);
        }
        getIteratorFrom(e) {
          return new Vo(this.root, e, this.comparator, !1);
        }
        getReverseIterator() {
          return new Vo(this.root, null, this.comparator, !0);
        }
        getReverseIteratorFrom(e) {
          return new Vo(this.root, e, this.comparator, !0);
        }
      }
      class Vo {
        constructor(e, t, n, r) {
          (this.isReverse = r), (this.nodeStack = []);
          let i = 1;
          for (; !e.isEmpty(); )
            if (((i = t ? n(e.key, t) : 1), t && r && (i *= -1), i < 0)) e = this.isReverse ? e.left : e.right;
            else {
              if (0 === i) {
                this.nodeStack.push(e);
                break;
              }
              this.nodeStack.push(e), (e = this.isReverse ? e.right : e.left);
            }
        }
        getNext() {
          let e = this.nodeStack.pop();
          const t = { key: e.key, value: e.value };
          if (this.isReverse) for (e = e.left; !e.isEmpty(); ) this.nodeStack.push(e), (e = e.right);
          else for (e = e.right; !e.isEmpty(); ) this.nodeStack.push(e), (e = e.left);
          return t;
        }
        hasNext() {
          return this.nodeStack.length > 0;
        }
        peek() {
          if (0 === this.nodeStack.length) return null;
          const e = this.nodeStack[this.nodeStack.length - 1];
          return { key: e.key, value: e.value };
        }
      }
      class Bo {
        constructor(e, t, n, r, i) {
          (this.key = e),
            (this.value = t),
            (this.color = null != n ? n : Bo.RED),
            (this.left = null != r ? r : Bo.EMPTY),
            (this.right = null != i ? i : Bo.EMPTY),
            (this.size = this.left.size + 1 + this.right.size);
        }
