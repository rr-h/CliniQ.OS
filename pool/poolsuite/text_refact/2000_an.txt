remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
        };
      }
      function B(e, t, n) {
        var r = e._modulesNamespaceMap[n];
        return r;
      }
      function $(e) {
        void 0 === e && (e = {});
        var t = e.collapsed;
        void 0 === t && (t = !0);
        var n = e.filter;
        void 0 === n &&
          (n = function (e, t, n) {
            return !0;
          });
        var r = e.transformer;
        void 0 === r &&
          (r = function (e) {
            return e;
          });
        var i = e.mutationTransformer;
        void 0 === i &&
          (i = function (e) {
            return e;
          });
        var o = e.actionFilter;
        void 0 === o &&
          (o = function (e, t) {
            return !0;
          });
        var s = e.actionTransformer;
        void 0 === s &&
          (s = function (e) {
            return e;
          });
        var a = e.logMutations;
        void 0 === a && (a = !0);
        var c = e.logActions;
        void 0 === c && (c = !0);
        var l = e.logger;
        return (
          void 0 === l && (l = console),
          function (e) {
            var h = u(e.state);
            'undefined' !== typeof l &&
              (a &&
                e.subscribe(function (e, o) {
                  var s = u(o);
                  if (n(e, h, s)) {
                    var a = G(),
                      c = i(e),
                      f = 'mutation ' + e.type + a;
                    q(l, f, t),
                      l.log('%c prev state', 'color: #9E9E9E; font-weight: bold', r(h)),
                      l.log('%c mutation', 'color: #03A9F4; font-weight: bold', c),
                      l.log('%c next state', 'color: #4CAF50; font-weight: bold', r(s)),
                      z(l);
                  }
                  h = s;
                }),
              c &&
                e.subscribeAction(function (e, n) {
                  if (o(e, n)) {
                    var r = G(),
                      i = s(e),
                      a = 'action ' + e.type + r;
                    q(l, a, t), l.log('%c action', 'color: #03A9F4; font-weight: bold', i), z(l);
                  }
                }));
          }
        );
      }
      function q(e, t, n) {
        var r = n ? e.groupCollapsed : e.group;
        try {
          r.call(e, t);
        } catch (i) {
          e.log(t);
        }
      }
      function z(e) {
        try {
          e.groupEnd();
        } catch (t) {
          e.log('—— log end ——');
        }
      }
      function G() {
        var e = new Date();
        return ' @ ' + H(e.getHours(), 2) + ':' + H(e.getMinutes(), 2) + ':' + H(e.getSeconds(), 2) + '.' + H(e.getMilliseconds(), 3);
      }
      function W(e, t) {
        return new Array(t + 1).join(e);
      }
      function H(e, t) {
        return W('0', t - e.toString().length) + e;
      }
      var K = {
        Store: y,
        install: R,
        version: '3.6.2',
        mapState: P,
        mapMutations: D,
        mapGetters: L,
        mapActions: j,
        createNamespacedHelpers: M,
        createLogger: $
      };
      t.ZP = K;
    },
    66006: (e, t, n) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 });
      var r = n(22275),
        i = o(r);
      function o(e) {
        return e && e.__esModule ? e : { default: e };
      }
      (t['default'] = {
        pauseVideo: { acceptableStates: [i.default.ENDED, i.default.PAUSED], stateChangeRequired: !1 },
        playVideo: { acceptableStates: [i.default.ENDED, i.default.PLAYING], stateChangeRequired: !1 },
        seekTo: { acceptableStates: [i.default.ENDED, i.default.PLAYING, i.default.PAUSED], stateChangeRequired: !0, timeout: 3e3 }
      }),
        (e.exports = t['default']);
    },
    89125: (e, t, n) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 });
      var r = n(11227),
        i = h(r),
        o = n(66006),
        s = h(o),
        a = n(65279),
        u = h(a),
        c = n(28255),
        l = h(c);
      function h(e) {
        return e && e.__esModule ? e : { default: e };
      }
      const f = (0, i.default)('youtube-player'),
        d = {
          proxyEvents: e => {
            const t = {};
            for (const n of u.default) {
              const r = 'on' + n.slice(0, 1).toUpperCase() + n.slice(1);
              t[r] = t => {
                f('event "%s"', r, t), e.trigger(n, t);
              };
            }
            return t;
          },
          promisifyPlayer: (e, t = !1) => {
            const n = {};
            for (const r of l.default)
              t && s.default[r]
                ? (n[r] = (...t) =>
                    e.then(e => {
                      const n = s.default[r],
                        i = e.getPlayerState(),
                        o = e[r].apply(e, t);
                      return n.stateChangeRequired || (Array.isArray(n.acceptableStates) && !n.acceptableStates.includes(i))
                        ? new Promise(t => {
                            const r = () => {
                              const i = e.getPlayerState();
                              let o;
                              'number' === typeof n.timeout &&
                                (o = setTimeout(() => {
                                  e.removeEventListener('onStateChange', r), t();
                                }, n.timeout)),
                                Array.isArray(n.acceptableStates) &&
                                  n.acceptableStates.includes(i) &&
                                  (e.removeEventListener('onStateChange', r), clearTimeout(o), t());
                            };
                            e.addEventListener('onStateChange', r);
                          }).then(() => o)
                        : o;
                    }))
                : (n[r] = (...t) => e.then(e => e[r].apply(e, t)));
            return n;
          }
        };
      (t['default'] = d), (e.exports = t['default']);
    },
    22275: (e, t) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t['default'] = { BUFFERING: 3, ENDED: 0, PAUSED: 2, PLAYING: 1, UNSTARTED: -1, VIDEO_CUED: 5 }),
        (e.exports = t['default']);
    },
    65279: (e, t) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t['default'] = ['ready', 'stateChange', 'playbackQualityChange', 'playbackRateChange', 'error', 'apiChange', 'volumeChange']),
        (e.exports = t['default']);
    },
    28255: (e, t) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t['default'] = [
          'cueVideoById',
          'loadVideoById',
          'cueVideoByUrl',
          'loadVideoByUrl',
          'playVideo',
          'pauseVideo',
          'stopVideo',
          'getVideoLoadedFraction',
          'cuePlaylist',
          'loadPlaylist',
          'nextVideo',
          'previousVideo',
          'playVideoAt',
          'setShuffle',
          'setLoop',
          'getPlaylist',
          'getPlaylistIndex',
          'setOption',
          'mute',
          'unMute',
          'isMuted',
          'setVolume',
          'getVolume',
          'seekTo',
          'getPlayerState',
          'getPlaybackRate',
          'setPlaybackRate',
          'getAvailablePlaybackRates',
          'getPlaybackQuality',
          'setPlaybackQuality',
          'getAvailableQualityLevels',
          'getCurrentTime',
          'getDuration',
          'removeEventListener',
          'getVideoUrl',
          'getVideoEmbedCode',
          'getOptions',
          'getOption',
          'addEventListener',
          'destroy',
          'setSize',
          'getIframe',
          'getSphericalProperties',
          'setSphericalProperties'
        ]),
        (e.exports = t['default']);
    },
    11062: (e, t, n) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 });
      var r = n(33988),
        i = c(r),
        o = n(89125),
        s = c(o),
        a = n(55900),
        u = c(a);
      function c(e) {
        return e && e.__esModule ? e : { default: e };
      }
      let l;
      (t['default'] = (e, t = {}, n = !1) => {
        const r = (0, i.default)();
        if ((l || (l = (0, u.default)(r)), t.events)) throw new Error('Event handlers cannot be overwritten.');
        if ('string' === typeof e && !document.getElementById(e)) throw new Error('Element "' + e + '" does not exist.');
        t.events = s.default.proxyEvents(r);
        const o = new Promise(n => {
            if ('object' === typeof e && e.playVideo instanceof Function) {
              const t = e;
              n(t);
            } else
              l.then(i => {
                const o = new i.Player(e, t);
                return (
                  r.on('ready', () => {
                    n(o);
                  }),
                  null
                );
              });
          }),
          a = s.default.promisifyPlayer(o, n);
        return (a.on = r.on), (a.off = r.off), a;
      }),
        (e.exports = t['default']);
    },
    55900: (e, t, n) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 });
      var r = n(49090),
        i = o(r);
      function o(e) {
        return e && e.__esModule ? e : { default: e };
      }
      (t['default'] = e => {
        const t = new Promise(t => {
          if (window.YT && window.YT.Player && window.YT.Player instanceof Function) return void t(window.YT);
          {
            const t = 'http:' === window.location.protocol ? 'http:' : 'https:';
            (0, i.default)(t + '//www.youtube.com/iframe_api', t => {
              t && e.trigger('error', t);
            });
          }
          const n = window.onYouTubeIframeAPIReady;
          window.onYouTubeIframeAPIReady = () => {
            n && n(), t(window.YT);
          };
        });
        return t;
      }),
        (e.exports = t['default']);
    },
    98180: (e, t, n) => {
      'use strict';
      n.d(t, { Z: () => v });
      var r = n(74444),
        i = n(8463),
        o = n(25816),
        s = n(53333);
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class a {
        constructor(e, t) {
          (this._delegate = e),
            (this.firebase = t),
            (0, o._addComponent)(e, new i.wA('app-compat', () => this, 'PUBLIC')),
            (this.container = e.container);
        }
        get automaticDataCollectionEnabled() {
          return this._delegate.automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(e) {
          this._delegate.automaticDataCollectionEnabled = e;
        }
        get name() {
          return this._delegate.name;
        }
        get options() {
          return this._delegate.options;
        }
        delete() {
          return new Promise(e => {
            this._delegate.checkDestroyed(), e();
          }).then(() => (this.firebase.INTERNAL.removeApp(this.name), (0, o.deleteApp)(this._delegate)));
        }
        _getService(e, t = o._DEFAULT_ENTRY_NAME) {
          var n;
          this._delegate.checkDestroyed();
          const r = this._delegate.container.getProvider(e);
          return (
            r.isInitialized() || 'EXPLICIT' !== (null === (n = r.getComponent()) || void 0 === n ? void 0 : n.instantiationMode) || r.initialize(),
            r.getImmediate({ identifier: t })
          );
        }
        _removeServiceInstance(e, t = o._DEFAULT_ENTRY_NAME) {
          this._delegate.container.getProvider(e).clearInstance(t);
        }
        _addComponent(e) {
          (0, o._addComponent)(this._delegate, e);
        }
        _addOrOverwriteComponent(e) {
          (0, o._addOrOverwriteComponent)(this._delegate, e);
        }
        toJSON() {
          return { name: this.name, automaticDataCollectionEnabled: this.automaticDataCollectionEnabled, options: this.options };
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const u = {
          ['no-app']: "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",
          ['invalid-app-argument']: 'firebase.{$appName}() takes either no argument or a Firebase App instance.'
        },
        c = new r.LL('app-compat', 'Firebase', u);
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function l(e) {
        const t = {},
          n = {
            __esModule: !0,
            initializeApp: a,
            app: s,
            registerVersion: o.registerVersion,
            setLogLevel: o.setLogLevel,
            onLog: o.onLog,
            apps: null,
            SDK_VERSION: o.SDK_VERSION,
            INTERNAL: { registerComponent: l, removeApp: i, useAsService: h, modularAPIs: o }
          };
        function i(e) {
          delete t[e];
        }
        function s(e) {
          if (((e = e || o._DEFAULT_ENTRY_NAME), !(0, r.r3)(t, e))) throw c.create('no-app', { appName: e });
          return t[e];
        }
        function a(i, s = {}) {
          const a = o.initializeApp(i, s);
          if ((0, r.r3)(t, a.name)) return t[a.name];
          const u = new e(a, n);
          return (t[a.name] = u), u;
        }
        function u() {
          return Object.keys(t).map(e => t[e]);
        }
        function l(t) {
          const i = t.name,
            a = i.replace('-compat', '');
          if (o._registerComponent(t) && 'PUBLIC' === t.type) {
            const o = (e = s()) => {
              if ('function' !== typeof e[a]) throw c.create('invalid-app-argument', { appName: i });
              return e[a]();
            };
            void 0 !== t.serviceProps && (0, r.ZB)(o, t.serviceProps),
              (n[a] = o),
              (e.prototype[a] = function (...e) {
                const n = this._getService.bind(this, i);
                return n.apply(this, t.multipleInstances ? e : []);
              });
          }
          return 'PUBLIC' === t.type ? n[a] : null;
        }
        function h(e, t) {
          if ('serverAuth' === t) return null;
          const n = t;
          return n;
        }
        return (n['default'] = n), Object.defineProperty(n, 'apps', { get: u }), (s['App'] = e), n;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function h() {
        const e = l(a);
        function t(t) {
          (0, r.ZB)(e, t);
        }
        return (
          (e.INTERNAL = Object.assign(Object.assign({}, e.INTERNAL), {
            createFirebaseNamespace: h,
            extendNamespace: t,
            createSubscribe: r.ne,
            ErrorFactory: r.LL,
            deepExtend: r.ZB
          })),
          e
        );
      }
      const f = h(),
        d = new s.Yd('@firebase/app-compat'),
        p = '@firebase/app-compat',
        g = '0.2.13';
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function m(e) {
        (0, o.registerVersion)(p, g, e);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ if ((0, r.jU)() && void 0 !== self.firebase) {
        d.warn('\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ');
        const e = self.firebase.SDK_VERSION;
        e &&
          e.indexOf('LITE') >= 0 &&
          d.warn(
            '\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    '
          );
      }
      const v = f;
      m();
    },
    25816: (e, t, n) => {
      'use strict';
      n.r(t),
        n.d(t, {
          FirebaseError: () => o.ZR,
          SDK_VERSION: () => ye,
          _DEFAULT_ENTRY_NAME: () => oe,
          _addComponent: () => ce,
          _addOrOverwriteComponent: () => le,
          _apps: () => ae,
          _clearComponents: () => pe,
          _components: () => ue,
          _getProvider: () => fe,
          _registerComponent: () => he,
          _removeServiceInstance: () => de,
          deleteApp: () => Ie,
          getApp: () => be,
          getApps: () => _e,
          initializeApp: () => we,
          onLog: () => Se,
          registerVersion: () => Ee,
          setLogLevel: () => Te
        });
      var r = n(8463),
        i = n(53333),
        o = n(74444);
      const s = (e, t) => t.some(t => e instanceof t);
      let a, u;
      function c() {
        return a || (a = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);
      }
      function l() {
        return u || (u = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);
      }
      const h = new WeakMap(),
        f = new WeakMap(),
        d = new WeakMap(),
        p = new WeakMap(),
        g = new WeakMap();
      function m(e) {
        const t = new Promise((t, n) => {
          const r = () => {
              e.removeEventListener('success', i), e.removeEventListener('error', o);
            },
            i = () => {
              t(I(e.result)), r();
            },
            o = () => {
              n(e.error), r();
            };
          e.addEventListener('success', i), e.addEventListener('error', o);
        });
        return (
          t
            .then(t => {
              t instanceof IDBCursor && h.set(t, e);
            })
            .catch(() => {}),
          g.set(t, e),
          t
        );
      }
      function v(e) {
        if (f.has(e)) return;
        const t = new Promise((t, n) => {
          const r = () => {
              e.removeEventListener('complete', i), e.removeEventListener('error', o), e.removeEventListener('abort', o);
            },
            i = () => {
              t(), r();
            },
            o = () => {
              n(e.error || new DOMException('AbortError', 'AbortError')), r();
            };
          e.addEventListener('complete', i), e.addEventListener('error', o), e.addEventListener('abort', o);
        });
        f.set(e, t);
      }
      let y = {
        get(e, t, n) {
          if (e instanceof IDBTransaction) {
            if ('done' === t) return f.get(e);
            if ('objectStoreNames' === t) return e.objectStoreNames || d.get(e);
            if ('store' === t) return n.objectStoreNames[1] ? void 0 : n.objectStore(n.objectStoreNames[0]);
          }
          return I(e[t]);
        },
        set(e, t, n) {
          return (e[t] = n), !0;
        },
        has(e, t) {
          return (e instanceof IDBTransaction && ('done' === t || 'store' === t)) || t in e;
        }
      };
      function w(e) {
        y = e(y);
      }
      function b(e) {
        return e !== IDBDatabase.prototype.transaction || 'objectStoreNames' in IDBTransaction.prototype
          ? l().includes(e)
            ? function (...t) {
                return e.apply(E(this), t), I(h.get(this));
              }
            : function (...t) {
                return I(e.apply(E(this), t));
              }
          : function (t, ...n) {
              const r = e.call(E(this), t, ...n);
              return d.set(r, t.sort ? t.sort() : [t]), I(r);
            };
      }
      function _(e) {
        return 'function' === typeof e ? b(e) : (e instanceof IDBTransaction && v(e), s(e, c()) ? new Proxy(e, y) : e);
      }
      function I(e) {
        if (e instanceof IDBRequest) return m(e);
        if (p.has(e)) return p.get(e);
        const t = _(e);
        return t !== e && (p.set(e, t), g.set(t, e)), t;
      }
      const E = e => g.get(e);
      function S(e, t, { blocked: n, upgrade: r, blocking: i, terminated: o } = {}) {
        const s = indexedDB.open(e, t),
          a = I(s);
        return (
          r &&
            s.addEventListener('upgradeneeded', e => {
              r(I(s.result), e.oldVersion, e.newVersion, I(s.transaction), e);
            }),
          n && s.addEventListener('blocked', e => n(e.oldVersion, e.newVersion, e)),
          a
            .then(e => {
              o && e.addEventListener('close', () => o()), i && e.addEventListener('versionchange', e => i(e.oldVersion, e.newVersion, e));
            })
            .catch(() => {}),
          a
        );
      }
      const T = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'],
        A = ['put', 'add', 'delete', 'clear'],
        x = new Map();
      function C(e, t) {
        if (!(e instanceof IDBDatabase) || t in e || 'string' !== typeof t) return;
        if (x.get(t)) return x.get(t);
        const n = t.replace(/FromIndex$/, ''),
          r = t !== n,
          i = A.includes(n);
        if (!(n in (r ? IDBIndex : IDBObjectStore).prototype) || (!i && !T.includes(n))) return;
        const o = async function (e, ...t) {
          const o = this.transaction(e, i ? 'readwrite' : 'readonly');
          let s = o.store;
          return r && (s = s.index(t.shift())), (await Promise.all([s[n](...t), i && o.done]))[0];
        };
        return x.set(t, o), o;
      }
      w(e => ({ ...e, get: (t, n, r) => C(t, n) || e.get(t, n, r), has: (t, n) => !!C(t, n) || e.has(t, n) }));
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class k {
        constructor(e) {
          this.container = e;
        }
        getPlatformInfoString() {
          const e = this.container.getProviders();
          return e
            .map(e => {
              if (O(e)) {
                const t = e.getImmediate();
                return `${t.library}/${t.version}`;
              }
              return null;
            })
            .filter(e => e)
            .join(' ');
        }
      }
      function O(e) {
        const t = e.getComponent();
        return 'VERSION' === (null === t || void 0 === t ? void 0 : t.type);
      }
      const N = '@firebase/app',
        R = '0.9.13',
        P = new i.Yd('@firebase/app'),
        D = '@firebase/app-compat',
        L = '@firebase/analytics-compat',
        j = '@firebase/analytics',
        M = '@firebase/app-check-compat',
        F = '@firebase/app-check',
        U = '@firebase/auth',
        V = '@firebase/auth-compat',
        B = '@firebase/database',
        $ = '@firebase/database-compat',
        q = '@firebase/functions',
        z = '@firebase/functions-compat',
        G = '@firebase/installations',
        W = '@firebase/installations-compat',
        H = '@firebase/messaging',
        K = '@firebase/messaging-compat',
        Q = '@firebase/performance',
        Y = '@firebase/performance-compat',
        X = '@firebase/remote-config',
        J = '@firebase/remote-config-compat',
        Z = '@firebase/storage',
        ee = '@firebase/storage-compat',
        te = '@firebase/firestore',
        ne = '@firebase/firestore-compat',
        re = 'firebase',
        ie = '9.23.0',
        oe = '[DEFAULT]',
        se = {
          [N]: 'fire-core',
          [D]: 'fire-core-compat',
          [j]: 'fire-analytics',
          [L]: 'fire-analytics-compat',
          [F]: 'fire-app-check',
          [M]: 'fire-app-check-compat',
          [U]: 'fire-auth',
          [V]: 'fire-auth-compat',
          [B]: 'fire-rtdb',
          [$]: 'fire-rtdb-compat',
          [q]: 'fire-fn',
          [z]: 'fire-fn-compat',
          [G]: 'fire-iid',
          [W]: 'fire-iid-compat',
          [H]: 'fire-fcm',
          [K]: 'fire-fcm-compat',
          [Q]: 'fire-perf',
          [Y]: 'fire-perf-compat',
          [X]: 'fire-rc',
          [J]: 'fire-rc-compat',
          [Z]: 'fire-gcs',
          [ee]: 'fire-gcs-compat',
          [te]: 'fire-fst',
          [ne]: 'fire-fst-compat',
          'fire-js': 'fire-js',
          [re]: 'fire-js-all'
        },
        ae = new Map(),
        ue = new Map();
      function ce(e, t) {
        try {
          e.container.addComponent(t);
        } catch (n) {
          P.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`, n);
        }
      }
      function le(e, t) {
        e.container.addOrOverwriteComponent(t);
      }
      function he(e) {
        const t = e.name;
        if (ue.has(t)) return P.debug(`There were multiple attempts to register component ${t}.`), !1;
        ue.set(t, e);
        for (const n of ae.values()) ce(n, e);
        return !0;
      }
      function fe(e, t) {
        const n = e.container.getProvider('heartbeat').getImmediate({ optional: !0 });
        return n && n.triggerHeartbeat(), e.container.getProvider(t);
      }
      function de(e, t, n = oe) {
        fe(e, t).clearInstance(n);
      }
      function pe() {
        ue.clear();
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ge = {
          ['no-app']: "No Firebase App '{$appName}' has been created - call initializeApp() first",
          ['bad-app-name']: "Illegal App name: '{$appName}",
          ['duplicate-app']: "Firebase App named '{$appName}' already exists with different options or config",
          ['app-deleted']: "Firebase App named '{$appName}' already deleted",
          ['no-options']: 'Need to provide options, when not being deployed to hosting via source.',
          ['invalid-app-argument']: 'firebase.{$appName}() takes either no argument or a Firebase App instance.',
          ['invalid-log-argument']: 'First argument to `onLog` must be null or a function.',
          ['idb-open']: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
          ['idb-get']: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
          ['idb-set']: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
          ['idb-delete']: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'
        },
        me = new o.LL('app', 'Firebase', ge);
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class ve {
        constructor(e, t, n) {
          (this._isDeleted = !1),
            (this._options = Object.assign({}, e)),
            (this._config = Object.assign({}, t)),
            (this._name = t.name),
            (this._automaticDataCollectionEnabled = t.automaticDataCollectionEnabled),
            (this._container = n),
            this.container.addComponent(new r.wA('app', () => this, 'PUBLIC'));
        }
        get automaticDataCollectionEnabled() {
          return this.checkDestroyed(), this._automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(e) {
          this.checkDestroyed(), (this._automaticDataCollectionEnabled = e);
        }
        get name() {
          return this.checkDestroyed(), this._name;
        }
        get options() {
          return this.checkDestroyed(), this._options;
        }
        get config() {
          return this.checkDestroyed(), this._config;
        }
        get container() {
          return this._container;
        }
        get isDeleted() {
          return this._isDeleted;
        }
        set isDeleted(e) {
          this._isDeleted = e;
        }
        checkDestroyed() {
          if (this.isDeleted) throw me.create('app-deleted', { appName: this._name });
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ye = ie;
      function we(e, t = {}) {
        let n = e;
        if ('object' !== typeof t) {
          const e = t;
          t = { name: e };
        }
        const i = Object.assign({ name: oe, automaticDataCollectionEnabled: !1 }, t),
          s = i.name;
        if ('string' !== typeof s || !s) throw me.create('bad-app-name', { appName: String(s) });
        if ((n || (n = (0, o.aH)()), !n)) throw me.create('no-options');
        const a = ae.get(s);
        if (a) {
          if ((0, o.vZ)(n, a.options) && (0, o.vZ)(i, a.config)) return a;
          throw me.create('duplicate-app', { appName: s });
        }
        const u = new r.H0(s);
        for (const r of ue.values()) u.addComponent(r);
        const c = new ve(n, i, u);
        return ae.set(s, c), c;
      }
      function be(e = oe) {
        const t = ae.get(e);
        if (!t && e === oe && (0, o.aH)()) return we();
        if (!t) throw me.create('no-app', { appName: e });
        return t;
      }
      function _e() {
        return Array.from(ae.values());
      }
      async function Ie(e) {
        const t = e.name;
        ae.has(t) && (ae.delete(t), await Promise.all(e.container.getProviders().map(e => e.delete())), (e.isDeleted = !0));
      }
      function Ee(e, t, n) {
        var i;
        let o = null !== (i = se[e]) && void 0 !== i ? i : e;
        n && (o += `-${n}`);
        const s = o.match(/\s|\//),
          a = t.match(/\s|\//);
        if (s || a) {
          const e = [`Unable to register library "${o}" with version "${t}":`];
          return (
            s && e.push(`library name "${o}" contains illegal characters (whitespace or "/")`),
            s && a && e.push('and'),
            a && e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),
            void P.warn(e.join(' '))
          );
        }
        he(new r.wA(`${o}-version`, () => ({ library: o, version: t }), 'VERSION'));
      }
      function Se(e, t) {
        if (null !== e && 'function' !== typeof e) throw me.create('invalid-log-argument');
        (0, i.Am)(e, t);
      }
      function Te(e) {
        (0, i.Ub)(e);
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Ae = 'firebase-heartbeat-database',
        xe = 1,
        Ce = 'firebase-heartbeat-store';
      let ke = null;
      function Oe() {
        return (
          ke ||
            (ke = S(Ae, xe, {
              upgrade: (e, t) => {
                switch (t) {
                  case 0:
                    e.createObjectStore(Ce);
                }
              }
            }).catch(e => {
              throw me.create('idb-open', { originalErrorMessage: e.message });
            })),
          ke
        );
      }
      async function Ne(e) {
        try {
          const t = await Oe(),
            n = await t.transaction(Ce).objectStore(Ce).get(Pe(e));
          return n;
        } catch (t) {
          if (t instanceof o.ZR) P.warn(t.message);
          else {
            const e = me.create('idb-get', { originalErrorMessage: null === t || void 0 === t ? void 0 : t.message });
            P.warn(e.message);
          }
        }
      }
      async function Re(e, t) {
        try {
          const n = await Oe(),
            r = n.transaction(Ce, 'readwrite'),
            i = r.objectStore(Ce);
          await i.put(t, Pe(e)), await r.done;
        } catch (n) {
          if (n instanceof o.ZR) P.warn(n.message);
          else {
            const e = me.create('idb-set', { originalErrorMessage: null === n || void 0 === n ? void 0 : n.message });
            P.warn(e.message);
          }
        }
      }
      function Pe(e) {
        return `${e.name}!${e.options.appId}`;
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const De = 1024,
        Le = 2592e6;
      class je {
        constructor(e) {
          (this.container = e), (this._heartbeatsCache = null);
          const t = this.container.getProvider('app').getImmediate();
          (this._storage = new Ue(t)), (this._heartbeatsCachePromise = this._storage.read().then(e => ((this._heartbeatsCache = e), e)));
        }
        async triggerHeartbeat() {
          const e = this.container.getProvider('platform-logger').getImmediate(),
            t = e.getPlatformInfoString(),
            n = Me();
          if (
            (null === this._heartbeatsCache && (this._heartbeatsCache = await this._heartbeatsCachePromise),
            this._heartbeatsCache.lastSentHeartbeatDate !== n && !this._heartbeatsCache.heartbeats.some(e => e.date === n))
          )
            return (
              this._heartbeatsCache.heartbeats.push({ date: n, agent: t }),
              (this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(e => {
                const t = new Date(e.date).valueOf(),
                  n = Date.now();
                return n - t <= Le;
              })),
              this._storage.overwrite(this._heartbeatsCache)
            );
        }
        async getHeartbeatsHeader() {
          if (
            (null === this._heartbeatsCache && (await this._heartbeatsCachePromise),
            null === this._heartbeatsCache || 0 === this._heartbeatsCache.heartbeats.length)
          )
            return '';
          const e = Me(),
            { heartbeatsToSend: t, unsentEntries: n } = Fe(this._heartbeatsCache.heartbeats),
            r = (0, o.L)(JSON.stringify({ version: 2, heartbeats: t }));
          return (
            (this._heartbeatsCache.lastSentHeartbeatDate = e),
            n.length > 0
              ? ((this._heartbeatsCache.heartbeats = n), await this._storage.overwrite(this._heartbeatsCache))
              : ((this._heartbeatsCache.heartbeats = []), this._storage.overwrite(this._heartbeatsCache)),
            r
          );
        }
      }
      function Me() {
        const e = new Date();
        return e.toISOString().substring(0, 10);
      }
      function Fe(e, t = De) {
        const n = [];
        let r = e.slice();
        for (const i of e) {
          const e = n.find(e => e.agent === i.agent);
          if (e) {
            if ((e.dates.push(i.date), Ve(n) > t)) {
              e.dates.pop();
              break;
            }
          } else if ((n.push({ agent: i.agent, dates: [i.date] }), Ve(n) > t)) {
            n.pop();
            break;
          }
          r = r.slice(1);
        }
        return { heartbeatsToSend: n, unsentEntries: r };
      }
      class Ue {
        constructor(e) {
          (this.app = e), (this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck());
        }
        async runIndexedDBEnvironmentCheck() {
          return (
            !!(0, o.hl)() &&
            (0, o.eu)()
              .then(() => !0)
              .catch(() => !1)
          );
        }
        async read() {
          const e = await this._canUseIndexedDBPromise;
          if (e) {
            const e = await Ne(this.app);
            return e || { heartbeats: [] };
          }
          return { heartbeats: [] };
        }
        async overwrite(e) {
          var t;
          const n = await this._canUseIndexedDBPromise;
          if (n) {
            const n = await this.read();
            return Re(this.app, {
              lastSentHeartbeatDate: null !== (t = e.lastSentHeartbeatDate) && void 0 !== t ? t : n.lastSentHeartbeatDate,
              heartbeats: e.heartbeats
            });
          }
        }
        async add(e) {
          var t;
          const n = await this._canUseIndexedDBPromise;
          if (n) {
            const n = await this.read();
            return Re(this.app, {
              lastSentHeartbeatDate: null !== (t = e.lastSentHeartbeatDate) && void 0 !== t ? t : n.lastSentHeartbeatDate,
              heartbeats: [...n.heartbeats, ...e.heartbeats]
            });
          }
        }
      }
      function Ve(e) {
        return (0, o.L)(JSON.stringify({ version: 2, heartbeats: e })).length;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Be(e) {
        he(new r.wA('platform-logger', e => new k(e), 'PRIVATE')),
          he(new r.wA('heartbeat', e => new je(e), 'PRIVATE')),
          Ee(N, R, e),
          Ee(N, R, 'esm2017'),
          Ee('fire-js', '');
      }
      Be('');
    },
    8463: (e, t, n) => {
      'use strict';
      n.d(t, { H0: () => c, wA: () => i });
      var r = n(74444);
      class i {
        constructor(e, t, n) {
          (this.name = e),
            (this.instanceFactory = t),
            (this.type = n),
            (this.multipleInstances = !1),
            (this.serviceProps = {}),
            (this.instantiationMode = 'LAZY'),
            (this.onInstanceCreated = null);
        }
        setInstantiationMode(e) {
          return (this.instantiationMode = e), this;
        }
        setMultipleInstances(e) {
          return (this.multipleInstances = e), this;
        }
        setServiceProps(e) {
          return (this.serviceProps = e), this;
        }
        setInstanceCreatedCallback(e) {
          return (this.onInstanceCreated = e), this;
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const o = '[DEFAULT]';
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class s {
        constructor(e, t) {
          (this.name = e),
            (this.container = t),
            (this.component = null),
            (this.instances = new Map()),
            (this.instancesDeferred = new Map()),
            (this.instancesOptions = new Map()),
            (this.onInitCallbacks = new Map());
        }
        get(e) {
          const t = this.normalizeInstanceIdentifier(e);
          if (!this.instancesDeferred.has(t)) {
            const e = new r.BH();
            if ((this.instancesDeferred.set(t, e), this.isInitialized(t) || this.shouldAutoInitialize()))
              try {
                const n = this.getOrInitializeService({ instanceIdentifier: t });
                n && e.resolve(n);
              } catch (n) {}
          }
          return this.instancesDeferred.get(t).promise;
        }
        getImmediate(e) {
          var t;
          const n = this.normalizeInstanceIdentifier(null === e || void 0 === e ? void 0 : e.identifier),
            r = null !== (t = null === e || void 0 === e ? void 0 : e.optional) && void 0 !== t && t;
          if (!this.isInitialized(n) && !this.shouldAutoInitialize()) {
            if (r) return null;
            throw Error(`Service ${this.name} is not available`);
          }
          try {
            return this.getOrInitializeService({ instanceIdentifier: n });
          } catch (i) {
            if (r) return null;
            throw i;
          }
        }
        getComponent() {
          return this.component;
        }
        setComponent(e) {
          if (e.name !== this.name) throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);
          if (this.component) throw Error(`Component for ${this.name} has already been provided`);
          if (((this.component = e), this.shouldAutoInitialize())) {
            if (u(e))
              try {
                this.getOrInitializeService({ instanceIdentifier: o });
              } catch (t) {}
            for (const [e, n] of this.instancesDeferred.entries()) {
              const r = this.normalizeInstanceIdentifier(e);
              try {
                const e = this.getOrInitializeService({ instanceIdentifier: r });
                n.resolve(e);
              } catch (t) {}
            }
          }
        }
        clearInstance(e = o) {
          this.instancesDeferred.delete(e), this.instancesOptions.delete(e), this.instances.delete(e);
        }
        async delete() {
          const e = Array.from(this.instances.values());
          await Promise.all([
            ...e.filter(e => 'INTERNAL' in e).map(e => e.INTERNAL.delete()),
            ...e.filter(e => '_delete' in e).map(e => e._delete())
          ]);
        }
        isComponentSet() {
          return null != this.component;
        }
        isInitialized(e = o) {
          return this.instances.has(e);
        }
        getOptions(e = o) {
          return this.instancesOptions.get(e) || {};
        }
        initialize(e = {}) {
          const { options: t = {} } = e,
            n = this.normalizeInstanceIdentifier(e.instanceIdentifier);
          if (this.isInitialized(n)) throw Error(`${this.name}(${n}) has already been initialized`);
          if (!this.isComponentSet()) throw Error(`Component ${this.name} has not been registered yet`);
          const r = this.getOrInitializeService({ instanceIdentifier: n, options: t });
          for (const [i, o] of this.instancesDeferred.entries()) {
            const e = this.normalizeInstanceIdentifier(i);
            n === e && o.resolve(r);
          }
          return r;
        }
        onInit(e, t) {
          var n;
          const r = this.normalizeInstanceIdentifier(t),
            i = null !== (n = this.onInitCallbacks.get(r)) && void 0 !== n ? n : new Set();
          i.add(e), this.onInitCallbacks.set(r, i);
          const o = this.instances.get(r);
          return (
            o && e(o, r),
            () => {
              i.delete(e);
            }
          );
        }
        invokeOnInitCallbacks(e, t) {
          const n = this.onInitCallbacks.get(t);
          if (n)
            for (const i of n)
              try {
                i(e, t);
              } catch (r) {}
        }
        getOrInitializeService({ instanceIdentifier: e, options: t = {} }) {
          let n = this.instances.get(e);
          if (
            !n &&
            this.component &&
            ((n = this.component.instanceFactory(this.container, { instanceIdentifier: a(e), options: t })),
            this.instances.set(e, n),
            this.instancesOptions.set(e, t),
            this.invokeOnInitCallbacks(n, e),
            this.component.onInstanceCreated)
          )
            try {
              this.component.onInstanceCreated(this.container, e, n);
            } catch (r) {}
          return n || null;
        }
        normalizeInstanceIdentifier(e = o) {
          return this.component ? (this.component.multipleInstances ? e : o) : e;
        }
        shouldAutoInitialize() {
          return !!this.component && 'EXPLICIT' !== this.component.instantiationMode;
        }
      }
      function a(e) {
        return e === o ? void 0 : e;
      }
      function u(e) {
        return 'EAGER' === e.instantiationMode;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class c {
        constructor(e) {
          (this.name = e), (this.providers = new Map());
        }
        addComponent(e) {
          const t = this.getProvider(e.name);
          if (t.isComponentSet()) throw new Error(`Component ${e.name} has already been registered with ${this.name}`);
          t.setComponent(e);
        }
        addOrOverwriteComponent(e) {
          const t = this.getProvider(e.name);
          t.isComponentSet() && this.providers.delete(e.name), this.addComponent(e);
        }
        getProvider(e) {
          if (this.providers.has(e)) return this.providers.get(e);
          const t = new s(e, this);
          return this.providers.set(e, t), t;
        }
        getProviders() {
          return Array.from(this.providers.values());
        }
      }
    },
    53333: (e, t, n) => {
      'use strict';
      n.d(t, { Am: () => h, Ub: () => l, Yd: () => c, in: () => i });
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const r = [];
      var i;
      (function (e) {
        (e[(e['DEBUG'] = 0)] = 'DEBUG'),
          (e[(e['VERBOSE'] = 1)] = 'VERBOSE'),
          (e[(e['INFO'] = 2)] = 'INFO'),
          (e[(e['WARN'] = 3)] = 'WARN'),
          (e[(e['ERROR'] = 4)] = 'ERROR'),
          (e[(e['SILENT'] = 5)] = 'SILENT');
      })(i || (i = {}));
      const o = { debug: i.DEBUG, verbose: i.VERBOSE, info: i.INFO, warn: i.WARN, error: i.ERROR, silent: i.SILENT },
        s = i.INFO,
        a = { [i.DEBUG]: 'log', [i.VERBOSE]: 'log', [i.INFO]: 'info', [i.WARN]: 'warn', [i.ERROR]: 'error' },
        u = (e, t, ...n) => {
          if (t < e.logLevel) return;
          const r = new Date().toISOString(),
            i = a[t];
          if (!i) throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);
          console[i](`[${r}]  ${e.name}:`, ...n);
        };
      class c {
        constructor(e) {
          (this.name = e), (this._logLevel = s), (this._logHandler = u), (this._userLogHandler = null), r.push(this);
        }
        get logLevel() {
          return this._logLevel;
        }
        set logLevel(e) {
          if (!(e in i)) throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);
          this._logLevel = e;
        }
        setLogLevel(e) {
          this._logLevel = 'string' === typeof e ? o[e] : e;
        }
        get logHandler() {
          return this._logHandler;
        }
        set logHandler(e) {
          if ('function' !== typeof e) throw new TypeError('Value assigned to `logHandler` must be a function');
          this._logHandler = e;
        }
        get userLogHandler() {
          return this._userLogHandler;
        }
        set userLogHandler(e) {
          this._userLogHandler = e;
        }
        debug(...e) {
          this._userLogHandler && this._userLogHandler(this, i.DEBUG, ...e), this._logHandler(this, i.DEBUG, ...e);
        }
        log(...e) {
          this._userLogHandler && this._userLogHandler(this, i.VERBOSE, ...e), this._logHandler(this, i.VERBOSE, ...e);
        }
        info(...e) {
          this._userLogHandler && this._userLogHandler(this, i.INFO, ...e), this._logHandler(this, i.INFO, ...e);
        }
        warn(...e) {
          this._userLogHandler && this._userLogHandler(this, i.WARN, ...e), this._logHandler(this, i.WARN, ...e);
        }
        error(...e) {
          this._userLogHandler && this._userLogHandler(this, i.ERROR, ...e), this._logHandler(this, i.ERROR, ...e);
        }
      }
      function l(e) {
        r.forEach(t => {
          t.setLogLevel(e);
        });
      }
      function h(e, t) {
        for (const n of r) {
          let r = null;
          t && t.level && (r = o[t.level]),
            (n.userLogHandler =
              null === e
                ? null
                : (t, n, ...o) => {
                    const s = o
                      .map(e => {
                        if (null == e) return null;
                        if ('string' === typeof e) return e;
                        if ('number' === typeof e || 'boolean' === typeof e) return e.toString();
                        if (e instanceof Error) return e.message;
                        try {
                          return JSON.stringify(e);
                        } catch (t) {
                          return null;
                        }
                      })
                      .filter(e => e)
                      .join(' ');
                    n >= (null !== r && void 0 !== r ? r : t.logLevel) && e({ level: i[n].toLowerCase(), message: s, args: o, type: t.name });
                  });
        }
      }
    },
    79865: (e, t, n) => {
      'use strict';
      var r = n(98180),
        i = n(25816),
        o = n(53333),
        s = n(74444),
        a = n(8463);
      const u = (e, t) => t.some(t => e instanceof t);
      let c, l;
      function h() {
        return c || (c = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);
      }
      function f() {
        return l || (l = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);
      }
      const d = new WeakMap(),
        p = new WeakMap(),
        g = new WeakMap(),
        m = new WeakMap(),
        v = new WeakMap();
      function y(e) {
        const t = new Promise((t, n) => {
          const r = () => {
              e.removeEventListener('success', i), e.removeEventListener('error', o);
            },
            i = () => {
              t(S(e.result)), r();
            },
            o = () => {
              n(e.error), r();
            };
          e.addEventListener('success', i), e.addEventListener('error', o);
        });
        return (
          t
            .then(t => {
              t instanceof IDBCursor && d.set(t, e);
            })
            .catch(() => {}),
          v.set(t, e),
          t
        );
      }
      function w(e) {
        if (p.has(e)) return;
        const t = new Promise((t, n) => {
          const r = () => {
              e.removeEventListener('complete', i), e.removeEventListener('error', o), e.removeEventListener('abort', o);
            },
            i = () => {
              t(), r();
            },
            o = () => {
              n(e.error || new DOMException('AbortError', 'AbortError')), r();
            };
          e.addEventListener('complete', i), e.addEventListener('error', o), e.addEventListener('abort', o);
        });
        p.set(e, t);
      }
      let b = {
        get(e, t, n) {
          if (e instanceof IDBTransaction) {
            if ('done' === t) return p.get(e);
            if ('objectStoreNames' === t) return e.objectStoreNames || g.get(e);
            if ('store' === t) return n.objectStoreNames[1] ? void 0 : n.objectStore(n.objectStoreNames[0]);
          }
          return S(e[t]);
        },
        set(e, t, n) {
          return (e[t] = n), !0;
        },
        has(e, t) {
          return (e instanceof IDBTransaction && ('done' === t || 'store' === t)) || t in e;
        }
      };
      function _(e) {
        b = e(b);
      }
      function I(e) {
        return e !== IDBDatabase.prototype.transaction || 'objectStoreNames' in IDBTransaction.prototype
          ? f().includes(e)
            ? function (...t) {
                return e.apply(T(this), t), S(d.get(this));
              }
            : function (...t) {
                return S(e.apply(T(this), t));
              }
          : function (t, ...n) {
              const r = e.call(T(this), t, ...n);
              return g.set(r, t.sort ? t.sort() : [t]), S(r);
            };
      }
      function E(e) {
        return 'function' === typeof e ? I(e) : (e instanceof IDBTransaction && w(e), u(e, h()) ? new Proxy(e, b) : e);
      }
      function S(e) {
        if (e instanceof IDBRequest) return y(e);
        if (m.has(e)) return m.get(e);
        const t = E(e);
        return t !== e && (m.set(e, t), v.set(t, e)), t;
      }
      const T = e => v.get(e);
      function A(e, t, { blocked: n, upgrade: r, blocking: i, terminated: o } = {}) {
        const s = indexedDB.open(e, t),
          a = S(s);
        return (
          r &&
            s.addEventListener('upgradeneeded', e => {
              r(S(s.result), e.oldVersion, e.newVersion, S(s.transaction));
            }),
          n && s.addEventListener('blocked', () => n()),
          a
            .then(e => {
              o && e.addEventListener('close', () => o()), i && e.addEventListener('versionchange', () => i());
            })
            .catch(() => {}),
          a
        );
      }
      const x = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'],
        C = ['put', 'add', 'delete', 'clear'],
        k = new Map();
      function O(e, t) {
        if (!(e instanceof IDBDatabase) || t in e || 'string' !== typeof t) return;
        if (k.get(t)) return k.get(t);
        const n = t.replace(/FromIndex$/, ''),
          r = t !== n,
          i = C.includes(n);
        if (!(n in (r ? IDBIndex : IDBObjectStore).prototype) || (!i && !x.includes(n))) return;
        const o = async function (e, ...t) {
          const o = this.transaction(e, i ? 'readwrite' : 'readonly');
          let s = o.store;
          return r && (s = s.index(t.shift())), (await Promise.all([s[n](...t), i && o.done]))[0];
        };
        return k.set(t, o), o;
      }
      _(e => ({ ...e, get: (t, n, r) => O(t, n) || e.get(t, n, r), has: (t, n) => !!O(t, n) || e.has(t, n) }));
      const N = '@firebase/installations',
        R = '0.6.4',
        P = 1e4,
        D = `w:${R}`,
        L = 'FIS_v2',
        j = 'https://firebaseinstallations.googleapis.com/v1',
        M = 36e5,
        F = 'installations',
        U = 'Installations',
        V = {
          ['missing-app-config-values']: 'Missing App configuration value: "{$valueName}"',
          ['not-registered']: 'Firebase Installation is not registered.',
          ['installation-not-found']: 'Firebase Installation not found.',
          ['request-failed']: '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
          ['app-offline']: 'Could not process request. Application offline.',
          ['delete-pending-registration']: "Can't delete installation while there is a pending registration request."
        },
        B = new s.LL(F, U, V);
      function $(e) {
        return e instanceof s.ZR && e.code.includes('request-failed');
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function q({ projectId: e }) {
        return `${j}/projects/${e}/installations`;
      }
      function z(e) {
        return { token: e.token, requestStatus: 2, expiresIn: Q(e.expiresIn), creationTime: Date.now() };
      }
      async function G(e, t) {
        const n = await t.json(),
          r = n.error;
        return B.create('request-failed', { requestName: e, serverCode: r.code, serverMessage: r.message, serverStatus: r.status });
      }
      function W({ apiKey: e }) {
        return new Headers({ 'Content-Type': 'application/json', Accept: 'application/json', 'x-goog-api-key': e });
      }
      function H(e, { refreshToken: t }) {
        const n = W(e);
        return n.append('Authorization', Y(t)), n;
      }
      async function K(e) {
        const t = await e();
        return t.status >= 500 && t.status < 600 ? e() : t;
      }
      function Q(e) {
        return Number(e.replace('s', '000'));
      }
      function Y(e) {
        return `${L} ${e}`;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function X({ appConfig: e, heartbeatServiceProvider: t }, { fid: n }) {
        const r = q(e),
          i = W(e),
          o = t.getImmediate({ optional: !0 });
        if (o) {
          const e = await o.getHeartbeatsHeader();
          e && i.append('x-firebase-client', e);
        }
        const s = { fid: n, authVersion: L, appId: e.appId, sdkVersion: D },
          a = { method: 'POST', headers: i, body: JSON.stringify(s) },
          u = await K(() => fetch(r, a));
        if (u.ok) {
          const e = await u.json(),
            t = { fid: e.fid || n, registrationStatus: 2, refreshToken: e.refreshToken, authToken: z(e.authToken) };
          return t;
        }
        throw await G('Create Installation', u);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function J(e) {
        return new Promise(t => {
          setTimeout(t, e);
        });
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Z(e) {
        const t = btoa(String.fromCharCode(...e));
        return t.replace(/\+/g, '-').replace(/\//g, '_');
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ee = /^[cdef][\w-]{21}$/,
        te = '';
      function ne() {
        try {
          const e = new Uint8Array(17),
            t = self.crypto || self.msCrypto;
          t.getRandomValues(e), (e[0] = 112 + (e[0] % 16));
          const n = re(e);
          return ee.test(n) ? n : te;
        } catch (e) {
          return te;
        }
      }
      function re(e) {
        const t = Z(e);
        return t.substr(0, 22);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function ie(e) {
        return `${e.appName}!${e.appId}`;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const oe = new Map();
      function se(e, t) {
        const n = ie(e);
        ae(n, t), ue(n, t);
      }
      function ae(e, t) {
        const n = oe.get(e);
        if (n) for (const r of n) r(t);
      }
      function ue(e, t) {
        const n = le();
        n && n.postMessage({ key: e, fid: t }), he();
      }
      let ce = null;
      function le() {
        return (
          !ce &&
            'BroadcastChannel' in self &&
            ((ce = new BroadcastChannel('[Firebase] FID Change')),
            (ce.onmessage = e => {
              ae(e.data.key, e.data.fid);
            })),
          ce
        );
      }
      function he() {
        0 === oe.size && ce && (ce.close(), (ce = null));
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const fe = 'firebase-installations-database',
        de = 1,
        pe = 'firebase-installations-store';
      let ge = null;
      function me() {
        return (
          ge ||
            (ge = A(fe, de, {
              upgrade: (e, t) => {
                switch (t) {
                  case 0:
                    e.createObjectStore(pe);
                }
              }
            })),
          ge
        );
      }
      async function ve(e, t) {
        const n = ie(e),
          r = await me(),
          i = r.transaction(pe, 'readwrite'),
          o = i.objectStore(pe),
          s = await o.get(n);
        return await o.put(t, n), await i.done, (s && s.fid === t.fid) || se(e, t.fid), t;
      }
      async function ye(e) {
        const t = ie(e),
          n = await me(),
          r = n.transaction(pe, 'readwrite');
        await r.objectStore(pe).delete(t), await r.done;
      }
      async function we(e, t) {
        const n = ie(e),
          r = await me(),
          i = r.transaction(pe, 'readwrite'),
          o = i.objectStore(pe),
          s = await o.get(n),
          a = t(s);
        return void 0 === a ? await o.delete(n) : await o.put(a, n), await i.done, !a || (s && s.fid === a.fid) || se(e, a.fid), a;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
