remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
            { uid: y, emailVerified: w, isAnonymous: b, providerData: _, stsTokenManager: I } = t;
          S(y && I, e, 'internal-error');
          const E = ae.fromJSON(this.name, I);
          S('string' === typeof y, e, 'internal-error'),
            ue(l, e.name),
            ue(h, e.name),
            S('boolean' === typeof w, e, 'internal-error'),
            S('boolean' === typeof b, e, 'internal-error'),
            ue(f, e.name),
            ue(d, e.name),
            ue(p, e.name),
            ue(g, e.name),
            ue(m, e.name),
            ue(v, e.name);
          const T = new ce({
            uid: y,
            auth: e,
            email: h,
            emailVerified: w,
            displayName: l,
            isAnonymous: b,
            photoURL: d,
            phoneNumber: f,
            tenantId: p,
            stsTokenManager: E,
            createdAt: m,
            lastLoginAt: v
          });
          return _ && Array.isArray(_) && (T.providerData = _.map(e => Object.assign({}, e))), g && (T._redirectEventId = g), T;
        }
        static async _fromIdTokenResponse(e, t, n = !1) {
          const r = new ae();
          r.updateFromServerResponse(t);
          const i = new ce({ uid: t.localId, auth: e, stsTokenManager: r, isAnonymous: n });
          return await ne(i), i;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const le = new Map();
      function he(e) {
        A(e instanceof Function, 'Expected a class definition');
        let t = le.get(e);
        return t ? (A(t instanceof e, 'Instance stored in cache mismatched with class'), t) : ((t = new e()), le.set(e, t), t);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class fe {
        constructor() {
          (this.type = 'NONE'), (this.storage = {});
        }
        async _isAvailable() {
          return !0;
        }
        async _set(e, t) {
          this.storage[e] = t;
        }
        async _get(e) {
          const t = this.storage[e];
          return void 0 === t ? null : t;
        }
        async _remove(e) {
          delete this.storage[e];
        }
        _addListener(e, t) {}
        _removeListener(e, t) {}
      }
      fe.type = 'NONE';
      const de = fe;
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function pe(e, t, n) {
        return `firebase:${e}:${t}:${n}`;
      }
      class ge {
        constructor(e, t, n) {
          (this.persistence = e), (this.auth = t), (this.userKey = n);
          const { config: r, name: i } = this.auth;
          (this.fullUserKey = pe(this.userKey, r.apiKey, i)),
            (this.fullPersistenceKey = pe('persistence', r.apiKey, i)),
            (this.boundEventHandler = t._onStorageEvent.bind(t)),
            this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
        }
        setCurrentUser(e) {
          return this.persistence._set(this.fullUserKey, e.toJSON());
        }
        async getCurrentUser() {
          const e = await this.persistence._get(this.fullUserKey);
          return e ? ce._fromJSON(this.auth, e) : null;
        }
        removeCurrentUser() {
          return this.persistence._remove(this.fullUserKey);
        }
        savePersistenceForRedirect() {
          return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
        }
        async setPersistence(e) {
          if (this.persistence === e) return;
          const t = await this.getCurrentUser();
          return await this.removeCurrentUser(), (this.persistence = e), t ? this.setCurrentUser(t) : void 0;
        }
        delete() {
          this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
        }
        static async create(e, t, n = 'authUser') {
          if (!t.length) return new ge(he(de), e, n);
          const r = (
            await Promise.all(
              t.map(async e => {
                if (await e._isAvailable()) return e;
              })
            )
          ).filter(e => e);
          let i = r[0] || he(de);
          const o = pe(n, e.config.apiKey, e.name);
          let s = null;
          for (const c of t)
            try {
              const t = await c._get(o);
              if (t) {
                const n = ce._fromJSON(e, t);
                c !== i && (s = n), (i = c);
                break;
              }
            } catch (u) {}
          const a = r.filter(e => e._shouldAllowMigration);
          return i._shouldAllowMigration && a.length
            ? ((i = a[0]),
              s && (await i._set(o, s.toJSON())),
              await Promise.all(
                t.map(async e => {
                  if (e !== i)
                    try {
                      await e._remove(o);
                    } catch (u) {}
                })
              ),
              new ge(i, e, n))
            : new ge(i, e, n);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function me(e) {
        const t = e.toLowerCase();
        if (t.includes('opera/') || t.includes('opr/') || t.includes('opios/')) return 'Opera';
        if (be(t)) return 'IEMobile';
        if (t.includes('msie') || t.includes('trident/')) return 'IE';
        if (t.includes('edge/')) return 'Edge';
        if (ve(t)) return 'Firefox';
        if (t.includes('silk/')) return 'Silk';
        if (Ie(t)) return 'Blackberry';
        if (Ee(t)) return 'Webos';
        if (ye(t)) return 'Safari';
        if ((t.includes('chrome/') || we(t)) && !t.includes('edge/')) return 'Chrome';
        if (_e(t)) return 'Android';
        {
          const t = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,
            n = e.match(t);
          if (2 === (null === n || void 0 === n ? void 0 : n.length)) return n[1];
        }
        return 'Other';
      }
      function ve(e = (0, i.z$)()) {
        return /firefox\//i.test(e);
      }
      function ye(e = (0, i.z$)()) {
        const t = e.toLowerCase();
        return t.includes('safari/') && !t.includes('chrome/') && !t.includes('crios/') && !t.includes('android');
      }
      function we(e = (0, i.z$)()) {
        return /crios\//i.test(e);
      }
      function be(e = (0, i.z$)()) {
        return /iemobile/i.test(e);
      }
      function _e(e = (0, i.z$)()) {
        return /android/i.test(e);
      }
      function Ie(e = (0, i.z$)()) {
        return /blackberry/i.test(e);
      }
      function Ee(e = (0, i.z$)()) {
        return /webos/i.test(e);
      }
      function Se(e = (0, i.z$)()) {
        return /iphone|ipad|ipod/i.test(e) || (/macintosh/i.test(e) && /mobile/i.test(e));
      }
      function Te(e = (0, i.z$)()) {
        return /(iPad|iPhone|iPod).*OS 7_\d/i.test(e) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(e);
      }
      function Ae(e = (0, i.z$)()) {
        var t;
        return Se(e) && !!(null === (t = window.navigator) || void 0 === t ? void 0 : t.standalone);
      }
      function xe() {
        return (0, i.w1)() && 10 === document.documentMode;
      }
      function Ce(e = (0, i.z$)()) {
        return Se(e) || _e(e) || Ee(e) || Ie(e) || /windows phone/i.test(e) || be(e);
      }
      function ke() {
        try {
          return !(!window || window === window.top);
        } catch (e) {
          return !1;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Oe(e, t = []) {
        let n;
        switch (e) {
          case 'Browser':
            n = me((0, i.z$)());
            break;
          case 'Worker':
            n = `${me((0, i.z$)())}-${e}`;
            break;
          default:
            n = e;
        }
        const r = t.length ? t.join(',') : 'FirebaseCore-web';
        return `${n}/JsCore/${o.SDK_VERSION}/${r}`;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ne(e) {
        return (await F(e, 'GET', '/v1/recaptchaParams')).recaptchaSiteKey || '';
      }
      async function Re(e, t) {
        return F(e, 'GET', '/v2/recaptchaConfig', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Pe(e) {
        return void 0 !== e && void 0 !== e.getResponse;
      }
      function De(e) {
        return void 0 !== e && void 0 !== e.enterprise;
      }
      class Le {
        constructor(e) {
          if (((this.siteKey = ''), (this.emailPasswordEnabled = !1), void 0 === e.recaptchaKey)) throw new Error('recaptchaKey undefined');
          (this.siteKey = e.recaptchaKey.split('/')[3]),
            (this.emailPasswordEnabled = e.recaptchaEnforcementState.some(
              e => 'EMAIL_PASSWORD_PROVIDER' === e.provider && 'OFF' !== e.enforcementState
            ));
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function je() {
        var e, t;
        return null !== (t = null === (e = document.getElementsByTagName('head')) || void 0 === e ? void 0 : e[0]) && void 0 !== t ? t : document;
      }
      function Me(e) {
        return new Promise((t, n) => {
          const r = document.createElement('script');
          r.setAttribute('src', e),
            (r.onload = t),
            (r.onerror = e => {
              const t = b('internal-error');
              (t.customData = e), n(t);
            }),
            (r.type = 'text/javascript'),
            (r.charset = 'UTF-8'),
            je().appendChild(r);
        });
      }
      function Fe(e) {
        return `__${e}${Math.floor(1e6 * Math.random())}`;
      }
      const Ue = 'https://www.google.com/recaptcha/enterprise.js?render=',
        Ve = 'recaptcha-enterprise',
        Be = 'NO_RECAPTCHA';
      class $e {
        constructor(e) {
          (this.type = Ve), (this.auth = We(e));
        }
        async verify(e = 'verify', t = !1) {
          async function n(e) {
            if (!t) {
              if (null == e.tenantId && null != e._agentRecaptchaConfig) return e._agentRecaptchaConfig.siteKey;
              if (null != e.tenantId && void 0 !== e._tenantRecaptchaConfigs[e.tenantId]) return e._tenantRecaptchaConfigs[e.tenantId].siteKey;
            }
            return new Promise(async (t, n) => {
              Re(e, { clientType: 'CLIENT_TYPE_WEB', version: 'RECAPTCHA_ENTERPRISE' })
                .then(r => {
                  if (void 0 !== r.recaptchaKey) {
                    const n = new Le(r);
                    return null == e.tenantId ? (e._agentRecaptchaConfig = n) : (e._tenantRecaptchaConfigs[e.tenantId] = n), t(n.siteKey);
                  }
                  n(new Error('recaptcha Enterprise site key undefined'));
                })
                .catch(e => {
                  n(e);
                });
            });
          }
          function r(t, n, r) {
            const i = window.grecaptcha;
            De(i)
              ? i.enterprise.ready(() => {
                  i.enterprise
                    .execute(t, { action: e })
                    .then(e => {
                      n(e);
                    })
                    .catch(() => {
                      n(Be);
                    });
                })
              : r(Error('No reCAPTCHA enterprise script loaded.'));
          }
          return new Promise((e, i) => {
            n(this.auth)
              .then(n => {
                if (!t && De(window.grecaptcha)) r(n, e, i);
                else {
                  if ('undefined' === typeof window) return void i(new Error('RecaptchaVerifier is only supported in browser'));
                  Me(Ue + n)
                    .then(() => {
                      r(n, e, i);
                    })
                    .catch(e => {
                      i(e);
                    });
                }
              })
              .catch(e => {
                i(e);
              });
          });
        }
      }
      async function qe(e, t, n, r = !1) {
        const i = new $e(e);
        let o;
        try {
          o = await i.verify(n);
        } catch (a) {
          o = await i.verify(n, !0);
        }
        const s = Object.assign({}, t);
        return (
          r ? Object.assign(s, { captchaResp: o }) : Object.assign(s, { captchaResponse: o }),
          Object.assign(s, { clientType: 'CLIENT_TYPE_WEB' }),
          Object.assign(s, { recaptchaVersion: 'RECAPTCHA_ENTERPRISE' }),
          s
        );
      }
      /**
       * @license
       * Copyright 2022 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ze {
        constructor(e) {
          (this.auth = e), (this.queue = []);
        }
        pushCallback(e, t) {
          const n = t =>
            new Promise((n, r) => {
              try {
                const r = e(t);
                n(r);
              } catch (i) {
                r(i);
              }
            });
          (n.onAbort = t), this.queue.push(n);
          const r = this.queue.length - 1;
          return () => {
            this.queue[r] = () => Promise.resolve();
          };
        }
        async runMiddleware(e) {
          if (this.auth.currentUser === e) return;
          const t = [];
          try {
            for (const n of this.queue) await n(e), n.onAbort && t.push(n.onAbort);
          } catch (n) {
            t.reverse();
            for (const e of t)
              try {
                e();
              } catch (r) {}
            throw this.auth._errorFactory.create('login-blocked', { originalMessage: null === n || void 0 === n ? void 0 : n.message });
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Ge {
        constructor(e, t, n, r) {
          (this.app = e),
            (this.heartbeatServiceProvider = t),
            (this.appCheckServiceProvider = n),
            (this.config = r),
            (this.currentUser = null),
            (this.emulatorConfig = null),
            (this.operations = Promise.resolve()),
            (this.authStateSubscription = new He(this)),
            (this.idTokenSubscription = new He(this)),
            (this.beforeStateQueue = new ze(this)),
            (this.redirectUser = null),
            (this.isProactiveRefreshEnabled = !1),
            (this._canInitEmulator = !0),
            (this._isInitialized = !1),
            (this._deleted = !1),
            (this._initializationPromise = null),
            (this._popupRedirectResolver = null),
            (this._errorFactory = g),
            (this._agentRecaptchaConfig = null),
            (this._tenantRecaptchaConfigs = {}),
            (this.lastNotifiedUid = void 0),
            (this.languageCode = null),
            (this.tenantId = null),
            (this.settings = { appVerificationDisabledForTesting: !1 }),
            (this.frameworks = []),
            (this.name = e.name),
            (this.clientVersion = r.sdkClientVersion);
        }
        _initializeWithPersistence(e, t) {
          return (
            t && (this._popupRedirectResolver = he(t)),
            (this._initializationPromise = this.queue(async () => {
              var n, r;
              if (!this._deleted && ((this.persistenceManager = await ge.create(this, e)), !this._deleted)) {
                if (null === (n = this._popupRedirectResolver) || void 0 === n ? void 0 : n._shouldInitProactively)
                  try {
                    await this._popupRedirectResolver._initialize(this);
                  } catch (i) {}
                await this.initializeCurrentUser(t),
                  (this.lastNotifiedUid = (null === (r = this.currentUser) || void 0 === r ? void 0 : r.uid) || null),
                  this._deleted || (this._isInitialized = !0);
              }
            })),
            this._initializationPromise
          );
        }
        async _onStorageEvent() {
          if (this._deleted) return;
          const e = await this.assertedPersistence.getCurrentUser();
          return this.currentUser || e
            ? this.currentUser && e && this.currentUser.uid === e.uid
              ? (this._currentUser._assign(e), void (await this.currentUser.getIdToken()))
              : void (await this._updateCurrentUser(e, !0))
            : void 0;
        }
        async initializeCurrentUser(e) {
          var t;
          const n = await this.assertedPersistence.getCurrentUser();
          let r = n,
            i = !1;
          if (e && this.config.authDomain) {
            await this.getOrInitRedirectPersistenceManager();
            const n = null === (t = this.redirectUser) || void 0 === t ? void 0 : t._redirectEventId,
              o = null === r || void 0 === r ? void 0 : r._redirectEventId,
              s = await this.tryRedirectSignIn(e);
            (n && n !== o) || !(null === s || void 0 === s ? void 0 : s.user) || ((r = s.user), (i = !0));
          }
          if (!r) return this.directlySetCurrentUser(null);
          if (!r._redirectEventId) {
            if (i)
              try {
                await this.beforeStateQueue.runMiddleware(r);
              } catch (o) {
                (r = n), this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(o));
              }
            return r ? this.reloadAndSetCurrentUserOrClear(r) : this.directlySetCurrentUser(null);
          }
          return (
            S(this._popupRedirectResolver, this, 'argument-error'),
            await this.getOrInitRedirectPersistenceManager(),
            this.redirectUser && this.redirectUser._redirectEventId === r._redirectEventId
              ? this.directlySetCurrentUser(r)
              : this.reloadAndSetCurrentUserOrClear(r)
          );
        }
        async tryRedirectSignIn(e) {
          let t = null;
          try {
            t = await this._popupRedirectResolver._completeRedirectFn(this, e, !0);
          } catch (n) {
            await this._setRedirectUser(null);
          }
          return t;
        }
        async reloadAndSetCurrentUserOrClear(e) {
          try {
            await ne(e);
          } catch (t) {
            if ('auth/network-request-failed' !== (null === t || void 0 === t ? void 0 : t.code)) return this.directlySetCurrentUser(null);
          }
          return this.directlySetCurrentUser(e);
        }
        useDeviceLanguage() {
          this.languageCode = N();
        }
        async _delete() {
          this._deleted = !0;
        }
        async updateCurrentUser(e) {
          const t = e ? (0, i.m9)(e) : null;
          return t && S(t.auth.config.apiKey === this.config.apiKey, this, 'invalid-user-token'), this._updateCurrentUser(t && t._clone(this));
        }
        async _updateCurrentUser(e, t = !1) {
          if (!this._deleted)
            return (
              e && S(this.tenantId === e.tenantId, this, 'tenant-id-mismatch'),
              t || (await this.beforeStateQueue.runMiddleware(e)),
              this.queue(async () => {
                await this.directlySetCurrentUser(e), this.notifyAuthListeners();
              })
            );
        }
        async signOut() {
          return (
            await this.beforeStateQueue.runMiddleware(null),
            (this.redirectPersistenceManager || this._popupRedirectResolver) && (await this._setRedirectUser(null)),
            this._updateCurrentUser(null, !0)
          );
        }
        setPersistence(e) {
          return this.queue(async () => {
            await this.assertedPersistence.setPersistence(he(e));
          });
        }
        async initializeRecaptchaConfig() {
          const e = await Re(this, { clientType: 'CLIENT_TYPE_WEB', version: 'RECAPTCHA_ENTERPRISE' }),
            t = new Le(e);
          if (
            (null == this.tenantId ? (this._agentRecaptchaConfig = t) : (this._tenantRecaptchaConfigs[this.tenantId] = t), t.emailPasswordEnabled)
          ) {
            const e = new $e(this);
            e.verify();
          }
        }
        _getRecaptchaConfig() {
          return null == this.tenantId ? this._agentRecaptchaConfig : this._tenantRecaptchaConfigs[this.tenantId];
        }
        _getPersistence() {
          return this.assertedPersistence.persistence.type;
        }
        _updateErrorMap(e) {
          this._errorFactory = new i.LL('auth', 'Firebase', e());
        }
        onAuthStateChanged(e, t, n) {
          return this.registerStateListener(this.authStateSubscription, e, t, n);
        }
        beforeAuthStateChanged(e, t) {
          return this.beforeStateQueue.pushCallback(e, t);
        }
        onIdTokenChanged(e, t, n) {
          return this.registerStateListener(this.idTokenSubscription, e, t, n);
        }
        toJSON() {
          var e;
          return {
            apiKey: this.config.apiKey,
            authDomain: this.config.authDomain,
            appName: this.name,
            currentUser: null === (e = this._currentUser) || void 0 === e ? void 0 : e.toJSON()
          };
        }
        async _setRedirectUser(e, t) {
          const n = await this.getOrInitRedirectPersistenceManager(t);
          return null === e ? n.removeCurrentUser() : n.setCurrentUser(e);
        }
        async getOrInitRedirectPersistenceManager(e) {
          if (!this.redirectPersistenceManager) {
            const t = (e && he(e)) || this._popupRedirectResolver;
            S(t, this, 'argument-error'),
              (this.redirectPersistenceManager = await ge.create(this, [he(t._redirectPersistence)], 'redirectUser')),
              (this.redirectUser = await this.redirectPersistenceManager.getCurrentUser());
          }
          return this.redirectPersistenceManager;
        }
        async _redirectUserForId(e) {
          var t, n;
          return (
            this._isInitialized && (await this.queue(async () => {})),
            (null === (t = this._currentUser) || void 0 === t ? void 0 : t._redirectEventId) === e
              ? this._currentUser
              : (null === (n = this.redirectUser) || void 0 === n ? void 0 : n._redirectEventId) === e
                ? this.redirectUser
                : null
          );
        }
        async _persistUserIfCurrent(e) {
          if (e === this.currentUser) return this.queue(async () => this.directlySetCurrentUser(e));
        }
        _notifyListenersIfCurrent(e) {
          e === this.currentUser && this.notifyAuthListeners();
        }
        _key() {
          return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
        }
        _startProactiveRefresh() {
          (this.isProactiveRefreshEnabled = !0), this.currentUser && this._currentUser._startProactiveRefresh();
        }
        _stopProactiveRefresh() {
          (this.isProactiveRefreshEnabled = !1), this.currentUser && this._currentUser._stopProactiveRefresh();
        }
        get _currentUser() {
          return this.currentUser;
        }
        notifyAuthListeners() {
          var e, t;
          if (!this._isInitialized) return;
          this.idTokenSubscription.next(this.currentUser);
          const n = null !== (t = null === (e = this.currentUser) || void 0 === e ? void 0 : e.uid) && void 0 !== t ? t : null;
          this.lastNotifiedUid !== n && ((this.lastNotifiedUid = n), this.authStateSubscription.next(this.currentUser));
        }
        registerStateListener(e, t, n, r) {
          if (this._deleted) return () => {};
          const i = 'function' === typeof t ? t : t.next.bind(t),
            o = this._isInitialized ? Promise.resolve() : this._initializationPromise;
          return S(o, this, 'internal-error'), o.then(() => i(this.currentUser)), 'function' === typeof t ? e.addObserver(t, n, r) : e.addObserver(t);
        }
        async directlySetCurrentUser(e) {
          this.currentUser && this.currentUser !== e && this._currentUser._stopProactiveRefresh(),
            e && this.isProactiveRefreshEnabled && e._startProactiveRefresh(),
            (this.currentUser = e),
            e ? await this.assertedPersistence.setCurrentUser(e) : await this.assertedPersistence.removeCurrentUser();
        }
        queue(e) {
          return (this.operations = this.operations.then(e, e)), this.operations;
        }
        get assertedPersistence() {
          return S(this.persistenceManager, this, 'internal-error'), this.persistenceManager;
        }
        _logFramework(e) {
          e &&
            !this.frameworks.includes(e) &&
            (this.frameworks.push(e), this.frameworks.sort(), (this.clientVersion = Oe(this.config.clientPlatform, this._getFrameworks())));
        }
        _getFrameworks() {
          return this.frameworks;
        }
        async _getAdditionalHeaders() {
          var e;
          const t = { ['X-Client-Version']: this.clientVersion };
          this.app.options.appId && (t['X-Firebase-gmpid'] = this.app.options.appId);
          const n = await (null === (e = this.heartbeatServiceProvider.getImmediate({ optional: !0 })) || void 0 === e
            ? void 0
            : e.getHeartbeatsHeader());
          n && (t['X-Firebase-Client'] = n);
          const r = await this._getAppCheckToken();
          return r && (t['X-Firebase-AppCheck'] = r), t;
        }
        async _getAppCheckToken() {
          var e;
          const t = await (null === (e = this.appCheckServiceProvider.getImmediate({ optional: !0 })) || void 0 === e ? void 0 : e.getToken());
          return (
            (null === t || void 0 === t ? void 0 : t.error) && v(`Error while retrieving App Check token: ${t.error}`),
            null === t || void 0 === t ? void 0 : t.token
          );
        }
      }
      function We(e) {
        return (0, i.m9)(e);
      }
      class He {
        constructor(e) {
          (this.auth = e), (this.observer = null), (this.addObserver = (0, i.ne)(e => (this.observer = e)));
        }
        get next() {
          return S(this.observer, this.auth, 'internal-error'), this.observer.next.bind(this.observer);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Ke(e, t) {
        const n = (null === t || void 0 === t ? void 0 : t.persistence) || [],
          r = (Array.isArray(n) ? n : [n]).map(he);
        (null === t || void 0 === t ? void 0 : t.errorMap) && e._updateErrorMap(t.errorMap),
          e._initializeWithPersistence(r, null === t || void 0 === t ? void 0 : t.popupRedirectResolver);
      }
      function Qe(e, t, n) {
        const r = We(e);
        S(r._canInitEmulator, r, 'emulator-config-failed'), S(/^https?:\/\//.test(t), r, 'invalid-emulator-scheme');
        const i = !!(null === n || void 0 === n ? void 0 : n.disableWarnings),
          o = Ye(t),
          { host: s, port: a } = Xe(t),
          u = null === a ? '' : `:${a}`;
        (r.config.emulator = { url: `${o}//${s}${u}/` }),
          (r.settings.appVerificationDisabledForTesting = !0),
          (r.emulatorConfig = Object.freeze({ host: s, port: a, protocol: o.replace(':', ''), options: Object.freeze({ disableWarnings: i }) })),
          i || Ze();
      }
      function Ye(e) {
        const t = e.indexOf(':');
        return t < 0 ? '' : e.substr(0, t + 1);
      }
      function Xe(e) {
        const t = Ye(e),
          n = /(\/\/)?([^?#/]+)/.exec(e.substr(t.length));
        if (!n) return { host: '', port: null };
        const r = n[2].split('@').pop() || '',
          i = /^(\[[^\]]+\])(:|$)/.exec(r);
        if (i) {
          const e = i[1];
          return { host: e, port: Je(r.substr(e.length + 1)) };
        }
        {
          const [e, t] = r.split(':');
          return { host: e, port: Je(t) };
        }
      }
      function Je(e) {
        if (!e) return null;
        const t = Number(e);
        return isNaN(t) ? null : t;
      }
      function Ze() {
        function e() {
          const e = document.createElement('p'),
            t = e.style;
          (e.innerText = 'Running in emulator mode. Do not use with production credentials.'),
            (t.position = 'fixed'),
            (t.width = '100%'),
            (t.backgroundColor = '#ffffff'),
            (t.border = '.1em solid #000000'),
            (t.color = '#b50000'),
            (t.bottom = '0px'),
            (t.left = '0px'),
            (t.margin = '0px'),
            (t.zIndex = '10000'),
            (t.textAlign = 'center'),
            e.classList.add('firebase-emulator-warning'),
            document.body.appendChild(e);
        }
        'undefined' !== typeof console &&
          'function' === typeof console.info &&
          console.info(
            'WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.'
          ),
          'undefined' !== typeof window &&
            'undefined' !== typeof document &&
            ('loading' === document.readyState ? window.addEventListener('DOMContentLoaded', e) : e());
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class et {
        constructor(e, t) {
          (this.providerId = e), (this.signInMethod = t);
        }
        toJSON() {
          return T('not implemented');
        }
        _getIdTokenResponse(e) {
          return T('not implemented');
        }
        _linkToIdToken(e, t) {
          return T('not implemented');
        }
        _getReauthenticationResolver(e) {
          return T('not implemented');
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function tt(e, t) {
        return F(e, 'POST', '/v1/accounts:resetPassword', M(e, t));
      }
      async function nt(e, t) {
        return F(e, 'POST', '/v1/accounts:update', t);
      }
      async function rt(e, t) {
        return F(e, 'POST', '/v1/accounts:update', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function it(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithPassword', M(e, t));
      }
      async function ot(e, t) {
        return F(e, 'POST', '/v1/accounts:sendOobCode', M(e, t));
      }
      async function st(e, t) {
        return ot(e, t);
      }
      async function at(e, t) {
        return ot(e, t);
      }
      async function ut(e, t) {
        return ot(e, t);
      }
      async function ct(e, t) {
        return ot(e, t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function lt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithEmailLink', M(e, t));
      }
      async function ht(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithEmailLink', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ft extends et {
        constructor(e, t, n, r = null) {
          super('password', n), (this._email = e), (this._password = t), (this._tenantId = r);
        }
        static _fromEmailAndPassword(e, t) {
          return new ft(e, t, 'password');
        }
        static _fromEmailAndCode(e, t, n = null) {
          return new ft(e, t, 'emailLink', n);
        }
        toJSON() {
          return { email: this._email, password: this._password, signInMethod: this.signInMethod, tenantId: this._tenantId };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e;
          if ((null === t || void 0 === t ? void 0 : t.email) && (null === t || void 0 === t ? void 0 : t.password)) {
            if ('password' === t.signInMethod) return this._fromEmailAndPassword(t.email, t.password);
            if ('emailLink' === t.signInMethod) return this._fromEmailAndCode(t.email, t.password, t.tenantId);
          }
          return null;
        }
        async _getIdTokenResponse(e) {
          var t;
          switch (this.signInMethod) {
            case 'password':
              const n = { returnSecureToken: !0, email: this._email, password: this._password, clientType: 'CLIENT_TYPE_WEB' };
              if (null === (t = e._getRecaptchaConfig()) || void 0 === t ? void 0 : t.emailPasswordEnabled) {
                const t = await qe(e, n, 'signInWithPassword');
                return it(e, t);
              }
              return it(e, n).catch(async t => {
                if ('auth/missing-recaptcha-token' === t.code) {
                  console.log(
                    'Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.'
                  );
                  const t = await qe(e, n, 'signInWithPassword');
                  return it(e, t);
                }
                return Promise.reject(t);
              });
            case 'emailLink':
              return lt(e, { email: this._email, oobCode: this._password });
            default:
              w(e, 'internal-error');
          }
        }
        async _linkToIdToken(e, t) {
          switch (this.signInMethod) {
            case 'password':
              return nt(e, { idToken: t, returnSecureToken: !0, email: this._email, password: this._password });
            case 'emailLink':
              return ht(e, { idToken: t, email: this._email, oobCode: this._password });
            default:
              w(e, 'internal-error');
          }
        }
        _getReauthenticationResolver(e) {
          return this._getIdTokenResponse(e);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function dt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithIdp', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const pt = 'http://localhost';
      class gt extends et {
        constructor() {
          super(...arguments), (this.pendingToken = null);
        }
        static _fromParams(e) {
          const t = new gt(e.providerId, e.signInMethod);
          return (
            e.idToken || e.accessToken
              ? (e.idToken && (t.idToken = e.idToken),
                e.accessToken && (t.accessToken = e.accessToken),
                e.nonce && !e.pendingToken && (t.nonce = e.nonce),
                e.pendingToken && (t.pendingToken = e.pendingToken))
              : e.oauthToken && e.oauthTokenSecret
                ? ((t.accessToken = e.oauthToken), (t.secret = e.oauthTokenSecret))
                : w('argument-error'),
            t
          );
        }
        toJSON() {
          return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
          };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e,
            { providerId: n, signInMethod: r } = t,
            i = s(t, ['providerId', 'signInMethod']);
          if (!n || !r) return null;
          const o = new gt(n, r);
          return (
            (o.idToken = i.idToken || void 0),
            (o.accessToken = i.accessToken || void 0),
            (o.secret = i.secret),
            (o.nonce = i.nonce),
            (o.pendingToken = i.pendingToken || null),
            o
          );
        }
        _getIdTokenResponse(e) {
          const t = this.buildRequest();
          return dt(e, t);
        }
        _linkToIdToken(e, t) {
          const n = this.buildRequest();
          return (n.idToken = t), dt(e, n);
        }
        _getReauthenticationResolver(e) {
          const t = this.buildRequest();
          return (t.autoCreate = !1), dt(e, t);
        }
        buildRequest() {
          const e = { requestUri: pt, returnSecureToken: !0 };
          if (this.pendingToken) e.pendingToken = this.pendingToken;
          else {
            const t = {};
            this.idToken && (t['id_token'] = this.idToken),
              this.accessToken && (t['access_token'] = this.accessToken),
              this.secret && (t['oauth_token_secret'] = this.secret),
              (t['providerId'] = this.providerId),
              this.nonce && !this.pendingToken && (t['nonce'] = this.nonce),
              (e.postBody = (0, i.xO)(t));
          }
          return e;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function mt(e, t) {
        return F(e, 'POST', '/v1/accounts:sendVerificationCode', M(e, t));
      }
      async function vt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, t));
      }
      async function yt(e, t) {
        const n = await V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, t));
        if (n.temporaryProof) throw q(e, 'account-exists-with-different-credential', n);
        return n;
      }
      const wt = { ['USER_NOT_FOUND']: 'user-not-found' };
      async function bt(e, t) {
        const n = Object.assign(Object.assign({}, t), { operation: 'REAUTH' });
        return V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, n), wt);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class _t extends et {
        constructor(e) {
          super('phone', 'phone'), (this.params = e);
        }
        static _fromVerification(e, t) {
          return new _t({ verificationId: e, verificationCode: t });
        }
        static _fromTokenResponse(e, t) {
          return new _t({ phoneNumber: e, temporaryProof: t });
        }
        _getIdTokenResponse(e) {
          return vt(e, this._makeVerificationRequest());
        }
        _linkToIdToken(e, t) {
          return yt(e, Object.assign({ idToken: t }, this._makeVerificationRequest()));
        }
        _getReauthenticationResolver(e) {
          return bt(e, this._makeVerificationRequest());
        }
        _makeVerificationRequest() {
          const { temporaryProof: e, phoneNumber: t, verificationId: n, verificationCode: r } = this.params;
          return e && t ? { temporaryProof: e, phoneNumber: t } : { sessionInfo: n, code: r };
        }
        toJSON() {
          const e = { providerId: this.providerId };
          return (
            this.params.phoneNumber && (e.phoneNumber = this.params.phoneNumber),
            this.params.temporaryProof && (e.temporaryProof = this.params.temporaryProof),
            this.params.verificationCode && (e.verificationCode = this.params.verificationCode),
            this.params.verificationId && (e.verificationId = this.params.verificationId),
            e
          );
        }
        static fromJSON(e) {
          'string' === typeof e && (e = JSON.parse(e));
          const { verificationId: t, verificationCode: n, phoneNumber: r, temporaryProof: i } = e;
          return n || t || r || i ? new _t({ verificationId: t, verificationCode: n, phoneNumber: r, temporaryProof: i }) : null;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function It(e) {
        switch (e) {
          case 'recoverEmail':
            return 'RECOVER_EMAIL';
          case 'resetPassword':
            return 'PASSWORD_RESET';
          case 'signIn':
            return 'EMAIL_SIGNIN';
          case 'verifyEmail':
            return 'VERIFY_EMAIL';
          case 'verifyAndChangeEmail':
            return 'VERIFY_AND_CHANGE_EMAIL';
          case 'revertSecondFactorAddition':
            return 'REVERT_SECOND_FACTOR_ADDITION';
          default:
            return null;
        }
      }
      function Et(e) {
        const t = (0, i.zd)((0, i.pd)(e))['link'],
          n = t ? (0, i.zd)((0, i.pd)(t))['deep_link_id'] : null,
          r = (0, i.zd)((0, i.pd)(e))['deep_link_id'],
          o = r ? (0, i.zd)((0, i.pd)(r))['link'] : null;
        return o || r || n || t || e;
      }
      class St {
        constructor(e) {
          var t, n, r, o, s, a;
          const u = (0, i.zd)((0, i.pd)(e)),
            c = null !== (t = u['apiKey']) && void 0 !== t ? t : null,
            l = null !== (n = u['oobCode']) && void 0 !== n ? n : null,
            h = It(null !== (r = u['mode']) && void 0 !== r ? r : null);
          S(c && l && h, 'argument-error'),
            (this.apiKey = c),
            (this.operation = h),
            (this.code = l),
            (this.continueUrl = null !== (o = u['continueUrl']) && void 0 !== o ? o : null),
            (this.languageCode = null !== (s = u['languageCode']) && void 0 !== s ? s : null),
            (this.tenantId = null !== (a = u['tenantId']) && void 0 !== a ? a : null);
        }
        static parseLink(e) {
          const t = Et(e);
          try {
            return new St(t);
          } catch (n) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class Tt {
        constructor() {
          this.providerId = Tt.PROVIDER_ID;
        }
        static credential(e, t) {
          return ft._fromEmailAndPassword(e, t);
        }
        static credentialWithLink(e, t) {
          const n = St.parseLink(t);
          return S(n, 'argument-error'), ft._fromEmailAndCode(e, n.code, n.tenantId);
        }
      }
      (Tt.PROVIDER_ID = 'password'), (Tt.EMAIL_PASSWORD_SIGN_IN_METHOD = 'password'), (Tt.EMAIL_LINK_SIGN_IN_METHOD = 'emailLink');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class At {
        constructor(e) {
          (this.providerId = e), (this.defaultLanguageCode = null), (this.customParameters = {});
        }
        setDefaultLanguage(e) {
          this.defaultLanguageCode = e;
        }
        setCustomParameters(e) {
          return (this.customParameters = e), this;
        }
        getCustomParameters() {
          return this.customParameters;
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class xt extends At {
        constructor() {
          super(...arguments), (this.scopes = []);
        }
        addScope(e) {
          return this.scopes.includes(e) || this.scopes.push(e), this;
        }
        getScopes() {
          return [...this.scopes];
        }
      }
      class Ct extends xt {
        static credentialFromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e;
          return S('providerId' in t && 'signInMethod' in t, 'argument-error'), gt._fromParams(t);
        }
        credential(e) {
          return this._credential(Object.assign(Object.assign({}, e), { nonce: e.rawNonce }));
        }
        _credential(e) {
          return (
            S(e.idToken || e.accessToken, 'argument-error'),
            gt._fromParams(Object.assign(Object.assign({}, e), { providerId: this.providerId, signInMethod: this.providerId }))
          );
        }
        static credentialFromResult(e) {
          return Ct.oauthCredentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Ct.oauthCredentialFromTaggedObject(e.customData || {});
        }
        static oauthCredentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { oauthIdToken: t, oauthAccessToken: n, oauthTokenSecret: r, pendingToken: i, nonce: o, providerId: s } = e;
          if (!n && !r && !t && !i) return null;
          if (!s) return null;
          try {
            return new Ct(s)._credential({ idToken: t, accessToken: n, nonce: o, pendingToken: i });
          } catch (a) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class kt extends xt {
        constructor() {
          super('facebook.com');
        }
        static credential(e) {
          return gt._fromParams({ providerId: kt.PROVIDER_ID, signInMethod: kt.FACEBOOK_SIGN_IN_METHOD, accessToken: e });
        }
        static credentialFromResult(e) {
          return kt.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return kt.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e || !('oauthAccessToken' in e)) return null;
          if (!e.oauthAccessToken) return null;
          try {
            return kt.credential(e.oauthAccessToken);
          } catch (t) {
            return null;
          }
        }
      }
      (kt.FACEBOOK_SIGN_IN_METHOD = 'facebook.com'), (kt.PROVIDER_ID = 'facebook.com');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class Ot extends xt {
        constructor() {
          super('google.com'), this.addScope('profile');
        }
        static credential(e, t) {
          return gt._fromParams({ providerId: Ot.PROVIDER_ID, signInMethod: Ot.GOOGLE_SIGN_IN_METHOD, idToken: e, accessToken: t });
        }
        static credentialFromResult(e) {
          return Ot.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Ot.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { oauthIdToken: t, oauthAccessToken: n } = e;
          if (!t && !n) return null;
          try {
            return Ot.credential(t, n);
          } catch (r) {
            return null;
          }
        }
      }
      (Ot.GOOGLE_SIGN_IN_METHOD = 'google.com'), (Ot.PROVIDER_ID = 'google.com');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class Nt extends xt {
        constructor() {
          super('github.com');
        }
        static credential(e) {
          return gt._fromParams({ providerId: Nt.PROVIDER_ID, signInMethod: Nt.GITHUB_SIGN_IN_METHOD, accessToken: e });
        }
        static credentialFromResult(e) {
          return Nt.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Nt.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e || !('oauthAccessToken' in e)) return null;
          if (!e.oauthAccessToken) return null;
          try {
            return Nt.credential(e.oauthAccessToken);
          } catch (t) {
            return null;
          }
        }
      }
      (Nt.GITHUB_SIGN_IN_METHOD = 'github.com'), (Nt.PROVIDER_ID = 'github.com');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const Rt = 'http://localhost';
      class Pt extends et {
        constructor(e, t) {
          super(e, e), (this.pendingToken = t);
        }
        _getIdTokenResponse(e) {
          const t = this.buildRequest();
          return dt(e, t);
        }
        _linkToIdToken(e, t) {
          const n = this.buildRequest();
          return (n.idToken = t), dt(e, n);
        }
        _getReauthenticationResolver(e) {
          const t = this.buildRequest();
          return (t.autoCreate = !1), dt(e, t);
        }
        toJSON() {
          return { signInMethod: this.signInMethod, providerId: this.providerId, pendingToken: this.pendingToken };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e,
            { providerId: n, signInMethod: r, pendingToken: i } = t;
          return n && r && i && n === r ? new Pt(n, i) : null;
        }
        static _create(e, t) {
          return new Pt(e, t);
        }
        buildRequest() {
          return { requestUri: Rt, returnSecureToken: !0, pendingToken: this.pendingToken };
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Dt = 'saml.';
      class Lt extends At {
        constructor(e) {
          S(e.startsWith(Dt), 'argument-error'), super(e);
        }
        static credentialFromResult(e) {
          return Lt.samlCredentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Lt.samlCredentialFromTaggedObject(e.customData || {});
        }
        static credentialFromJSON(e) {
          const t = Pt.fromJSON(e);
          return S(t, 'argument-error'), t;
        }
        static samlCredentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { pendingToken: t, providerId: n } = e;
          if (!t || !n) return null;
          try {
            return Pt._create(n, t);
          } catch (r) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class jt extends xt {
        constructor() {
          super('twitter.com');
        }
        static credential(e, t) {
          return gt._fromParams({ providerId: jt.PROVIDER_ID, signInMethod: jt.TWITTER_SIGN_IN_METHOD, oauthToken: e, oauthTokenSecret: t });
        }
        static credentialFromResult(e) {
          return jt.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return jt.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { oauthAccessToken: t, oauthTokenSecret: n } = e;
          if (!t || !n) return null;
          try {
            return jt.credential(t, n);
          } catch (r) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      async function Mt(e, t) {
        return V(e, 'POST', '/v1/accounts:signUp', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ (jt.TWITTER_SIGN_IN_METHOD = 'twitter.com'), (jt.PROVIDER_ID = 'twitter.com');
      class Ft {
        constructor(e) {
          (this.user = e.user), (this.providerId = e.providerId), (this._tokenResponse = e._tokenResponse), (this.operationType = e.operationType);
        }
        static async _fromIdTokenResponse(e, t, n, r = !1) {
          const i = await ce._fromIdTokenResponse(e, n, r),
            o = Ut(n),
            s = new Ft({ user: i, providerId: o, _tokenResponse: n, operationType: t });
          return s;
        }
        static async _forOperation(e, t, n) {
          await e._updateTokensIfNecessary(n, !0);
          const r = Ut(n);
          return new Ft({ user: e, providerId: r, _tokenResponse: n, operationType: t });
        }
      }
      function Ut(e) {
        return e.providerId ? e.providerId : 'phoneNumber' in e ? 'phone' : null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Vt(e) {
        var t;
        const n = We(e);
        if ((await n._initializationPromise, null === (t = n.currentUser) || void 0 === t ? void 0 : t.isAnonymous))
          return new Ft({ user: n.currentUser, providerId: null, operationType: 'signIn' });
        const r = await Mt(n, { returnSecureToken: !0 }),
          i = await Ft._fromIdTokenResponse(n, 'signIn', r, !0);
        return await n._updateCurrentUser(i.user), i;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Bt extends i.ZR {
        constructor(e, t, n, r) {
          var i;
          super(t.code, t.message),
            (this.operationType = n),
            (this.user = r),
            Object.setPrototypeOf(this, Bt.prototype),
            (this.customData = {
              appName: e.name,
              tenantId: null !== (i = e.tenantId) && void 0 !== i ? i : void 0,
              _serverResponse: t.customData._serverResponse,
              operationType: n
            });
        }
        static _fromErrorAndOperation(e, t, n, r) {
          return new Bt(e, t, n, r);
        }
      }
      function $t(e, t, n, r) {
        const i = 'reauthenticate' === t ? n._getReauthenticationResolver(e) : n._getIdTokenResponse(e);
        return i.catch(n => {
          if ('auth/multi-factor-auth-required' === n.code) throw Bt._fromErrorAndOperation(e, n, t, r);
          throw n;
        });
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function qt(e) {
        return new Set(e.map(({ providerId: e }) => e).filter(e => !!e));
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function zt(e, t) {
        const n = (0, i.m9)(e);
        await Wt(!0, n, t);
        const { providerUserInfo: r } = await G(n.auth, { idToken: await n.getIdToken(), deleteProvider: [t] }),
          o = qt(r || []);
        return (
          (n.providerData = n.providerData.filter(e => o.has(e.providerId))),
          o.has('phone') || (n.phoneNumber = null),
          await n.auth._persistUserIfCurrent(n),
          n
        );
      }
      async function Gt(e, t, n = !1) {
        const r = await J(e, t._linkToIdToken(e.auth, await e.getIdToken()), n);
        return Ft._forOperation(e, 'link', r);
      }
      async function Wt(e, t, n) {
        await ne(t);
        const r = qt(t.providerData),
          i = !1 === e ? 'provider-already-linked' : 'no-such-provider';
        S(r.has(n) === e, t.auth, i);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ht(e, t, n = !1) {
        const { auth: r } = e,
          i = 'reauthenticate';
        try {
          const o = await J(e, $t(r, i, t, e), n);
          S(o.idToken, r, 'internal-error');
          const s = Y(o.idToken);
          S(s, r, 'internal-error');
          const { sub: a } = s;
          return S(e.uid === a, r, 'user-mismatch'), Ft._forOperation(e, i, o);
        } catch (o) {
          throw ('auth/user-not-found' === (null === o || void 0 === o ? void 0 : o.code) && w(r, 'user-mismatch'), o);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Kt(e, t, n = !1) {
        const r = 'signIn',
          i = await $t(e, r, t),
          o = await Ft._fromIdTokenResponse(e, r, i);
        return n || (await e._updateCurrentUser(o.user)), o;
      }
      async function Qt(e, t) {
        return Kt(We(e), t);
      }
      async function Yt(e, t) {
        const n = (0, i.m9)(e);
        return await Wt(!1, n, t.providerId), Gt(n, t);
      }
      async function Xt(e, t) {
        return Ht((0, i.m9)(e), t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Jt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithCustomToken', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Zt(e, t) {
        const n = We(e),
          r = await Jt(n, { token: t, returnSecureToken: !0 }),
          i = await Ft._fromIdTokenResponse(n, 'signIn', r);
        return await n._updateCurrentUser(i.user), i;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class en {
        constructor(e, t) {
          (this.factorId = e),
            (this.uid = t.mfaEnrollmentId),
            (this.enrollmentTime = new Date(t.enrolledAt).toUTCString()),
            (this.displayName = t.displayName);
        }
        static _fromServerResponse(e, t) {
          return 'phoneInfo' in t ? tn._fromServerResponse(e, t) : 'totpInfo' in t ? nn._fromServerResponse(e, t) : w(e, 'internal-error');
        }
      }
      class tn extends en {
        constructor(e) {
          super('phone', e), (this.phoneNumber = e.phoneInfo);
        }
        static _fromServerResponse(e, t) {
          return new tn(t);
        }
      }
      class nn extends en {
        constructor(e) {
          super('totp', e);
        }
        static _fromServerResponse(e, t) {
          return new nn(t);
