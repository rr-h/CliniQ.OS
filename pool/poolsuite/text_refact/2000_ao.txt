remove firebase code from this and fix the code. NO NEED TO EXPLAIN OR TO SHOW A BEFORE. JUST DIRECTLY CARRY OUT THE TASK TO REMOVE FIREBASE ELEMENTS FROM THE GIVEN SNIPPET WITHOUT BREAKING THE PROJECT-
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function be(e) {
        let t;
        const n = await we(e.appConfig, n => {
          const r = _e(n),
            i = Ie(e, r);
          return (t = i.registrationPromise), i.installationEntry;
        });
        return n.fid === te ? { installationEntry: await t } : { installationEntry: n, registrationPromise: t };
      }
      function _e(e) {
        const t = e || { fid: ne(), registrationStatus: 0 };
        return Ae(t);
      }
      function Ie(e, t) {
        if (0 === t.registrationStatus) {
          if (!navigator.onLine) {
            const e = Promise.reject(B.create('app-offline'));
            return { installationEntry: t, registrationPromise: e };
          }
          const n = { fid: t.fid, registrationStatus: 1, registrationTime: Date.now() },
            r = Ee(e, n);
          return { installationEntry: n, registrationPromise: r };
        }
        return 1 === t.registrationStatus ? { installationEntry: t, registrationPromise: Se(e) } : { installationEntry: t };
      }
      async function Ee(e, t) {
        try {
          const n = await X(e, t);
          return ve(e.appConfig, n);
        } catch (n) {
          throw ($(n) && 409 === n.customData.serverCode ? await ye(e.appConfig) : await ve(e.appConfig, { fid: t.fid, registrationStatus: 0 }), n);
        }
      }
      async function Se(e) {
        let t = await Te(e.appConfig);
        while (1 === t.registrationStatus) await J(100), (t = await Te(e.appConfig));
        if (0 === t.registrationStatus) {
          const { installationEntry: t, registrationPromise: n } = await be(e);
          return n || t;
        }
        return t;
      }
      function Te(e) {
        return we(e, e => {
          if (!e) throw B.create('installation-not-found');
          return Ae(e);
        });
      }
      function Ae(e) {
        return xe(e) ? { fid: e.fid, registrationStatus: 0 } : e;
      }
      function xe(e) {
        return 1 === e.registrationStatus && e.registrationTime + P < Date.now();
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ce({ appConfig: e, heartbeatServiceProvider: t }, n) {
        const r = ke(e, n),
          i = H(e, n),
          o = t.getImmediate({ optional: !0 });
        if (o) {
          const e = await o.getHeartbeatsHeader();
          e && i.append('x-firebase-client', e);
        }
        const s = { installation: { sdkVersion: D, appId: e.appId } },
          a = { method: 'POST', headers: i, body: JSON.stringify(s) },
          u = await K(() => fetch(r, a));
        if (u.ok) {
          const e = await u.json(),
            t = z(e);
          return t;
        }
        throw await G('Generate Auth Token', u);
      }
      function ke(e, { fid: t }) {
        return `${q(e)}/${t}/authTokens:generate`;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Oe(e, t = !1) {
        let n;
        const r = await we(e.appConfig, r => {
            if (!De(r)) throw B.create('not-registered');
            const i = r.authToken;
            if (!t && Le(i)) return r;
            if (1 === i.requestStatus) return (n = Ne(e, t)), r;
            {
              if (!navigator.onLine) throw B.create('app-offline');
              const t = Me(r);
              return (n = Pe(e, t)), t;
            }
          }),
          i = n ? await n : r.authToken;
        return i;
      }
      async function Ne(e, t) {
        let n = await Re(e.appConfig);
        while (1 === n.authToken.requestStatus) await J(100), (n = await Re(e.appConfig));
        const r = n.authToken;
        return 0 === r.requestStatus ? Oe(e, t) : r;
      }
      function Re(e) {
        return we(e, e => {
          if (!De(e)) throw B.create('not-registered');
          const t = e.authToken;
          return Fe(t) ? Object.assign(Object.assign({}, e), { authToken: { requestStatus: 0 } }) : e;
        });
      }
      async function Pe(e, t) {
        try {
          const n = await Ce(e, t),
            r = Object.assign(Object.assign({}, t), { authToken: n });
          return await ve(e.appConfig, r), n;
        } catch (n) {
          if (!$(n) || (401 !== n.customData.serverCode && 404 !== n.customData.serverCode)) {
            const n = Object.assign(Object.assign({}, t), { authToken: { requestStatus: 0 } });
            await ve(e.appConfig, n);
          } else await ye(e.appConfig);
          throw n;
        }
      }
      function De(e) {
        return void 0 !== e && 2 === e.registrationStatus;
      }
      function Le(e) {
        return 2 === e.requestStatus && !je(e);
      }
      function je(e) {
        const t = Date.now();
        return t < e.creationTime || e.creationTime + e.expiresIn < t + M;
      }
      function Me(e) {
        const t = { requestStatus: 1, requestTime: Date.now() };
        return Object.assign(Object.assign({}, e), { authToken: t });
      }
      function Fe(e) {
        return 1 === e.requestStatus && e.requestTime + P < Date.now();
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ue(e) {
        const t = e,
          { installationEntry: n, registrationPromise: r } = await be(t);
        return r ? r.catch(console.error) : Oe(t).catch(console.error), n.fid;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ve(e, t = !1) {
        const n = e;
        await Be(n);
        const r = await Oe(n, t);
        return r.token;
      }
      async function Be(e) {
        const { registrationPromise: t } = await be(e);
        t && (await t);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function $e(e) {
        if (!e || !e.options) throw qe('App Configuration');
        if (!e.name) throw qe('App Name');
        const t = ['projectId', 'apiKey', 'appId'];
        for (const n of t) if (!e.options[n]) throw qe(n);
        return { appName: e.name, projectId: e.options.projectId, apiKey: e.options.apiKey, appId: e.options.appId };
      }
      function qe(e) {
        return B.create('missing-app-config-values', { valueName: e });
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ze = 'installations',
        Ge = 'installations-internal',
        We = e => {
          const t = e.getProvider('app').getImmediate(),
            n = $e(t),
            r = (0, i._getProvider)(t, 'heartbeat'),
            o = { app: t, appConfig: n, heartbeatServiceProvider: r, _delete: () => Promise.resolve() };
          return o;
        },
        He = e => {
          const t = e.getProvider('app').getImmediate(),
            n = (0, i._getProvider)(t, ze).getImmediate(),
            r = { getId: () => Ue(n), getToken: e => Ve(n, e) };
          return r;
        };
      function Ke() {
        (0, i._registerComponent)(new a.wA(ze, We, 'PUBLIC')), (0, i._registerComponent)(new a.wA(Ge, He, 'PRIVATE'));
      }
      Ke(), (0, i.registerVersion)(N, R), (0, i.registerVersion)(N, R, 'esm2017');
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const Qe = 'analytics',
        Ye = 'firebase_id',
        Xe = 'origin',
        Je = 6e4,
        Ze = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig',
        et = 'https://www.googletagmanager.com/gtag/js',
        tt = new o.Yd('@firebase/analytics'),
        nt = {
          ['already-exists']:
            'A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.',
          ['already-initialized']:
            'initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.',
          ['already-initialized-settings']:
            'Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.',
          ['interop-component-reg-failed']: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',
          ['invalid-analytics-context']:
            'Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}',
          ['indexeddb-unavailable']:
            'IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}',
          ['fetch-throttle']:
            'The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
          ['config-fetch-failed']: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',
          ['no-api-key']:
            'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',
          ['no-app-id']: 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',
          ['no-client-id']: 'The "client_id" field is empty.',
          ['invalid-gtag-resource']: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'
        },
        rt = new s.LL('analytics', 'Analytics', nt);
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function it(e) {
        if (!e.startsWith(et)) {
          const t = rt.create('invalid-gtag-resource', { gtagURL: e });
          return tt.warn(t.message), '';
        }
        return e;
      }
      function ot(e) {
        return Promise.all(e.map(e => e.catch(e => e)));
      }
      function st(e, t) {
        let n;
        return window.trustedTypes && (n = window.trustedTypes.createPolicy(e, t)), n;
      }
      function at(e, t) {
        const n = st('firebase-js-sdk-policy', { createScriptURL: it }),
          r = document.createElement('script'),
          i = `${et}?l=${e}&id=${t}`;
        (r.src = n ? (null === n || void 0 === n ? void 0 : n.createScriptURL(i)) : i), (r.async = !0), document.head.appendChild(r);
      }
      function ut(e) {
        let t = [];
        return Array.isArray(window[e]) ? (t = window[e]) : (window[e] = t), t;
      }
      async function ct(e, t, n, r, i, o) {
        const s = r[i];
        try {
          if (s) await t[s];
          else {
            const e = await ot(n),
              r = e.find(e => e.measurementId === i);
            r && (await t[r.appId]);
          }
        } catch (a) {
          tt.error(a);
        }
        e('config', i, o);
      }
      async function lt(e, t, n, r, i) {
        try {
          let o = [];
          if (i && i['send_to']) {
            let e = i['send_to'];
            Array.isArray(e) || (e = [e]);
            const r = await ot(n);
            for (const n of e) {
              const e = r.find(e => e.measurementId === n),
                i = e && t[e.appId];
              if (!i) {
                o = [];
                break;
              }
              o.push(i);
            }
          }
          0 === o.length && (o = Object.values(t)), await Promise.all(o), e('event', r, i || {});
        } catch (o) {
          tt.error(o);
        }
      }
      function ht(e, t, n, r) {
        async function i(i, ...o) {
          try {
            if ('event' === i) {
              const [r, i] = o;
              await lt(e, t, n, r, i);
            } else if ('config' === i) {
              const [i, s] = o;
              await ct(e, t, n, r, i, s);
            } else if ('consent' === i) {
              const [t] = o;
              e('consent', 'update', t);
            } else if ('get' === i) {
              const [t, n, r] = o;
              e('get', t, n, r);
            } else if ('set' === i) {
              const [t] = o;
              e('set', t);
            } else e(i, ...o);
          } catch (s) {
            tt.error(s);
          }
        }
        return i;
      }
      function ft(e, t, n, r, i) {
        let o = function (...e) {
          window[r].push(arguments);
        };
        return window[i] && 'function' === typeof window[i] && (o = window[i]), (window[i] = ht(o, e, t, n)), { gtagCore: o, wrappedGtag: window[i] };
      }
      function dt(e) {
        const t = window.document.getElementsByTagName('script');
        for (const n of Object.values(t)) if (n.src && n.src.includes(et) && n.src.includes(e)) return n;
        return null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const pt = 30,
        gt = 1e3;
      class mt {
        constructor(e = {}, t = gt) {
          (this.throttleMetadata = e), (this.intervalMillis = t);
        }
        getThrottleMetadata(e) {
          return this.throttleMetadata[e];
        }
        setThrottleMetadata(e, t) {
          this.throttleMetadata[e] = t;
        }
        deleteThrottleMetadata(e) {
          delete this.throttleMetadata[e];
        }
      }
      const vt = new mt();
      function yt(e) {
        return new Headers({ Accept: 'application/json', 'x-goog-api-key': e });
      }
      async function wt(e) {
        var t;
        const { appId: n, apiKey: r } = e,
          i = { method: 'GET', headers: yt(r) },
          o = Ze.replace('{app-id}', n),
          s = await fetch(o, i);
        if (200 !== s.status && 304 !== s.status) {
          let e = '';
          try {
            const n = await s.json();
            (null === (t = n.error) || void 0 === t ? void 0 : t.message) && (e = n.error.message);
          } catch (a) {}
          throw rt.create('config-fetch-failed', { httpStatus: s.status, responseMessage: e });
        }
        return s.json();
      }
      async function bt(e, t = vt, n) {
        const { appId: r, apiKey: i, measurementId: o } = e.options;
        if (!r) throw rt.create('no-app-id');
        if (!i) {
          if (o) return { measurementId: o, appId: r };
          throw rt.create('no-api-key');
        }
        const s = t.getThrottleMetadata(r) || { backoffCount: 0, throttleEndTimeMillis: Date.now() },
          a = new St();
        return (
          setTimeout(
            async () => {
              a.abort();
            },
            void 0 !== n ? n : Je
          ),
          _t({ appId: r, apiKey: i, measurementId: o }, s, a, t)
        );
      }
      async function _t(e, { throttleEndTimeMillis: t, backoffCount: n }, r, i = vt) {
        var o;
        const { appId: a, measurementId: u } = e;
        try {
          await It(r, t);
        } catch (c) {
          if (u)
            return (
              tt.warn(
                `Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${u} provided in the "measurementId" field in the local Firebase config. [${null === c || void 0 === c ? void 0 : c.message}]`
              ),
              { appId: a, measurementId: u }
            );
          throw c;
        }
        try {
          const t = await wt(e);
          return i.deleteThrottleMetadata(a), t;
        } catch (c) {
          const t = c;
          if (!Et(t)) {
            if ((i.deleteThrottleMetadata(a), u))
              return (
                tt.warn(
                  `Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${u} provided in the "measurementId" field in the local Firebase config. [${null === t || void 0 === t ? void 0 : t.message}]`
                ),
                { appId: a, measurementId: u }
              );
            throw c;
          }
          const l =
              503 === Number(null === (o = null === t || void 0 === t ? void 0 : t.customData) || void 0 === o ? void 0 : o.httpStatus)
                ? (0, s.$s)(n, i.intervalMillis, pt)
                : (0, s.$s)(n, i.intervalMillis),
            h = { throttleEndTimeMillis: Date.now() + l, backoffCount: n + 1 };
          return i.setThrottleMetadata(a, h), tt.debug(`Calling attemptFetch again in ${l} millis`), _t(e, h, r, i);
        }
      }
      function It(e, t) {
        return new Promise((n, r) => {
          const i = Math.max(t - Date.now(), 0),
            o = setTimeout(n, i);
          e.addEventListener(() => {
            clearTimeout(o), r(rt.create('fetch-throttle', { throttleEndTimeMillis: t }));
          });
        });
      }
      function Et(e) {
        if (!(e instanceof s.ZR) || !e.customData) return !1;
        const t = Number(e.customData['httpStatus']);
        return 429 === t || 500 === t || 503 === t || 504 === t;
      }
      class St {
        constructor() {
          this.listeners = [];
        }
        addEventListener(e) {
          this.listeners.push(e);
        }
        abort() {
          this.listeners.forEach(e => e());
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ let Tt, At;
      async function xt(e, t, n, r, i) {
        if (i && i.global) e('event', n, r);
        else {
          const i = await t,
            o = Object.assign(Object.assign({}, r), { send_to: i });
          e('event', n, o);
        }
      }
      async function Ct(e, t, n, r) {
        if (r && r.global) return e('set', { screen_name: n }), Promise.resolve();
        {
          const r = await t;
          e('config', r, { update: !0, screen_name: n });
        }
      }
      async function kt(e, t, n, r) {
        if (r && r.global) return e('set', { user_id: n }), Promise.resolve();
        {
          const r = await t;
          e('config', r, { update: !0, user_id: n });
        }
      }
      async function Ot(e, t, n, r) {
        if (r && r.global) {
          const t = {};
          for (const e of Object.keys(n)) t[`user_properties.${e}`] = n[e];
          return e('set', t), Promise.resolve();
        }
        {
          const r = await t;
          e('config', r, { update: !0, user_properties: n });
        }
      }
      async function Nt(e, t) {
        const n = await e;
        window[`ga-disable-${n}`] = !t;
      }
      function Rt(e) {
        At = e;
      }
      function Pt(e) {
        Tt = e;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Dt() {
        if (!(0, s.hl)())
          return tt.warn(rt.create('indexeddb-unavailable', { errorInfo: 'IndexedDB is not available in this environment.' }).message), !1;
        try {
          await (0, s.eu)();
        } catch (e) {
          return tt.warn(rt.create('indexeddb-unavailable', { errorInfo: null === e || void 0 === e ? void 0 : e.toString() }).message), !1;
        }
        return !0;
      }
      async function Lt(e, t, n, r, i, o, s) {
        var a;
        const u = bt(e);
        u
          .then(t => {
            (n[t.measurementId] = t.appId),
              e.options.measurementId &&
                t.measurementId !== e.options.measurementId &&
                tt.warn(
                  `The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`
                );
          })
          .catch(e => tt.error(e)),
          t.push(u);
        const c = Dt().then(e => (e ? r.getId() : void 0)),
          [l, h] = await Promise.all([u, c]);
        dt(o) || at(o, l.measurementId), At && (i('consent', 'default', At), Rt(void 0)), i('js', new Date());
        const f = null !== (a = null === s || void 0 === s ? void 0 : s.config) && void 0 !== a ? a : {};
        return (
          (f[Xe] = 'firebase'),
          (f.update = !0),
          null != h && (f[Ye] = h),
          i('config', l.measurementId, f),
          Tt && (i('set', Tt), Pt(void 0)),
          l.measurementId
        );
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class jt {
        constructor(e) {
          this.app = e;
        }
        _delete() {
          return delete Mt[this.app.options.appId], Promise.resolve();
        }
      }
      let Mt = {},
        Ft = [];
      const Ut = {};
      let Vt,
        Bt,
        $t = 'dataLayer',
        qt = 'gtag',
        zt = !1;
      function Gt(e) {
        if (zt) throw rt.create('already-initialized');
        e.dataLayerName && ($t = e.dataLayerName), e.gtagName && (qt = e.gtagName);
      }
      function Wt() {
        const e = [];
        if (((0, s.ru)() && e.push('This is a browser extension environment.'), (0, s.zI)() || e.push('Cookies are not available.'), e.length > 0)) {
          const t = e.map((e, t) => `(${t + 1}) ${e}`).join(' '),
            n = rt.create('invalid-analytics-context', { errorInfo: t });
          tt.warn(n.message);
        }
      }
      function Ht(e, t, n) {
        Wt();
        const r = e.options.appId;
        if (!r) throw rt.create('no-app-id');
        if (!e.options.apiKey) {
          if (!e.options.measurementId) throw rt.create('no-api-key');
          tt.warn(
            `The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`
          );
        }
        if (null != Mt[r]) throw rt.create('already-exists', { id: r });
        if (!zt) {
          ut($t);
          const { wrappedGtag: e, gtagCore: t } = ft(Mt, Ft, Ut, $t, qt);
          (Bt = e), (Vt = t), (zt = !0);
        }
        Mt[r] = Lt(e, Ft, Ut, t, Vt, $t, n);
        const i = new jt(e);
        return i;
      }
      async function Kt() {
        if ((0, s.ru)()) return !1;
        if (!(0, s.zI)()) return !1;
        if (!(0, s.hl)()) return !1;
        try {
          const e = await (0, s.eu)();
          return e;
        } catch (e) {
          return !1;
        }
      }
      function Qt(e, t, n) {
        (e = (0, s.m9)(e)), Ct(Bt, Mt[e.app.options.appId], t, n).catch(e => tt.error(e));
      }
      function Yt(e, t, n) {
        (e = (0, s.m9)(e)), kt(Bt, Mt[e.app.options.appId], t, n).catch(e => tt.error(e));
      }
      function Xt(e, t, n) {
        (e = (0, s.m9)(e)), Ot(Bt, Mt[e.app.options.appId], t, n).catch(e => tt.error(e));
      }
      function Jt(e, t) {
        (e = (0, s.m9)(e)), Nt(Mt[e.app.options.appId], t).catch(e => tt.error(e));
      }
      function Zt(e, t, n, r) {
        (e = (0, s.m9)(e)), xt(Bt, Mt[e.app.options.appId], t, n, r).catch(e => tt.error(e));
      }
      const en = '@firebase/analytics',
        tn = '0.10.0';
      function nn() {
        function e(e) {
          try {
            const t = e.getProvider(Qe).getImmediate();
            return { logEvent: (e, n, r) => Zt(t, e, n, r) };
          } catch (t) {
            throw rt.create('interop-component-reg-failed', { reason: t });
          }
        }
        (0, i._registerComponent)(
          new a.wA(
            Qe,
            (e, { options: t }) => {
              const n = e.getProvider('app').getImmediate(),
                r = e.getProvider('installations-internal').getImmediate();
              return Ht(n, r, t);
            },
            'PUBLIC'
          )
        ),
          (0, i._registerComponent)(new a.wA('analytics-internal', e, 'PRIVATE')),
          (0, i.registerVersion)(en, tn),
          (0, i.registerVersion)(en, tn, 'esm2017');
      }
      nn();
      const rn = '@firebase/analytics-compat',
        on = '0.2.6';
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class sn {
        constructor(e, t) {
          (this.app = e), (this._delegate = t);
        }
        logEvent(e, t, n) {
          Zt(this._delegate, e, t, n);
        }
        setCurrentScreen(e, t) {
          Qt(this._delegate, e, t);
        }
        setUserId(e, t) {
          Yt(this._delegate, e, t);
        }
        setUserProperties(e, t) {
          Xt(this._delegate, e, t);
        }
        setAnalyticsCollectionEnabled(e) {
          Jt(this._delegate, e);
        }
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ var an;
      (function (e) {
        (e['ADD_SHIPPING_INFO'] = 'add_shipping_info'),
          (e['ADD_PAYMENT_INFO'] = 'add_payment_info'),
          (e['ADD_TO_CART'] = 'add_to_cart'),
          (e['ADD_TO_WISHLIST'] = 'add_to_wishlist'),
          (e['BEGIN_CHECKOUT'] = 'begin_checkout'),
          (e['CHECKOUT_PROGRESS'] = 'checkout_progress'),
          (e['EXCEPTION'] = 'exception'),
          (e['GENERATE_LEAD'] = 'generate_lead'),
          (e['LOGIN'] = 'login'),
          (e['PAGE_VIEW'] = 'page_view'),
          (e['PURCHASE'] = 'purchase'),
          (e['REFUND'] = 'refund'),
          (e['REMOVE_FROM_CART'] = 'remove_from_cart'),
          (e['SCREEN_VIEW'] = 'screen_view'),
          (e['SEARCH'] = 'search'),
          (e['SELECT_CONTENT'] = 'select_content'),
          (e['SELECT_ITEM'] = 'select_item'),
          (e['SELECT_PROMOTION'] = 'select_promotion'),
          (e['SET_CHECKOUT_OPTION'] = 'set_checkout_option'),
          (e['SHARE'] = 'share'),
          (e['SIGN_UP'] = 'sign_up'),
          (e['TIMING_COMPLETE'] = 'timing_complete'),
          (e['VIEW_CART'] = 'view_cart'),
          (e['VIEW_ITEM'] = 'view_item'),
          (e['VIEW_ITEM_LIST'] = 'view_item_list'),
          (e['VIEW_PROMOTION'] = 'view_promotion'),
          (e['VIEW_SEARCH_RESULTS'] = 'view_search_results');
      })(an || (an = {}));
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const un = e => {
        const t = e.getProvider('app-compat').getImmediate(),
          n = e.getProvider('analytics').getImmediate();
        return new sn(t, n);
      };
      function cn() {
        const e = { Analytics: sn, settings: Gt, isSupported: Kt, EventName: an };
        r.Z.INTERNAL.registerComponent(new a.wA('analytics-compat', un, 'PUBLIC').setServiceProps(e).setMultipleInstances(!0));
      }
      cn(), r.Z.registerVersion(rn, on);
    },
    44866: (e, t, n) => {
      'use strict';
      n.d(t, { Z: () => r.Z });
      var r = n(98180),
        i = 'firebase',
        o = '9.23.0';
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      r.Z.registerVersion(i, o, 'app-compat');
    },
    87481: (e, t, n) => {
      'use strict';
      var r = n(98180),
        i = n(74444),
        o = n(25816);
      function s(e, t) {
        var n = {};
        for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);
        if (null != e && 'function' === typeof Object.getOwnPropertySymbols) {
          var i = 0;
          for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
            t.indexOf(r[i]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[i]) && (n[r[i]] = e[r[i]]);
        }
        return n;
      }
      Object.create;
      Object.create;
      var a = n(53333),
        u = n(8463);
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const c = {
          FACEBOOK: 'facebook.com',
          GITHUB: 'github.com',
          GOOGLE: 'google.com',
          PASSWORD: 'password',
          PHONE: 'phone',
          TWITTER: 'twitter.com'
        },
        l = {
          EMAIL_SIGNIN: 'EMAIL_SIGNIN',
          PASSWORD_RESET: 'PASSWORD_RESET',
          RECOVER_EMAIL: 'RECOVER_EMAIL',
          REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',
          VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',
          VERIFY_EMAIL: 'VERIFY_EMAIL'
        };
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function h() {
        return {
          ['admin-restricted-operation']: 'This operation is restricted to administrators only.',
          ['argument-error']: '',
          ['app-not-authorized']:
            "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
          ['app-not-installed']:
            'The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.',
          ['captcha-check-failed']:
            'The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.',
          ['code-expired']: 'The SMS code has expired. Please re-send the verification code to try again.',
          ['cordova-not-ready']: 'Cordova framework is not ready.',
          ['cors-unsupported']: 'This browser is not supported.',
          ['credential-already-in-use']: 'This credential is already associated with a different user account.',
          ['custom-token-mismatch']: 'The custom token corresponds to a different audience.',
          ['requires-recent-login']: 'This operation is sensitive and requires recent authentication. Log in again before retrying this request.',
          ['dependent-sdk-initialized-before-auth']:
            'Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.',
          ['dynamic-link-not-activated']: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.',
          ['email-change-needs-verification']: 'Multi-factor users must always have a verified email.',
          ['email-already-in-use']: 'The email address is already in use by another account.',
          ['emulator-config-failed']:
            'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling "connectAuthEmulator()" sooner.',
          ['expired-action-code']: 'The action code has expired.',
          ['cancelled-popup-request']: 'This operation has been cancelled due to another conflicting popup being opened.',
          ['internal-error']: 'An internal AuthError has occurred.',
          ['invalid-app-credential']:
            'The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.',
          ['invalid-app-id']: 'The mobile app identifier is not registed for the current project.',
          ['invalid-user-token']:
            "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
          ['invalid-auth-event']: 'An internal AuthError has occurred.',
          ['invalid-verification-code']:
            'The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.',
          ['invalid-continue-uri']: 'The continue URL provided in the request is invalid.',
          ['invalid-cordova-configuration']:
            'The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.',
          ['invalid-custom-token']: 'The custom token format is incorrect. Please check the documentation.',
          ['invalid-dynamic-link-domain']: 'The provided dynamic link domain is not configured or authorized for the current project.',
          ['invalid-email']: 'The email address is badly formatted.',
          ['invalid-emulator-scheme']: 'Emulator URL must start with a valid scheme (http:// or https://).',
          ['invalid-api-key']: 'Your API key is invalid, please check you have copied it correctly.',
          ['invalid-cert-hash']: 'The SHA-1 certificate hash provided is invalid.',
          ['invalid-credential']: 'The supplied auth credential is malformed or has expired.',
          ['invalid-message-payload']:
            'The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.',
          ['invalid-multi-factor-session']: 'The request does not contain a valid proof of first factor successful sign-in.',
          ['invalid-oauth-provider']: 'EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.',
          ['invalid-oauth-client-id']: 'The OAuth client ID provided is either invalid or does not match the specified API key.',
          ['unauthorized-domain']:
            'This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.',
          ['invalid-action-code']: 'The action code is invalid. This can happen if the code is malformed, expired, or has already been used.',
          ['wrong-password']: 'The password is invalid or the user does not have a password.',
          ['invalid-persistence-type']: 'The specified persistence type is invalid. It can only be local, session or none.',
          ['invalid-phone-number']:
            'The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].',
          ['invalid-provider-id']: 'The specified provider ID is invalid.',
          ['invalid-recipient-email']: 'The email corresponding to this action failed to send as the provided recipient email address is invalid.',
          ['invalid-sender']:
            'The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.',
          ['invalid-verification-id']: 'The verification ID used to create the phone auth credential is invalid.',
          ['invalid-tenant-id']: "The Auth instance's tenant ID is invalid.",
          ['login-blocked']: 'Login blocked by user-provided method: {$originalMessage}',
          ['missing-android-pkg-name']: 'An Android Package Name must be provided if the Android App is required to be installed.',
          ['auth-domain-config-required']:
            'Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.',
          ['missing-app-credential']:
            'The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.',
          ['missing-verification-code']: 'The phone auth credential was created with an empty SMS verification code.',
          ['missing-continue-uri']: 'A continue URL must be provided in the request.',
          ['missing-iframe-start']: 'An internal AuthError has occurred.',
          ['missing-ios-bundle-id']: 'An iOS Bundle ID must be provided if an App Store ID is provided.',
          ['missing-or-invalid-nonce']:
            'The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.',
          ['missing-password']: 'A non-empty password must be provided',
          ['missing-multi-factor-info']: 'No second factor identifier is provided.',
          ['missing-multi-factor-session']: 'The request is missing proof of first factor successful sign-in.',
          ['missing-phone-number']: 'To send verification codes, provide a phone number for the recipient.',
          ['missing-verification-id']: 'The phone auth credential was created with an empty verification ID.',
          ['app-deleted']: 'This instance of FirebaseApp has been deleted.',
          ['multi-factor-info-not-found']: 'The user does not have a second factor matching the identifier provided.',
          ['multi-factor-auth-required']: 'Proof of ownership of a second factor is required to complete sign-in.',
          ['account-exists-with-different-credential']:
            'An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.',
          ['network-request-failed']: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
          ['no-auth-event']: 'An internal AuthError has occurred.',
          ['no-such-provider']: 'User was not linked to an account with the given provider.',
          ['null-user']: 'A null user object was provided as the argument for an operation which requires a non-null user object.',
          ['operation-not-allowed']:
            'The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.',
          ['operation-not-supported-in-this-environment']:
            'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
          ['popup-blocked']: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
          ['popup-closed-by-user']: 'The popup has been closed by the user before finalizing the operation.',
          ['provider-already-linked']: 'User can only be linked to one identity for the given provider.',
          ['quota-exceeded']: "The project's quota for this operation has been exceeded.",
          ['redirect-cancelled-by-user']: 'The redirect operation has been cancelled by the user before finalizing.',
          ['redirect-operation-pending']: 'A redirect sign-in operation is already pending.',
          ['rejected-credential']: 'The request contains malformed or mismatching credentials.',
          ['second-factor-already-in-use']: 'The second factor is already enrolled on this account.',
          ['maximum-second-factor-count-exceeded']: 'The maximum allowed number of second factors on a user has been exceeded.',
          ['tenant-id-mismatch']: "The provided tenant ID does not match the Auth instance's tenant ID",
          ['timeout']: 'The operation has timed out.',
          ['user-token-expired']: "The user's credential is no longer valid. The user must sign in again.",
          ['too-many-requests']: 'We have blocked all requests from this device due to unusual activity. Try again later.',
          ['unauthorized-continue-uri']: 'The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.',
          ['unsupported-first-factor']:
            'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
          ['unsupported-persistence-type']: 'The current environment does not support the specified persistence type.',
          ['unsupported-tenant-operation']: 'This operation is not supported in a multi-tenant context.',
          ['unverified-email']: 'The operation requires a verified email.',
          ['user-cancelled']: 'The user did not grant your application the permissions it requested.',
          ['user-not-found']: 'There is no user record corresponding to this identifier. The user may have been deleted.',
          ['user-disabled']: 'The user account has been disabled by an administrator.',
          ['user-mismatch']: 'The supplied credentials do not correspond to the previously signed in user.',
          ['user-signed-out']: '',
          ['weak-password']: 'The password must be 6 characters long or more.',
          ['web-storage-unsupported']: 'This browser is not supported or 3rd party cookies and data may be disabled.',
          ['already-initialized']:
            'initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance.',
          ['missing-recaptcha-token']: 'The reCAPTCHA token is missing when sending request to the backend.',
          ['invalid-recaptcha-token']: 'The reCAPTCHA token is invalid when sending request to the backend.',
          ['invalid-recaptcha-action']: 'The reCAPTCHA action is invalid when sending request to the backend.',
          ['recaptcha-not-enabled']: 'reCAPTCHA Enterprise integration is not enabled for this project.',
          ['missing-client-type']: 'The reCAPTCHA client type is missing when sending request to the backend.',
          ['missing-recaptcha-version']: 'The reCAPTCHA version is missing when sending request to the backend.',
          ['invalid-req-type']: 'Invalid request parameters.',
          ['invalid-recaptcha-version']: 'The reCAPTCHA version is invalid when sending request to the backend.'
        };
      }
      function f() {
        return {
          ['dependent-sdk-initialized-before-auth']:
            'Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.'
        };
      }
      const d = h,
        p = f,
        g = new i.LL('auth', 'Firebase', f()),
        m = new a.Yd('@firebase/auth');
      function v(e, ...t) {
        m.logLevel <= a['in'].WARN && m.warn(`Auth (${o.SDK_VERSION}): ${e}`, ...t);
      }
      function y(e, ...t) {
        m.logLevel <= a['in'].ERROR && m.error(`Auth (${o.SDK_VERSION}): ${e}`, ...t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function w(e, ...t) {
        throw E(e, ...t);
      }
      function b(e, ...t) {
        return E(e, ...t);
      }
      function _(e, t, n) {
        const r = Object.assign(Object.assign({}, p()), { [t]: n }),
          o = new i.LL('auth', 'Firebase', r);
        return o.create(t, { appName: e.name });
      }
      function I(e, t, n) {
        const r = n;
        if (!(t instanceof r))
          throw (
            (r.name !== t.constructor.name && w(e, 'argument-error'),
            _(
              e,
              'argument-error',
              `Type of ${t.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`
            ))
          );
      }
      function E(e, ...t) {
        if ('string' !== typeof e) {
          const n = t[0],
            r = [...t.slice(1)];
          return r[0] && (r[0].appName = e.name), e._errorFactory.create(n, ...r);
        }
        return g.create(e, ...t);
      }
      function S(e, t, ...n) {
        if (!e) throw E(t, ...n);
      }
      function T(e) {
        const t = 'INTERNAL ASSERTION FAILED: ' + e;
        throw (y(t), new Error(t));
      }
      function A(e, t) {
        e || T(t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function x() {
        var e;
        return ('undefined' !== typeof self && (null === (e = self.location) || void 0 === e ? void 0 : e.href)) || '';
      }
      function C() {
        return 'http:' === k() || 'https:' === k();
      }
      function k() {
        var e;
        return ('undefined' !== typeof self && (null === (e = self.location) || void 0 === e ? void 0 : e.protocol)) || null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function O() {
        return (
          !(
            'undefined' !== typeof navigator &&
            navigator &&
            'onLine' in navigator &&
            'boolean' === typeof navigator.onLine &&
            (C() || (0, i.ru)() || 'connection' in navigator)
          ) || navigator.onLine
        );
      }
      function N() {
        if ('undefined' === typeof navigator) return null;
        const e = navigator;
        return (e.languages && e.languages[0]) || e.language || null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class R {
        constructor(e, t) {
          (this.shortDelay = e),
            (this.longDelay = t),
            A(t > e, 'Short delay should be less than long delay!'),
            (this.isMobile = (0, i.uI)() || (0, i.b$)());
        }
        get() {
          return O() ? (this.isMobile ? this.longDelay : this.shortDelay) : Math.min(5e3, this.shortDelay);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function P(e, t) {
        A(e.emulator, 'Emulator should always be set here');
        const { url: n } = e.emulator;
        return t ? `${n}${t.startsWith('/') ? t.slice(1) : t}` : n;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class D {
        static initialize(e, t, n) {
          (this.fetchImpl = e), t && (this.headersImpl = t), n && (this.responseImpl = n);
        }
        static fetch() {
          return this.fetchImpl
            ? this.fetchImpl
            : 'undefined' !== typeof self && 'fetch' in self
              ? self.fetch
              : void T('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
        static headers() {
          return this.headersImpl
            ? this.headersImpl
            : 'undefined' !== typeof self && 'Headers' in self
              ? self.Headers
              : void T('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
        static response() {
          return this.responseImpl
            ? this.responseImpl
            : 'undefined' !== typeof self && 'Response' in self
              ? self.Response
              : void T('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const L = {
          ['CREDENTIAL_MISMATCH']: 'custom-token-mismatch',
          ['MISSING_CUSTOM_TOKEN']: 'internal-error',
          ['INVALID_IDENTIFIER']: 'invalid-email',
          ['MISSING_CONTINUE_URI']: 'internal-error',
          ['INVALID_PASSWORD']: 'wrong-password',
          ['MISSING_PASSWORD']: 'missing-password',
          ['EMAIL_EXISTS']: 'email-already-in-use',
          ['PASSWORD_LOGIN_DISABLED']: 'operation-not-allowed',
          ['INVALID_IDP_RESPONSE']: 'invalid-credential',
          ['INVALID_PENDING_TOKEN']: 'invalid-credential',
          ['FEDERATED_USER_ID_ALREADY_LINKED']: 'credential-already-in-use',
          ['MISSING_REQ_TYPE']: 'internal-error',
          ['EMAIL_NOT_FOUND']: 'user-not-found',
          ['RESET_PASSWORD_EXCEED_LIMIT']: 'too-many-requests',
          ['EXPIRED_OOB_CODE']: 'expired-action-code',
          ['INVALID_OOB_CODE']: 'invalid-action-code',
          ['MISSING_OOB_CODE']: 'internal-error',
          ['CREDENTIAL_TOO_OLD_LOGIN_AGAIN']: 'requires-recent-login',
          ['INVALID_ID_TOKEN']: 'invalid-user-token',
          ['TOKEN_EXPIRED']: 'user-token-expired',
          ['USER_NOT_FOUND']: 'user-token-expired',
          ['TOO_MANY_ATTEMPTS_TRY_LATER']: 'too-many-requests',
          ['INVALID_CODE']: 'invalid-verification-code',
          ['INVALID_SESSION_INFO']: 'invalid-verification-id',
          ['INVALID_TEMPORARY_PROOF']: 'invalid-credential',
          ['MISSING_SESSION_INFO']: 'missing-verification-id',
          ['SESSION_EXPIRED']: 'code-expired',
          ['MISSING_ANDROID_PACKAGE_NAME']: 'missing-android-pkg-name',
          ['UNAUTHORIZED_DOMAIN']: 'unauthorized-continue-uri',
          ['INVALID_OAUTH_CLIENT_ID']: 'invalid-oauth-client-id',
          ['ADMIN_ONLY_OPERATION']: 'admin-restricted-operation',
          ['INVALID_MFA_PENDING_CREDENTIAL']: 'invalid-multi-factor-session',
          ['MFA_ENROLLMENT_NOT_FOUND']: 'multi-factor-info-not-found',
          ['MISSING_MFA_ENROLLMENT_ID']: 'missing-multi-factor-info',
          ['MISSING_MFA_PENDING_CREDENTIAL']: 'missing-multi-factor-session',
          ['SECOND_FACTOR_EXISTS']: 'second-factor-already-in-use',
          ['SECOND_FACTOR_LIMIT_EXCEEDED']: 'maximum-second-factor-count-exceeded',
          ['BLOCKING_FUNCTION_ERROR_RESPONSE']: 'internal-error',
          ['RECAPTCHA_NOT_ENABLED']: 'recaptcha-not-enabled',
          ['MISSING_RECAPTCHA_TOKEN']: 'missing-recaptcha-token',
          ['INVALID_RECAPTCHA_TOKEN']: 'invalid-recaptcha-token',
          ['INVALID_RECAPTCHA_ACTION']: 'invalid-recaptcha-action',
          ['MISSING_CLIENT_TYPE']: 'missing-client-type',
          ['MISSING_RECAPTCHA_VERSION']: 'missing-recaptcha-version',
          ['INVALID_RECAPTCHA_VERSION']: 'invalid-recaptcha-version',
          ['INVALID_REQ_TYPE']: 'invalid-req-type'
        },
        j = new R(3e4, 6e4);
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function M(e, t) {
        return e.tenantId && !t.tenantId ? Object.assign(Object.assign({}, t), { tenantId: e.tenantId }) : t;
      }
      async function F(e, t, n, r, o = {}) {
        return U(e, o, async () => {
          let o = {},
            s = {};
          r && ('GET' === t ? (s = r) : (o = { body: JSON.stringify(r) }));
          const a = (0, i.xO)(Object.assign({ key: e.config.apiKey }, s)).slice(1),
            u = await e._getAdditionalHeaders();
          return (
            (u['Content-Type'] = 'application/json'),
            e.languageCode && (u['X-Firebase-Locale'] = e.languageCode),
            D.fetch()(B(e, e.config.apiHost, n, a), Object.assign({ method: t, headers: u, referrerPolicy: 'no-referrer' }, o))
          );
        });
      }
      async function U(e, t, n) {
        e._canInitEmulator = !1;
        const r = Object.assign(Object.assign({}, L), t);
        try {
          const t = new $(e),
            i = await Promise.race([n(), t.promise]);
          t.clearNetworkTimeout();
          const o = await i.json();
          if ('needConfirmation' in o) throw q(e, 'account-exists-with-different-credential', o);
          if (i.ok && !('errorMessage' in o)) return o;
          {
            const t = i.ok ? o.errorMessage : o.error.message,
              [n, s] = t.split(' : ');
            if ('FEDERATED_USER_ID_ALREADY_LINKED' === n) throw q(e, 'credential-already-in-use', o);
            if ('EMAIL_EXISTS' === n) throw q(e, 'email-already-in-use', o);
            if ('USER_DISABLED' === n) throw q(e, 'user-disabled', o);
            const a = r[n] || n.toLowerCase().replace(/[_\s]+/g, '-');
            if (s) throw _(e, a, s);
            w(e, a);
          }
        } catch (o) {
          if (o instanceof i.ZR) throw o;
          w(e, 'network-request-failed', { message: String(o) });
        }
      }
      async function V(e, t, n, r, i = {}) {
        const o = await F(e, t, n, r, i);
        return 'mfaPendingCredential' in o && w(e, 'multi-factor-auth-required', { _serverResponse: o }), o;
      }
      function B(e, t, n, r) {
        const i = `${t}${n}?${r}`;
        return e.config.emulator ? P(e.config, i) : `${e.config.apiScheme}://${i}`;
      }
      class $ {
        constructor(e) {
          (this.auth = e),
            (this.timer = null),
            (this.promise = new Promise((e, t) => {
              this.timer = setTimeout(() => t(b(this.auth, 'network-request-failed')), j.get());
            }));
        }
        clearNetworkTimeout() {
          clearTimeout(this.timer);
        }
      }
      function q(e, t, n) {
        const r = { appName: e.name };
        n.email && (r.email = n.email), n.phoneNumber && (r.phoneNumber = n.phoneNumber);
        const i = b(e, t, r);
        return (i.customData._tokenResponse = n), i;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function z(e, t) {
        return F(e, 'POST', '/v1/accounts:delete', t);
      }
      async function G(e, t) {
        return F(e, 'POST', '/v1/accounts:update', t);
      }
      async function W(e, t) {
        return F(e, 'POST', '/v1/accounts:lookup', t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function H(e) {
        if (e)
          try {
            const t = new Date(Number(e));
            if (!isNaN(t.getTime())) return t.toUTCString();
          } catch (t) {}
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function K(e, t = !1) {
        const n = (0, i.m9)(e),
          r = await n.getIdToken(t),
          o = Y(r);
        S(o && o.exp && o.auth_time && o.iat, n.auth, 'internal-error');
        const s = 'object' === typeof o.firebase ? o.firebase : void 0,
          a = null === s || void 0 === s ? void 0 : s['sign_in_provider'];
        return {
          claims: o,
          token: r,
          authTime: H(Q(o.auth_time)),
          issuedAtTime: H(Q(o.iat)),
          expirationTime: H(Q(o.exp)),
          signInProvider: a || null,
          signInSecondFactor: (null === s || void 0 === s ? void 0 : s['sign_in_second_factor']) || null
        };
      }
      function Q(e) {
        return 1e3 * Number(e);
      }
      function Y(e) {
        const [t, n, r] = e.split('.');
        if (void 0 === t || void 0 === n || void 0 === r) return y('JWT malformed, contained fewer than 3 sections'), null;
        try {
          const e = (0, i.tV)(n);
          return e ? JSON.parse(e) : (y('Failed to decode base64 JWT payload'), null);
        } catch (o) {
          return y('Caught error parsing JWT payload as JSON', null === o || void 0 === o ? void 0 : o.toString()), null;
        }
      }
      function X(e) {
        const t = Y(e);
        return (
          S(t, 'internal-error'),
          S('undefined' !== typeof t.exp, 'internal-error'),
          S('undefined' !== typeof t.iat, 'internal-error'),
          Number(t.exp) - Number(t.iat)
        );
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function J(e, t, n = !1) {
        if (n) return t;
        try {
          return await t;
        } catch (r) {
          throw (r instanceof i.ZR && Z(r) && e.auth.currentUser === e && (await e.auth.signOut()), r);
        }
      }
      function Z({ code: e }) {
        return 'auth/user-disabled' === e || 'auth/user-token-expired' === e;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ee {
        constructor(e) {
          (this.user = e), (this.isRunning = !1), (this.timerId = null), (this.errorBackoff = 3e4);
        }
        _start() {
          this.isRunning || ((this.isRunning = !0), this.schedule());
        }
        _stop() {
          this.isRunning && ((this.isRunning = !1), null !== this.timerId && clearTimeout(this.timerId));
        }
        getInterval(e) {
          var t;
          if (e) {
            const e = this.errorBackoff;
            return (this.errorBackoff = Math.min(2 * this.errorBackoff, 96e4)), e;
          }
          {
            this.errorBackoff = 3e4;
            const e = null !== (t = this.user.stsTokenManager.expirationTime) && void 0 !== t ? t : 0,
              n = e - Date.now() - 3e5;
            return Math.max(0, n);
          }
        }
        schedule(e = !1) {
          if (!this.isRunning) return;
          const t = this.getInterval(e);
          this.timerId = setTimeout(async () => {
            await this.iteration();
          }, t);
        }
        async iteration() {
          try {
            await this.user.getIdToken(!0);
          } catch (e) {
            return void ('auth/network-request-failed' === (null === e || void 0 === e ? void 0 : e.code) && this.schedule(!0));
          }
          this.schedule();
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class te {
        constructor(e, t) {
          (this.createdAt = e), (this.lastLoginAt = t), this._initializeTime();
        }
        _initializeTime() {
          (this.lastSignInTime = H(this.lastLoginAt)), (this.creationTime = H(this.createdAt));
        }
        _copy(e) {
          (this.createdAt = e.createdAt), (this.lastLoginAt = e.lastLoginAt), this._initializeTime();
        }
        toJSON() {
          return { createdAt: this.createdAt, lastLoginAt: this.lastLoginAt };
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function ne(e) {
        var t;
        const n = e.auth,
          r = await e.getIdToken(),
          i = await J(e, W(n, { idToken: r }));
        S(null === i || void 0 === i ? void 0 : i.users.length, n, 'internal-error');
        const o = i.users[0];
        e._notifyReloadListener(o);
        const s = (null === (t = o.providerUserInfo) || void 0 === t ? void 0 : t.length) ? oe(o.providerUserInfo) : [],
          a = ie(e.providerData, s),
          u = e.isAnonymous,
          c = !(e.email && o.passwordHash) && !(null === a || void 0 === a ? void 0 : a.length),
          l = !!u && c,
          h = {
            uid: o.localId,
            displayName: o.displayName || null,
            photoURL: o.photoUrl || null,
            email: o.email || null,
            emailVerified: o.emailVerified || !1,
            phoneNumber: o.phoneNumber || null,
            tenantId: o.tenantId || null,
            providerData: a,
            metadata: new te(o.createdAt, o.lastLoginAt),
            isAnonymous: l
          };
        Object.assign(e, h);
      }
      async function re(e) {
        const t = (0, i.m9)(e);
        await ne(t), await t.auth._persistUserIfCurrent(t), t.auth._notifyListenersIfCurrent(t);
      }
      function ie(e, t) {
        const n = e.filter(e => !t.some(t => t.providerId === e.providerId));
        return [...n, ...t];
      }
      function oe(e) {
        return e.map(e => {
          var { providerId: t } = e,
            n = s(e, ['providerId']);
          return {
            providerId: t,
            uid: n.rawId || '',
            displayName: n.displayName || null,
            email: n.email || null,
            phoneNumber: n.phoneNumber || null,
            photoURL: n.photoUrl || null
          };
        });
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function se(e, t) {
        const n = await U(e, {}, async () => {
          const n = (0, i.xO)({ grant_type: 'refresh_token', refresh_token: t }).slice(1),
            { tokenApiHost: r, apiKey: o } = e.config,
            s = B(e, r, '/v1/token', `key=${o}`),
            a = await e._getAdditionalHeaders();
          return (a['Content-Type'] = 'application/x-www-form-urlencoded'), D.fetch()(s, { method: 'POST', headers: a, body: n });
        });
        return { accessToken: n.access_token, expiresIn: n.expires_in, refreshToken: n.refresh_token };
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ae {
        constructor() {
          (this.refreshToken = null), (this.accessToken = null), (this.expirationTime = null);
        }
        get isExpired() {
          return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
        }
        updateFromServerResponse(e) {
          S(e.idToken, 'internal-error'),
            S('undefined' !== typeof e.idToken, 'internal-error'),
            S('undefined' !== typeof e.refreshToken, 'internal-error');
          const t = 'expiresIn' in e && 'undefined' !== typeof e.expiresIn ? Number(e.expiresIn) : X(e.idToken);
          this.updateTokensAndExpiration(e.idToken, e.refreshToken, t);
        }
        async getToken(e, t = !1) {
          return (
            S(!this.accessToken || this.refreshToken, e, 'user-token-expired'),
            t || !this.accessToken || this.isExpired
              ? this.refreshToken
                ? (await this.refresh(e, this.refreshToken), this.accessToken)
                : null
              : this.accessToken
          );
        }
        clearRefreshToken() {
          this.refreshToken = null;
        }
        async refresh(e, t) {
          const { accessToken: n, refreshToken: r, expiresIn: i } = await se(e, t);
          this.updateTokensAndExpiration(n, r, Number(i));
        }
        updateTokensAndExpiration(e, t, n) {
          (this.refreshToken = t || null), (this.accessToken = e || null), (this.expirationTime = Date.now() + 1e3 * n);
        }
        static fromJSON(e, t) {
          const { refreshToken: n, accessToken: r, expirationTime: i } = t,
            o = new ae();
          return (
            n && (S('string' === typeof n, 'internal-error', { appName: e }), (o.refreshToken = n)),
            r && (S('string' === typeof r, 'internal-error', { appName: e }), (o.accessToken = r)),
            i && (S('number' === typeof i, 'internal-error', { appName: e }), (o.expirationTime = i)),
            o
          );
        }
        toJSON() {
          return { refreshToken: this.refreshToken, accessToken: this.accessToken, expirationTime: this.expirationTime };
        }
        _assign(e) {
          (this.accessToken = e.accessToken), (this.refreshToken = e.refreshToken), (this.expirationTime = e.expirationTime);
        }
        _clone() {
          return Object.assign(new ae(), this.toJSON());
        }
        _performRefresh() {
          return T('not implemented');
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function ue(e, t) {
        S('string' === typeof e || 'undefined' === typeof e, 'internal-error', { appName: t });
      }
      class ce {
        constructor(e) {
          var { uid: t, auth: n, stsTokenManager: r } = e,
            i = s(e, ['uid', 'auth', 'stsTokenManager']);
          (this.providerId = 'firebase'),
            (this.proactiveRefresh = new ee(this)),
            (this.reloadUserInfo = null),
            (this.reloadListener = null),
            (this.uid = t),
            (this.auth = n),
            (this.stsTokenManager = r),
            (this.accessToken = r.accessToken),
            (this.displayName = i.displayName || null),
            (this.email = i.email || null),
            (this.emailVerified = i.emailVerified || !1),
            (this.phoneNumber = i.phoneNumber || null),
            (this.photoURL = i.photoURL || null),
            (this.isAnonymous = i.isAnonymous || !1),
            (this.tenantId = i.tenantId || null),
            (this.providerData = i.providerData ? [...i.providerData] : []),
            (this.metadata = new te(i.createdAt || void 0, i.lastLoginAt || void 0));
        }
        async getIdToken(e) {
          const t = await J(this, this.stsTokenManager.getToken(this.auth, e));
          return (
            S(t, this.auth, 'internal-error'),
            this.accessToken !== t &&
              ((this.accessToken = t), await this.auth._persistUserIfCurrent(this), this.auth._notifyListenersIfCurrent(this)),
            t
          );
        }
        getIdTokenResult(e) {
          return K(this, e);
        }
        reload() {
          return re(this);
        }
        _assign(e) {
          this !== e &&
            (S(this.uid === e.uid, this.auth, 'internal-error'),
            (this.displayName = e.displayName),
            (this.photoURL = e.photoURL),
            (this.email = e.email),
            (this.emailVerified = e.emailVerified),
            (this.phoneNumber = e.phoneNumber),
            (this.isAnonymous = e.isAnonymous),
            (this.tenantId = e.tenantId),
            (this.providerData = e.providerData.map(e => Object.assign({}, e))),
            this.metadata._copy(e.metadata),
            this.stsTokenManager._assign(e.stsTokenManager));
        }
        _clone(e) {
          const t = new ce(Object.assign(Object.assign({}, this), { auth: e, stsTokenManager: this.stsTokenManager._clone() }));
          return t.metadata._copy(this.metadata), t;
        }
        _onReload(e) {
          S(!this.reloadListener, this.auth, 'internal-error'),
            (this.reloadListener = e),
            this.reloadUserInfo && (this._notifyReloadListener(this.reloadUserInfo), (this.reloadUserInfo = null));
        }
        _notifyReloadListener(e) {
          this.reloadListener ? this.reloadListener(e) : (this.reloadUserInfo = e);
        }
        _startProactiveRefresh() {
          this.proactiveRefresh._start();
        }
        _stopProactiveRefresh() {
          this.proactiveRefresh._stop();
        }
        async _updateTokensIfNecessary(e, t = !1) {
          let n = !1;
          e.idToken && e.idToken !== this.stsTokenManager.accessToken && (this.stsTokenManager.updateFromServerResponse(e), (n = !0)),
            t && (await ne(this)),
            await this.auth._persistUserIfCurrent(this),
            n && this.auth._notifyListenersIfCurrent(this);
        }
        async delete() {
          const e = await this.getIdToken();
          return await J(this, z(this.auth, { idToken: e })), this.stsTokenManager.clearRefreshToken(), this.auth.signOut();
        }
        toJSON() {
          return Object.assign(
            Object.assign(
              {
                uid: this.uid,
                email: this.email || void 0,
                emailVerified: this.emailVerified,
                displayName: this.displayName || void 0,
                isAnonymous: this.isAnonymous,
                photoURL: this.photoURL || void 0,
                phoneNumber: this.phoneNumber || void 0,
                tenantId: this.tenantId || void 0,
                providerData: this.providerData.map(e => Object.assign({}, e)),
                stsTokenManager: this.stsTokenManager.toJSON(),
                _redirectEventId: this._redirectEventId
              },
              this.metadata.toJSON()
            ),
            { apiKey: this.auth.config.apiKey, appName: this.auth.name }
          );
        }
        get refreshToken() {
          return this.stsTokenManager.refreshToken || '';
        }
        static _fromJSON(e, t) {
          var n, r, i, o, s, a, u, c;
          const l = null !== (n = t.displayName) && void 0 !== n ? n : void 0,
            h = null !== (r = t.email) && void 0 !== r ? r : void 0,
            f = null !== (i = t.phoneNumber) && void 0 !== i ? i : void 0,
            d = null !== (o = t.photoURL) && void 0 !== o ? o : void 0,
            p = null !== (s = t.tenantId) && void 0 !== s ? s : void 0,
            g = null !== (a = t._redirectEventId) && void 0 !== a ? a : void 0,
            m = null !== (u = t.createdAt) && void 0 !== u ? u : void 0,
            v = null !== (c = t.lastLoginAt) && void 0 !== c ? c : void 0,
