 (y.prototype.subscribe = function (e, t) {
          return b(e, this._subscribers, t);
        }),
        (y.prototype.subscribeAction = function (e, t) {
          var n = 'function' === typeof e ? { before: e } : e;
          return b(n, this._actionSubscribers, t);
        }),
        (y.prototype.watch = function (e, t, n) {
          var r = this;
          return this._watcherVM.$watch(
            function () {
              return e(r.state, r.getters);
            },
            t,
            n
          );
        }),
        (y.prototype.replaceState = function (e) {
          var t = this;
          this._withCommit(function () {
            t._vm._data.$$state = e;
          });
        }),
        (y.prototype.registerModule = function (e, t, n) {
          void 0 === n && (n = {}),
            'string' === typeof e && (e = [e]),
            this._modules.register(e, t),
            E(this, this.state, e, this._modules.get(e), n.preserveState),
            I(this, this.state);
        }),
        (y.prototype.unregisterModule = function (e) {
          var t = this;
          'string' === typeof e && (e = [e]),
            this._modules.unregister(e),
            this._withCommit(function () {
              var n = O(t.state, e.slice(0, -1));
              v.delete(n, e[e.length - 1]);
            }),
            _(this);
        }),
        (y.prototype.hasModule = function (e) {
          return 'string' === typeof e && (e = [e]), this._modules.isRegistered(e);
        }),
        (y.prototype.hotUpdate = function (e) {
          this._modules.update(e), _(this, !0);
        }),
        (y.prototype._withCommit = function (e) {
          var t = this._committing;
          (this._committing = !0), e(), (this._committing = t);
        }),
        Object.defineProperties(y.prototype, w);
      var P = V(function (e, t) {
          var n = {};
          return (
            F(t).forEach(function (t) {
              var r = t.key,
                i = t.val;
              (n[r] = function () {
                var t = this.$store.state,
                  n = this.$store.getters;
                if (e) {
                  var r = B(this.$store, 'mapState', e);
                  if (!r) return;
                  (t = r.context.state), (n = r.context.getters);
                }
                return 'function' === typeof i ? i.call(this, t, n) : t[i];
              }),
                (n[r].vuex = !0);
            }),
            n
          );
        }),
        D = V(function (e, t) {
          var n = {};
          return (
            F(t).forEach(function (t) {
              var r = t.key,
                i = t.val;
              n[r] = function () {
                var t = [],
                  n = arguments.length;
                while (n--) t[n] = arguments[n];
                var r = this.$store.commit;
                if (e) {
                  var o = B(this.$store, 'mapMutations', e);
                  if (!o) return;
                  r = o.context.commit;
                }
                return 'function' === typeof i ? i.apply(this, [r].concat(t)) : r.apply(this.$store, [i].concat(t));
              };
            }),
            n
          );
        }),
        L = V(function (e, t) {
          var n = {};
          return (
            F(t).forEach(function (t) {
              var r = t.key,
                i = t.val;
              (i = e + i),
                (n[r] = function () {
                  if (!e || B(this.$store, 'mapGetters', e)) return this.$store.getters[i];
                }),
                (n[r].vuex = !0);
            }),
            n
          );
        }),
        j = V(function (e, t) {
          var n = {};
          return (
            F(t).forEach(function (t) {
              var r = t.key,
                i = t.val;
              n[r] = function () {
                var t = [],
                  n = arguments.length;
                while (n--) t[n] = arguments[n];
                var r = this.$store.dispatch;
                if (e) {
                  var o = B(this.$store, 'mapActions', e);
                  if (!o) return;
                  r = o.context.dispatch;
                }
                return 'function' === typeof i ? i.apply(this, [r].concat(t)) : r.apply(this.$store, [i].concat(t));
              };
            }),
            n
          );
        }),
        M = function (e) {
          return { mapState: P.bind(null, e), mapGetters: L.bind(null, e), mapMutations: D.bind(null, e), mapActions: j.bind(null, e) };
        };
      function F(e) {
        return U(e)
          ? Array.isArray(e)
            ? e.map(function (e) {
                return { key: e, val: e };
              })
            : Object.keys(e).map(function (t) {
                return { key: t, val: e[t] };
              })
          : [];
      }
      function U(e) {
        return Array.isArray(e) || l(e);
      }
      function V(e) {
        return function (t, n) {
          return 'string' !== typeof t ? ((n = t), (t = '')) : '/' !== t.charAt(t.length - 1) && (t += '/'), e(t, n);
        };
      }
      function B(e, t, n) {
        var r = e._modulesNamespaceMap[n];
        return r;
      }
      function $(e) {
        void 0 === e && (e = {});
        var t = e.collapsed;
        void 0 === t && (t = !0);
        var n = e.filter;
        void 0 === n &&
          (n = function (e, t, n) {
            return !0;
          });
        var r = e.transformer;
        void 0 === r &&
          (r = function (e) {
            return e;
          });
        var i = e.mutationTransformer;
        void 0 === i &&
          (i = function (e) {
            return e;
          });
        var o = e.actionFilter;
        void 0 === o &&
          (o = function (e, t) {
            return !0;
          });
        var s = e.actionTransformer;
        void 0 === s &&
          (s = function (e) {
            return e;
          });
        var a = e.logMutations;
        void 0 === a && (a = !0);
        var c = e.logActions;
        void 0 === c && (c = !0);
        var l = e.logger;
        return (
          void 0 === l && (l = console),
          function (e) {
            var h = u(e.state);
            'undefined' !== typeof l &&
              (a &&
                e.subscribe(function (e, o) {
                  var s = u(o);
                  if (n(e, h, s)) {
                    var a = G(),
                      c = i(e),
                      f = 'mutation ' + e.type + a;
                    q(l, f, t),
                      l.log('%c prev state', 'color: #9E9E9E; font-weight: bold', r(h)),
                      l.log('%c mutation', 'color: #03A9F4; font-weight: bold', c),
                      l.log('%c next state', 'color: #4CAF50; font-weight: bold', r(s)),
                      z(l);
                  }
                  h = s;
                }),
              c &&
                e.subscribeAction(function (e, n) {
                  if (o(e, n)) {
                    var r = G(),
                      i = s(e),
                      a = 'action ' + e.type + r;
                    q(l, a, t), l.log('%c action', 'color: #03A9F4; font-weight: bold', i), z(l);
                  }
                }));
          }
        );
      }
      function q(e, t, n) {
        var r = n ? e.groupCollapsed : e.group;
        try {
          r.call(e, t);
        } catch (i) {
          e.log(t);
        }
      }
      function z(e) {
        try {
          e.groupEnd();
        } catch (t) {
          e.log('—— log end ——');
        }
      }
      function G() {
        var e = new Date();
        return ' @ ' + H(e.getHours(), 2) + ':' + H(e.getMinutes(), 2) + ':' + H(e.getSeconds(), 2) + '.' + H(e.getMilliseconds(), 3);
      }
      function W(e, t) {
        return new Array(t + 1).join(e);
      }
      function H(e, t) {
        return W('0', t - e.toString().length) + e;
      }
      var K = {
        Store: y,
        install: R,
        version: '3.6.2',
        mapState: P,
        mapMutations: D,
        mapGetters: L,
        mapActions: j,
        createNamespacedHelpers: M,
        createLogger: $
      };
      t.ZP = K;
    },
    66006: (e, t, n) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 });
      var r = n(22275),
        i = o(r);
      function o(e) {
        return e && e.__esModule ? e : { default: e };
      }
      (t['default'] = {
        pauseVideo: { acceptableStates: [i.default.ENDED, i.default.PAUSED], stateChangeRequired: !1 },
        playVideo: { acceptableStates: [i.default.ENDED, i.default.PLAYING], stateChangeRequired: !1 },
        seekTo: { acceptableStates: [i.default.ENDED, i.default.PLAYING, i.default.PAUSED], stateChangeRequired: !0, timeout: 3e3 }
      }),
        (e.exports = t['default']);
    },
    89125: (e, t, n) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 });
      var r = n(11227),
        i = h(r),
        o = n(66006),
        s = h(o),
        a = n(65279),
        u = h(a),
        c = n(28255),
        l = h(c);
      function h(e) {
        return e && e.__esModule ? e : { default: e };
      }
      const f = (0, i.default)('youtube-player'),
        d = {
          proxyEvents: e => {
            const t = {};
            for (const n of u.default) {
              const r = 'on' + n.slice(0, 1).toUpperCase() + n.slice(1);
              t[r] = t => {
                f('event "%s"', r, t), e.trigger(n, t);
              };
            }
            return t;
          },
          promisifyPlayer: (e, t = !1) => {
            const n = {};
            for (const r of l.default)
              t && s.default[r]
                ? (n[r] = (...t) =>
                    e.then(e => {
                      const n = s.default[r],
                        i = e.getPlayerState(),
                        o = e[r].apply(e, t);
                      return n.stateChangeRequired || (Array.isArray(n.acceptableStates) && !n.acceptableStates.includes(i))
                        ? new Promise(t => {
                            const r = () => {
                              const i = e.getPlayerState();
                              let o;
                              'number' === typeof n.timeout &&
                                (o = setTimeout(() => {
                                  e.removeEventListener('onStateChange', r), t();
                                }, n.timeout)),
                                Array.isArray(n.acceptableStates) &&
                                  n.acceptableStates.includes(i) &&
                                  (e.removeEventListener('onStateChange', r), clearTimeout(o), t());
                            };
                            e.addEventListener('onStateChange', r);
                          }).then(() => o)
                        : o;
                    }))
                : (n[r] = (...t) => e.then(e => e[r].apply(e, t)));
            return n;
          }
        };
      (t['default'] = d), (e.exports = t['default']);
    },
    22275: (e, t) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t['default'] = { BUFFERING: 3, ENDED: 0, PAUSED: 2, PLAYING: 1, UNSTARTED: -1, VIDEO_CUED: 5 }),
        (e.exports = t['default']);
    },
    65279: (e, t) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t['default'] = ['ready', 'stateChange', 'playbackQualityChange', 'playbackRateChange', 'error', 'apiChange', 'volumeChange']),
        (e.exports = t['default']);
    },
    28255: (e, t) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t['default'] = [
          'cueVideoById',
          'loadVideoById',
          'cueVideoByUrl',
          'loadVideoByUrl',
          'playVideo',
          'pauseVideo',
          'stopVideo',
          'getVideoLoadedFraction',
          'cuePlaylist',
          'loadPlaylist',
          'nextVideo',
          'previousVideo',
          'playVideoAt',
          'setShuffle',
          'setLoop',
          'getPlaylist',
          'getPlaylistIndex',
          'setOption',
          'mute',
          'unMute',
          'isMuted',
          'setVolume',
          'getVolume',
          'seekTo',
          'getPlayerState',
          'getPlaybackRate',
          'setPlaybackRate',
          'getAvailablePlaybackRates',
          'getPlaybackQuality',
          'setPlaybackQuality',
          'getAvailableQualityLevels',
          'getCurrentTime',
          'getDuration',
          'removeEventListener',
          'getVideoUrl',
          'getVideoEmbedCode',
          'getOptions',
          'getOption',
          'addEventListener',
          'destroy',
          'setSize',
          'getIframe',
          'getSphericalProperties',
          'setSphericalProperties'
        ]),
        (e.exports = t['default']);
    },
    11062: (e, t, n) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 });
      var r = n(33988),
        i = c(r),
        o = n(89125),
        s = c(o),
        a = n(55900),
        u = c(a);
      function c(e) {
        return e && e.__esModule ? e : { default: e };
      }
      let l;
      (t['default'] = (e, t = {}, n = !1) => {
        const r = (0, i.default)();
        if ((l || (l = (0, u.default)(r)), t.events)) throw new Error('Event handlers cannot be overwritten.');
        if ('string' === typeof e && !document.getElementById(e)) throw new Error('Element "' + e + '" does not exist.');
        t.events = s.default.proxyEvents(r);
        const o = new Promise(n => {
            if ('object' === typeof e && e.playVideo instanceof Function) {
              const t = e;
              n(t);
            } else
              l.then(i => {
                const o = new i.Player(e, t);
                return (
                  r.on('ready', () => {
                    n(o);
                  }),
                  null
                );
              });
          }),
          a = s.default.promisifyPlayer(o, n);
        return (a.on = r.on), (a.off = r.off), a;
      }),
        (e.exports = t['default']);
    },
    55900: (e, t, n) => {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 });
      var r = n(49090),
        i = o(r);
      function o(e) {
        return e && e.__esModule ? e : { default: e };
      }
      (t['default'] = e => {
        const t = new Promise(t => {
          if (window.YT && window.YT.Player && window.YT.Player instanceof Function) return void t(window.YT);
          {
            const t = 'http:' === window.location.protocol ? 'http:' : 'https:';
            (0, i.default)(t + '//www.youtube.com/iframe_api', t => {
              t && e.trigger('error', t);
            });
          }
          const n = window.onYouTubeIframeAPIReady;
          window.onYouTubeIframeAPIReady = () => {
            n && n(), t(window.YT);
          };
        });
        return t;
      }),
        (e.exports = t['default']);
    },
    98180: (e, t, n) => {
      'use strict';
      n.d(t, { Z: () => v });
      var r = n(74444),
        i = n(8463),
        o = n(25816),
        s = n(53333);
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class a {
        constructor(e, t) {
          (this._delegate = e),
            (this.firebase = t),
            (0, o._addComponent)(e, new i.wA('app-compat', () => this, 'PUBLIC')),
            (this.container = e.container);
        }
        get automaticDataCollectionEnabled() {
          return this._delegate.automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(e) {
          this._delegate.automaticDataCollectionEnabled = e;
        }
        get name() {
          return this._delegate.name;
        }
        get options() {
          return this._delegate.options;
        }
        delete() {
          return new Promise(e => {
            this._delegate.checkDestroyed(), e();
          }).then(() => (this.firebase.INTERNAL.removeApp(this.name), (0, o.deleteApp)(this._delegate)));
        }
        _getService(e, t = o._DEFAULT_ENTRY_NAME) {
          var n;
          this._delegate.checkDestroyed();
          const r = this._delegate.container.getProvider(e);
          return (
            r.isInitialized() || 'EXPLICIT' !== (null === (n = r.getComponent()) || void 0 === n ? void 0 : n.instantiationMode) || r.initialize(),
            r.getImmediate({ identifier: t })
          );
        }
        _removeServiceInstance(e, t = o._DEFAULT_ENTRY_NAME) {
          this._delegate.container.getProvider(e).clearInstance(t);
        }
        _addComponent(e) {
          (0, o._addComponent)(this._delegate, e);
        }
        _addOrOverwriteComponent(e) {
          (0, o._addOrOverwriteComponent)(this._delegate, e);
        }
        toJSON() {
          return { name: this.name, automaticDataCollectionEnabled: this.automaticDataCollectionEnabled, options: this.options };
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const u = {
          ['no-app']: "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",
          ['invalid-app-argument']: 'firebase.{$appName}() takes either no argument or a Firebase App instance.'
        },
        c = new r.LL('app-compat', 'Firebase', u);
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function l(e) {
        const t = {},
          n = {
            __esModule: !0,
            initializeApp: a,
            app: s,
            registerVersion: o.registerVersion,
            setLogLevel: o.setLogLevel,
            onLog: o.onLog,
            apps: null,
            SDK_VERSION: o.SDK_VERSION,
            INTERNAL: { registerComponent: l, removeApp: i, useAsService: h, modularAPIs: o }
          };
        function i(e) {
          delete t[e];
        }
        function s(e) {
          if (((e = e || o._DEFAULT_ENTRY_NAME), !(0, r.r3)(t, e))) throw c.create('no-app', { appName: e });
          return t[e];
        }
        function a(i, s = {}) {
          const a = o.initializeApp(i, s);
          if ((0, r.r3)(t, a.name)) return t[a.name];
          const u = new e(a, n);
          return (t[a.name] = u), u;
        }
        function u() {
          return Object.keys(t).map(e => t[e]);
        }
        function l(t) {
          const i = t.name,
            a = i.replace('-compat', '');
          if (o._registerComponent(t) && 'PUBLIC' === t.type) {
            const o = (e = s()) => {
              if ('function' !== typeof e[a]) throw c.create('invalid-app-argument', { appName: i });
              return e[a]();
            };
            void 0 !== t.serviceProps && (0, r.ZB)(o, t.serviceProps),
              (n[a] = o),
              (e.prototype[a] = function (...e) {
                const n = this._getService.bind(this, i);
                return n.apply(this, t.multipleInstances ? e : []);
              });
          }
          return 'PUBLIC' === t.type ? n[a] : null;
        }
        function h(e, t) {
          if ('serverAuth' === t) return null;
          const n = t;
          return n;
        }
        return (n['default'] = n), Object.defineProperty(n, 'apps', { get: u }), (s['App'] = e), n;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function h() {
        const e = l(a);
        function t(t) {
          (0, r.ZB)(e, t);
        }
        return (
          (e.INTERNAL = Object.assign(Object.assign({}, e.INTERNAL), {
            createFirebaseNamespace: h,
            extendNamespace: t,
            createSubscribe: r.ne,
            ErrorFactory: r.LL,
            deepExtend: r.ZB
          })),
          e
        );
      }
      const f = h(),
        d = new s.Yd('@firebase/app-compat'),
        p = '@firebase/app-compat',
        g = '0.2.13';
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function m(e) {
        (0, o.registerVersion)(p, g, e);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ if ((0, r.jU)() && void 0 !== self.firebase) {
        d.warn('\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ');
        const e = self.firebase.SDK_VERSION;
        e &&
          e.indexOf('LITE') >= 0 &&
          d.warn(
            '\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    '
          );
      }
      const v = f;
      m();
    },
    25816: (e, t, n) => {
      'use strict';
      n.r(t),
        n.d(t, {
          FirebaseError: () => o.ZR,
          SDK_VERSION: () => ye,
          _DEFAULT_ENTRY_NAME: () => oe,
          _addComponent: () => ce,
          _addOrOverwriteComponent: () => le,
          _apps: () => ae,
          _clearComponents: () => pe,
          _components: () => ue,
          _getProvider: () => fe,
          _registerComponent: () => he,
          _removeServiceInstance: () => de,
          deleteApp: () => Ie,
          getApp: () => be,
          getApps: () => _e,
          initializeApp: () => we,
          onLog: () => Se,
          registerVersion: () => Ee,
          setLogLevel: () => Te
        });
      var r = n(8463),
        i = n(53333),
        o = n(74444);
      const s = (e, t) => t.some(t => e instanceof t);
      let a, u;
      function c() {
        return a || (a = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);
      }
      function l() {
        return u || (u = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);
      }
      const h = new WeakMap(),
        f = new WeakMap(),
        d = new WeakMap(),
        p = new WeakMap(),
        g = new WeakMap();
      function m(e) {
        const t = new Promise((t, n) => {
          const r = () => {
              e.removeEventListener('success', i), e.removeEventListener('error', o);
            },
            i = () => {
              t(I(e.result)), r();
            },
            o = () => {
              n(e.error), r();
            };
          e.addEventListener('success', i), e.addEventListener('error', o);
        });
        return (
          t
            .then(t => {
              t instanceof IDBCursor && h.set(t, e);
            })
            .catch(() => {}),
          g.set(t, e),
          t
        );
      }
      function v(e) {
        if (f.has(e)) return;
        const t = new Promise((t, n) => {
          const r = () => {
              e.removeEventListener('complete', i), e.removeEventListener('error', o), e.removeEventListener('abort', o);
            },
            i = () => {
              t(), r();
            },
            o = () => {
              n(e.error || new DOMException('AbortError', 'AbortError')), r();
            };
          e.addEventListener('complete', i), e.addEventListener('error', o), e.addEventListener('abort', o);
        });
        f.set(e, t);
      }
      let y = {
        get(e, t, n) {
          if (e instanceof IDBTransaction) {
            if ('done' === t) return f.get(e);
            if ('objectStoreNames' === t) return e.objectStoreNames || d.get(e);
            if ('store' === t) return n.objectStoreNames[1] ? void 0 : n.objectStore(n.objectStoreNames[0]);
          }
          return I(e[t]);
        },
        set(e, t, n) {
          return (e[t] = n), !0;
        },
        has(e, t) {
          return (e instanceof IDBTransaction && ('done' === t || 'store' === t)) || t in e;
        }
      };
      function w(e) {
        y = e(y);
      }
      function b(e) {
        return e !== IDBDatabase.prototype.transaction || 'objectStoreNames' in IDBTransaction.prototype
          ? l().includes(e)
            ? function (...t) {
                return e.apply(E(this), t), I(h.get(this));
              }
            : function (...t) {
                return I(e.apply(E(this), t));
              }
          : function (t, ...n) {
              const r = e.call(E(this), t, ...n);
              return d.set(r, t.sort ? t.sort() : [t]), I(r);
            };
      }
      function _(e) {
        return 'function' === typeof e ? b(e) : (e instanceof IDBTransaction && v(e), s(e, c()) ? new Proxy(e, y) : e);
      }
      function I(e) {
        if (e instanceof IDBRequest) return m(e);
        if (p.has(e)) return p.get(e);
        const t = _(e);
        return t !== e && (p.set(e, t), g.set(t, e)), t;
      }
      const E = e => g.get(e);
      function S(e, t, { blocked: n, upgrade: r, blocking: i, terminated: o } = {}) {
        const s = indexedDB.open(e, t),
          a = I(s);
        return (
          r &&
            s.addEventListener('upgradeneeded', e => {
              r(I(s.result), e.oldVersion, e.newVersion, I(s.transaction), e);
            }),
          n && s.addEventListener('blocked', e => n(e.oldVersion, e.newVersion, e)),
          a
            .then(e => {
              o && e.addEventListener('close', () => o()), i && e.addEventListener('versionchange', e => i(e.oldVersion, e.newVersion, e));
            })
            .catch(() => {}),
          a
        );
      }
      const T = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'],
        A = ['put', 'add', 'delete', 'clear'],
        x = new Map();
      function C(e, t) {
        if (!(e instanceof IDBDatabase) || t in e || 'string' !== typeof t) return;
        if (x.get(t)) return x.get(t);
        const n = t.replace(/FromIndex$/, ''),
          r = t !== n,
          i = A.includes(n);
        if (!(n in (r ? IDBIndex : IDBObjectStore).prototype) || (!i && !T.includes(n))) return;
        const o = async function (e, ...t) {
          const o = this.transaction(e, i ? 'readwrite' : 'readonly');
          let s = o.store;
          return r && (s = s.index(t.shift())), (await Promise.all([s[n](...t), i && o.done]))[0];
        };
        return x.set(t, o), o;
      }
      w(e => ({ ...e, get: (t, n, r) => C(t, n) || e.get(t, n, r), has: (t, n) => !!C(t, n) || e.has(t, n) }));
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class k {
        constructor(e) {
          this.container = e;
        }
        getPlatformInfoString() {
          const e = this.container.getProviders();
          return e
            .map(e => {
              if (O(e)) {
                const t = e.getImmediate();
                return `${t.library}/${t.version}`;
              }
              return null;
            })
            .filter(e => e)
            .join(' ');
        }
      }
      function O(e) {
        const t = e.getComponent();
        return 'VERSION' === (null === t || void 0 === t ? void 0 : t.type);
      }
      const N = '@firebase/app',
        R = '0.9.13',
        P = new i.Yd('@firebase/app'),
        D = '@firebase/app-compat',
        L = '@firebase/analytics-compat',
        j = '@firebase/analytics',
        M = '@firebase/app-check-compat',
        F = '@firebase/app-check',
        U = '@firebase/auth',
        V = '@firebase/auth-compat',
        B = '@firebase/database',
        $ = '@firebase/database-compat',
        q = '@firebase/functions',
        z = '@firebase/functions-compat',
        G = '@firebase/installations',
        W = '@firebase/installations-compat',
        H = '@firebase/messaging',
        K = '@firebase/messaging-compat',
        Q = '@firebase/performance',
        Y = '@firebase/performance-compat',
        X = '@firebase/remote-config',
        J = '@firebase/remote-config-compat',
        Z = '@firebase/storage',
        ee = '@firebase/storage-compat',
        te = '@firebase/firestore',
        ne = '@firebase/firestore-compat',
        re = 'firebase',
        ie = '9.23.0',
        oe = '[DEFAULT]',
        se = {
          [N]: 'fire-core',
          [D]: 'fire-core-compat',
          [j]: 'fire-analytics',
          [L]: 'fire-analytics-compat',
          [F]: 'fire-app-check',
          [M]: 'fire-app-check-compat',
          [U]: 'fire-auth',
          [V]: 'fire-auth-compat',
          [B]: 'fire-rtdb',
          [$]: 'fire-rtdb-compat',
          [q]: 'fire-fn',
          [z]: 'fire-fn-compat',
          [G]: 'fire-iid',
          [W]: 'fire-iid-compat',
          [H]: 'fire-fcm',
          [K]: 'fire-fcm-compat',
          [Q]: 'fire-perf',
          [Y]: 'fire-perf-compat',
          [X]: 'fire-rc',
          [J]: 'fire-rc-compat',
          [Z]: 'fire-gcs',
          [ee]: 'fire-gcs-compat',
          [te]: 'fire-fst',
          [ne]: 'fire-fst-compat',
          'fire-js': 'fire-js',
          [re]: 'fire-js-all'
        },
        ae = new Map(),
        ue = new Map();
      function ce(e, t) {
        try {
          e.container.addComponent(t);
        } catch (n) {
          P.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`, n);
        }
      }
      function le(e, t) {
        e.container.addOrOverwriteComponent(t);
      }
      function he(e) {
        const t = e.name;
        if (ue.has(t)) return P.debug(`There were multiple attempts to register component ${t}.`), !1;
        ue.set(t, e);
        for (const n of ae.values()) ce(n, e);
        return !0;
      }
      function fe(e, t) {
        const n = e.container.getProvider('heartbeat').getImmediate({ optional: !0 });
        return n && n.triggerHeartbeat(), e.container.getProvider(t);
      }
      function de(e, t, n = oe) {
        fe(e, t).clearInstance(n);
      }
      function pe() {
        ue.clear();
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ge = {
          ['no-app']: "No Firebase App '{$appName}' has been created - call initializeApp() first",
          ['bad-app-name']: "Illegal App name: '{$appName}",
          ['duplicate-app']: "Firebase App named '{$appName}' already exists with different options or config",
          ['app-deleted']: "Firebase App named '{$appName}' already deleted",
          ['no-options']: 'Need to provide options, when not being deployed to hosting via source.',
          ['invalid-app-argument']: 'firebase.{$appName}() takes either no argument or a Firebase App instance.',
          ['invalid-log-argument']: 'First argument to `onLog` must be null or a function.',
          ['idb-open']: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
          ['idb-get']: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
          ['idb-set']: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
          ['idb-delete']: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'
        },
        me = new o.LL('app', 'Firebase', ge);
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class ve {
        constructor(e, t, n) {
          (this._isDeleted = !1),
            (this._options = Object.assign({}, e)),
            (this._config = Object.assign({}, t)),
            (this._name = t.name),
            (this._automaticDataCollectionEnabled = t.automaticDataCollectionEnabled),
            (this._container = n),
            this.container.addComponent(new r.wA('app', () => this, 'PUBLIC'));
        }
        get automaticDataCollectionEnabled() {
          return this.checkDestroyed(), this._automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(e) {
          this.checkDestroyed(), (this._automaticDataCollectionEnabled = e);
        }
        get name() {
          return this.checkDestroyed(), this._name;
        }
        get options() {
          return this.checkDestroyed(), this._options;
        }
        get config() {
          return this.checkDestroyed(), this._config;
        }
        get container() {
          return this._container;
        }
        get isDeleted() {
          return this._isDeleted;
        }
        set isDeleted(e) {
          this._isDeleted = e;
        }
        checkDestroyed() {
          if (this.isDeleted) throw me.create('app-deleted', { appName: this._name });
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ye = ie;
      function we(e, t = {}) {
        let n = e;
        if ('object' !== typeof t) {
          const e = t;
          t = { name: e };
        }
        const i = Object.assign({ name: oe, automaticDataCollectionEnabled: !1 }, t),
          s = i.name;
        if ('string' !== typeof s || !s) throw me.create('bad-app-name', { appName: String(s) });
        if ((n || (n = (0, o.aH)()), !n)) throw me.create('no-options');
        const a = ae.get(s);
        if (a) {
          if ((0, o.vZ)(n, a.options) && (0, o.vZ)(i, a.config)) return a;
          throw me.create('duplicate-app', { appName: s });
        }
        const u = new r.H0(s);
        for (const r of ue.values()) u.addComponent(r);
        const c = new ve(n, i, u);
        return ae.set(s, c), c;
      }
      function be(e = oe) {
        const t = ae.get(e);
        if (!t && e === oe && (0, o.aH)()) return we();
        if (!t) throw me.create('no-app', { appName: e });
        return t;
      }
      function _e() {
        return Array.from(ae.values());
      }
      async function Ie(e) {
        const t = e.name;
        ae.has(t) && (ae.delete(t), await Promise.all(e.container.getProviders().map(e => e.delete())), (e.isDeleted = !0));
      }
      function Ee(e, t, n) {
        var i;
        let o = null !== (i = se[e]) && void 0 !== i ? i : e;
        n && (o += `-${n}`);
        const s = o.match(/\s|\//),
          a = t.match(/\s|\//);
        if (s || a) {
          const e = [`Unable to register library "${o}" with version "${t}":`];
          return (
            s && e.push(`library name "${o}" contains illegal characters (whitespace or "/")`),
            s && a && e.push('and'),
            a && e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),
            void P.warn(e.join(' '))
          );
        }
        he(new r.wA(`${o}-version`, () => ({ library: o, version: t }), 'VERSION'));
      }
      function Se(e, t) {
        if (null !== e && 'function' !== typeof e) throw me.create('invalid-log-argument');
        (0, i.Am)(e, t);
      }
      function Te(e) {
        (0, i.Ub)(e);
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Ae = 'firebase-heartbeat-database',
        xe = 1,
        Ce = 'firebase-heartbeat-store';
      let ke = null;
      function Oe() {
        return (
          ke ||
            (ke = S(Ae, xe, {
              upgrade: (e, t) => {
                switch (t) {
                  case 0:
                    e.createObjectStore(Ce);
                }
              }
            }).catch(e => {
              throw me.create('idb-open', { originalErrorMessage: e.message });
            })),
          ke
        );
      }
      async function Ne(e) {
        try {
          const t = await Oe(),
            n = await t.transaction(Ce).objectStore(Ce).get(Pe(e));
          return n;
        } catch (t) {
          if (t instanceof o.ZR) P.warn(t.message);
          else {
            const e = me.create('idb-get', { originalErrorMessage: null === t || void 0 === t ? void 0 : t.message });
            P.warn(e.message);
          }
        }
      }
      async function Re(e, t) {
        try {
          const n = await Oe(),
            r = n.transaction(Ce, 'readwrite'),
            i = r.objectStore(Ce);
          await i.put(t, Pe(e)), await r.done;
        } catch (n) {
          if (n instanceof o.ZR) P.warn(n.message);
          else {
            const e = me.create('idb-set', { originalErrorMessage: null === n || void 0 === n ? void 0 : n.message });
            P.warn(e.message);
          }
        }
      }
      function Pe(e) {
        return `${e.name}!${e.options.appId}`;
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const De = 1024,
        Le = 2592e6;
      class je {
        constructor(e) {
          (this.container = e), (this._heartbeatsCache = null);
          const t = this.container.getProvider('app').getImmediate();
          (this._storage = new Ue(t)), (this._heartbeatsCachePromise = this._storage.read().then(e => ((this._heartbeatsCache = e), e)));
        }
        async triggerHeartbeat() {
          const e = this.container.getProvider('platform-logger').getImmediate(),
            t = e.getPlatformInfoString(),
            n = Me();
          if (
            (null === this._heartbeatsCache && (this._heartbeatsCache = await this._heartbeatsCachePromise),
            this._heartbeatsCache.lastSentHeartbeatDate !== n && !this._heartbeatsCache.heartbeats.some(e => e.date === n))
          )
            return (
              this._heartbeatsCache.heartbeats.push({ date: n, agent: t }),
              (this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(e => {
                const t = new Date(e.date).valueOf(),
                  n = Date.now();
                return n - t <= Le;
              })),
              this._storage.overwrite(this._heartbeatsCache)
            );
        }
        async getHeartbeatsHeader() {
          if (
            (null === this._heartbeatsCache && (await this._heartbeatsCachePromise),
            null === this._heartbeatsCache || 0 === this._heartbeatsCache.heartbeats.length)
          )
            return '';
          const e = Me(),
            { heartbeatsToSend: t, unsentEntries: n } = Fe(this._heartbeatsCache.heartbeats),
            r = (0, o.L)(JSON.stringify({ version: 2, heartbeats: t }));
          return (
            (this._heartbeatsCache.lastSentHeartbeatDate = e),
            n.length > 0
              ? ((this._heartbeatsCache.heartbeats = n), await this._storage.overwrite(this._heartbeatsCache))
              : ((this._heartbeatsCache.heartbeats = []), this._storage.overwrite(this._heartbeatsCache)),
            r
          );
        }
      }
      function Me() {
        const e = new Date();
        return e.toISOString().substring(0, 10);
      }
      function Fe(e, t = De) {
        const n = [];
        let r = e.slice();
        for (const i of e) {
          const e = n.find(e => e.agent === i.agent);
          if (e) {
            if ((e.dates.push(i.date), Ve(n) > t)) {
              e.dates.pop();
              break;
            }
          } else if ((n.push({ agent: i.agent, dates: [i.date] }), Ve(n) > t)) {
            n.pop();
            break;
          }
          r = r.slice(1);
        }
        return { heartbeatsToSend: n, unsentEntries: r };
      }
      class Ue {
        constructor(e) {
          (this.app = e), (this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck());
        }
        async runIndexedDBEnvironmentCheck() {
          return (
            !!(0, o.hl)() &&
            (0, o.eu)()
              .then(() => !0)
              .catch(() => !1)
          );
        }
        async read() {
          const e = await this._canUseIndexedDBPromise;
          if (e) {
            const e = await Ne(this.app);
            return e || { heartbeats: [] };
          }
          return { heartbeats: [] };
        }
        async overwrite(e) {
          var t;
          const n = await this._canUseIndexedDBPromise;
          if (n) {
            const n = await this.read();
            return Re(this.app, {
              lastSentHeartbeatDate: null !== (t = e.lastSentHeartbeatDate) && void 0 !== t ? t : n.lastSentHeartbeatDate,
              heartbeats: e.heartbeats
            });
          }
        }
        async add(e) {
          var t;
          const n = await this._canUseIndexedDBPromise;
          if (n) {
            const n = await this.read();
            return Re(this.app, {
              lastSentHeartbeatDate: null !== (t = e.lastSentHeartbeatDate) && void 0 !== t ? t : n.lastSentHeartbeatDate,
              heartbeats: [...n.heartbeats, ...e.heartbeats]
            });
          }
        }
      }
      function Ve(e) {
        return (0, o.L)(JSON.stringify({ version: 2, heartbeats: e })).length;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Be(e) {
        he(new r.wA('platform-logger', e => new k(e), 'PRIVATE')),
          he(new r.wA('heartbeat', e => new je(e), 'PRIVATE')),
          Ee(N, R, e),
          Ee(N, R, 'esm2017'),
          Ee('fire-js', '');
      }
      Be('');
    },
    8463: (e, t, n) => {
      'use strict';
      n.d(t, { H0: () => c, wA: () => i });
      var r = n(74444);
      class i {
        constructor(e, t, n) {
          (this.name = e),
            (this.instanceFactory = t),
            (this.type = n),
            (this.multipleInstances = !1),
            (this.serviceProps = {}),
            (this.instantiationMode = 'LAZY'),
            (this.onInstanceCreated = null);
        }
        setInstantiationMode(e) {
          return (this.instantiationMode = e), this;
        }
        setMultipleInstances(e) {
          return (this.multipleInstances = e), this;
        }
        setServiceProps(e) {
          return (this.serviceProps = e), this;
        }
        setInstanceCreatedCallback(e) {
          return (this.onInstanceCreated = e), this;
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const o = '[DEFAULT]';
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class s {
        constructor(e, t) {
          (this.name = e),
            (this.container = t),
            (this.component = null),
            (this.instances = new Map()),
            (this.instancesDeferred = new Map()),
            (this.instancesOptions = new Map()),
            (this.onInitCallbacks = new Map());
        }
        get(e) {
          const t = this.normalizeInstanceIdentifier(e);
          if (!this.instancesDeferred.has(t)) {
            const e = new r.BH();
            if ((this.instancesDeferred.set(t, e), this.isInitialized(t) || this.shouldAutoInitialize()))
              try {
                const n = this.getOrInitializeService({ instanceIdentifier: t });
                n && e.resolve(n);
              } catch (n) {}
          }
          return this.instancesDeferred.get(t).promise;
        }
        getImmediate(e) {
          var t;
          const n = this.normalizeInstanceIdentifier(null === e || void 0 === e ? void 0 : e.identifier),
            r = null !== (t = null === e || void 0 === e ? void 0 : e.optional) && void 0 !== t && t;
          if (!this.isInitialized(n) && !this.shouldAutoInitialize()) {
            if (r) return null;
            throw Error(`Service ${this.name} is not available`);
          }
          try {
            return this.getOrInitializeService({ instanceIdentifier: n });
          } catch (i) {
            if (r) return null;
            throw i;
          }
        }
        getComponent() {
          return this.component;
        }
        setComponent(e) {
          if (e.name !== this.name) throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);
          if (this.component) throw Error(`Component for ${this.name} has already been provided`);
          if (((this.component = e), this.shouldAutoInitialize())) {
            if (u(e))
              try {
                this.getOrInitializeService({ instanceIdentifier: o });
              } catch (t) {}
            for (const [e, n] of this.instancesDeferred.entries()) {
              const r = this.normalizeInstanceIdentifier(e);
              try {
                const e = this.getOrInitializeService({ instanceIdentifier: r });
                n.resolve(e);
              } catch (t) {}
            }
          }
        }
        clearInstance(e = o) {
          this.instancesDeferred.delete(e), this.instancesOptions.delete(e), this.instances.delete(e);
        }
        async delete() {
          const e = Array.from(this.instances.values());
          await Promise.all([
            ...e.filter(e => 'INTERNAL' in e).map(e => e.INTERNAL.delete()),
            ...e.filter(e => '_delete' in e).map(e => e._delete())
          ]);
        }
        isComponentSet() {
          return null != this.component;
        }
        isInitialized(e = o) {
          return this.instances.has(e);
        }
        getOptions(e = o) {
          return this.instancesOptions.get(e) || {};
        }
        initialize(e = {}) {
          const { options: t = {} } = e,
            n = this.normalizeInstanceIdentifier(e.instanceIdentifier);
          if (this.isInitialized(n)) throw Error(`${this.name}(${n}) has already been initialized`);
          if (!this.isComponentSet()) throw Error(`Component ${this.name} has not been registered yet`);
          const r = this.getOrInitializeService({ instanceIdentifier: n, options: t });
          for (const [i, o] of this.instancesDeferred.entries()) {
            const e = this.normalizeInstanceIdentifier(i);
            n === e && o.resolve(r);
          }
          return r;
        }
        onInit(e, t) {
          var n;
          const r = this.normalizeInstanceIdentifier(t),
            i = null !== (n = this.onInitCallbacks.get(r)) && void 0 !== n ? n : new Set();
          i.add(e), this.onInitCallbacks.set(r, i);
          const o = this.instances.get(r);
          return (
            o && e(o, r),
            () => {
              i.delete(e);
            }
          );
        }
        invokeOnInitCallbacks(e, t) {
          const n = this.onInitCallbacks.get(t);
          if (n)
            for (const i of n)
              try {
                i(e, t);
              } catch (r) {}
        }
        getOrInitializeService({ instanceIdentifier: e, options: t = {} }) {
          let n = this.instances.get(e);
          if (
            !n &&
            this.component &&
            ((n = this.component.instanceFactory(this.container, { instanceIdentifier: a(e), options: t })),
            this.instances.set(e, n),
            this.instancesOptions.set(e, t),
            this.invokeOnInitCallbacks(n, e),
            this.component.onInstanceCreated)
          )
            try {
              this.component.onInstanceCreated(this.container, e, n);
            } catch (r) {}
          return n || null;
        }
        normalizeInstanceIdentifier(e = o) {
          return this.component ? (this.component.multipleInstances ? e : o) : e;
        }
        shouldAutoInitialize() {
          return !!this.component && 'EXPLICIT' !== this.component.instantiationMode;
        }
      }
      function a(e) {
        return e === o ? void 0 : e;
      }
      function u(e) {
        return 'EAGER' === e.instantiationMode;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class c {
        constructor(e) {
          (this.name = e), (this.providers = new Map());
        }
        addComponent(e) {
          const t = this.getProvider(e.name);
          if (t.isComponentSet()) throw new Error(`Component ${e.name} has already been registered with ${this.name}`);
          t.setComponent(e);
        }
        addOrOverwriteComponent(e) {
          const t = this.getProvider(e.name);
          t.isComponentSet() && this.providers.delete(e.name), this.addComponent(e);
        }
        getProvider(e) {
          if (this.providers.has(e)) return this.providers.get(e);
          const t = new s(e, this);
          return this.providers.set(e, t), t;
        }
        getProviders() {
          return Array.from(this.providers.values());
        }
      }
    },
    53333: (e, t, n) => {
      'use strict';
      n.d(t, { Am: () => h, Ub: () => l, Yd: () => c, in: () => i });
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const r = [];
      var i;
      (function (e) {
        (e[(e['DEBUG'] = 0)] = 'DEBUG'),
          (e[(e['VERBOSE'] = 1)] = 'VERBOSE'),
          (e[(e['INFO'] = 2)] = 'INFO'),
          (e[(e['WARN'] = 3)] = 'WARN'),
          (e[(e['ERROR'] = 4)] = 'ERROR'),
          (e[(e['SILENT'] = 5)] = 'SILENT');
      })(i || (i = {}));
      const o = { debug: i.DEBUG, verbose: i.VERBOSE, info: i.INFO, warn: i.WARN, error: i.ERROR, silent: i.SILENT },
        s = i.INFO,
        a = { [i.DEBUG]: 'log', [i.VERBOSE]: 'log', [i.INFO]: 'info', [i.WARN]: 'warn', [i.ERROR]: 'error' },
        u = (e, t, ...n) => {
          if (t < e.logLevel) return;
          const r = new Date().toISOString(),
            i = a[t];
          if (!i) throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);
          console[i](`[${r}]  ${e.name}:`, ...n);
        };
      class c {
        constructor(e) {
          (this.name = e), (this._logLevel = s), (this._logHandler = u), (this._userLogHandler = null), r.push(this);
        }
        get logLevel() {
          return this._logLevel;
        }
        set logLevel(e) {
          if (!(e in i)) throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);
          this._logLevel = e;
        }
        setLogLevel(e) {
          this._logLevel = 'string' === typeof e ? o[e] : e;
        }
        get logHandler() {
          return this._logHandler;
        }
        set logHandler(e) {
          if ('function' !== typeof e) throw new TypeError('Value assigned to `logHandler` must be a function');
          this._logHandler = e;
        }
        get userLogHandler() {
          return this._userLogHandler;
        }
        set userLogHandler(e) {
          this._userLogHandler = e;
        }
        debug(...e) {
          this._userLogHandler && this._userLogHandler(this, i.DEBUG, ...e), this._logHandler(this, i.DEBUG, ...e);
        }
        log(...e) {
          this._userLogHandler && this._userLogHandler(this, i.VERBOSE, ...e), this._logHandler(this, i.VERBOSE, ...e);
        }
        info(...e) {
          this._userLogHandler && this._userLogHandler(this, i.INFO, ...e), this._logHandler(this, i.INFO, ...e);
        }
        warn(...e) {
          this._userLogHandler && this._userLogHandler(this, i.WARN, ...e), this._logHandler(this, i.WARN, ...e);
        }
        error(...e) {
          this._userLogHandler && this._userLogHandler(this, i.ERROR, ...e), this._logHandler(this, i.ERROR, ...e);
        }
      }
      function l(e) {
        r.forEach(t => {
          t.setLogLevel(e);
        });
      }
      function h(e, t) {
        for (const n of r) {
          let r = null;
          t && t.level && (r = o[t.level]),
            (n.userLogHandler =
              null === e
                ? null
                : (t, n, ...o) => {
                    const s = o
                      .map(e => {
                        if (null == e) return null;
                        if ('string' === typeof e) return e;
                        if ('number' === typeof e || 'boolean' === typeof e) return e.toString();
                        if (e instanceof Error) return e.message;
                        try {
                          return JSON.stringify(e);
                        } catch (t) {
                          return null;
                        }
                      })
                      .filter(e => e)
                      .join(' ');
                    n >= (null !== r && void 0 !== r ? r : t.logLevel) && e({ level: i[n].toLowerCase(), message: s, args: o, type: t.name });
                  });
        }
      }
    },
    79865: (e, t, n) => {
      'use strict';
      var r = n(98180),
        i = n(25816),
        o = n(53333),
        s = n(74444),
        a = n(8463);
      const u = (e, t) => t.some(t => e instanceof t);
      let c, l;
      function h() {
        return c || (c = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);
      }
      function f() {
        return l || (l = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);
      }
      const d = new WeakMap(),
        p = new WeakMap(),
        g = new WeakMap(),
        m = new WeakMap(),
        v = new WeakMap();
      function y(e) {
        const t = new Promise((t, n) => {
          const r = () => {
              e.removeEventListener('success', i), e.removeEventListener('error', o);
            },
            i = () => {
              t(S(e.result)), r();
            },
            o = () => {
              n(e.error), r();
            };
          e.addEventListener('success', i), e.addEventListener('error', o);
        });
        return (
          t
            .then(t => {
              t instanceof IDBCursor && d.set(t, e);
            })
            .catch(() => {}),
          v.set(t, e),
          t
        );
      }
      function w(e) {
        if (p.has(e)) return;
        const t = new Promise((t, n) => {
          const r = () => {
              e.removeEventListener('complete', i), e.removeEventListener('error', o), e.removeEventListener('abort', o);
            },
            i = () => {
              t(), r();
            },
            o = () => {
              n(e.error || new DOMException('AbortError', 'AbortError')), r();
            };
          e.addEventListener('complete', i), e.addEventListener('error', o), e.addEventListener('abort', o);
        });
        p.set(e, t);
      }
      let b = {
        get(e, t, n) {
          if (e instanceof IDBTransaction) {
            if ('done' === t) return p.get(e);
            if ('objectStoreNames' === t) return e.objectStoreNames || g.get(e);
            if ('store' === t) return n.objectStoreNames[1] ? void 0 : n.objectStore(n.objectStoreNames[0]);
          }
          return S(e[t]);
        },
        set(e, t, n) {
          return (e[t] = n), !0;
        },
        has(e, t) {
          return (e instanceof IDBTransaction && ('done' === t || 'store' === t)) || t in e;
        }
      };
      function _(e) {
        b = e(b);
      }
      function I(e) {
        return e !== IDBDatabase.prototype.transaction || 'objectStoreNames' in IDBTransaction.prototype
          ? f().includes(e)
            ? function (...t) {
                return e.apply(T(this), t), S(d.get(this));
              }
            : function (...t) {
                return S(e.apply(T(this), t));
              }
          : function (t, ...n) {
              const r = e.call(T(this), t, ...n);
              return g.set(r, t.sort ? t.sort() : [t]), S(r);
            };
      }
      function E(e) {
        return 'function' === typeof e ? I(e) : (e instanceof IDBTransaction && w(e), u(e, h()) ? new Proxy(e, b) : e);
      }
      function S(e) {
        if (e instanceof IDBRequest) return y(e);
        if (m.has(e)) return m.get(e);
        const t = E(e);
        return t !== e && (m.set(e, t), v.set(t, e)), t;
      }
      const T = e => v.get(e);
      function A(e, t, { blocked: n, upgrade: r, blocking: i, terminated: o } = {}) {
        const s = indexedDB.open(e, t),
          a = S(s);
        return (
          r &&
            s.addEventListener('upgradeneeded', e => {
              r(S(s.result), e.oldVersion, e.newVersion, S(s.transaction));
            }),
          n && s.addEventListener('blocked', () => n()),
          a
            .then(e => {
              o && e.addEventListener('close', () => o()), i && e.addEventListener('versionchange', () => i());
            })
            .catch(() => {}),
          a
        );
      }
      const x = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'],
        C = ['put', 'add', 'delete', 'clear'],
        k = new Map();
      function O(e, t) {
        if (!(e instanceof IDBDatabase) || t in e || 'string' !== typeof t) return;
        if (k.get(t)) return k.get(t);
        const n = t.replace(/FromIndex$/, ''),
          r = t !== n,
          i = C.includes(n);
        if (!(n in (r ? IDBIndex : IDBObjectStore).prototype) || (!i && !x.includes(n))) return;
        const o = async function (e, ...t) {
          const o = this.transaction(e, i ? 'readwrite' : 'readonly');
          let s = o.store;
          return r && (s = s.index(t.shift())), (await Promise.all([s[n](...t), i && o.done]))[0];
        };
        return k.set(t, o), o;
      }
      _(e => ({ ...e, get: (t, n, r) => O(t, n) || e.get(t, n, r), has: (t, n) => !!O(t, n) || e.has(t, n) }));
      const N = '@firebase/installations',
        R = '0.6.4',
        P = 1e4,
        D = `w:${R}`,
        L = 'FIS_v2',
        j = 'https://firebaseinstallations.googleapis.com/v1',
        M = 36e5,
        F = 'installations',
        U = 'Installations',
        V = {
          ['missing-app-config-values']: 'Missing App configuration value: "{$valueName}"',
          ['not-registered']: 'Firebase Installation is not registered.',
          ['installation-not-found']: 'Firebase Installation not found.',
          ['request-failed']: '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
          ['app-offline']: 'Could not process request. Application offline.',
          ['delete-pending-registration']: "Can't delete installation while there is a pending registration request."
        },
        B = new s.LL(F, U, V);
      function $(e) {
        return e instanceof s.ZR && e.code.includes('request-failed');
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function q({ projectId: e }) {
        return `${j}/projects/${e}/installations`;
      }
      function z(e) {
        return { token: e.token, requestStatus: 2, expiresIn: Q(e.expiresIn), creationTime: Date.now() };
      }
      async function G(e, t) {
        const n = await t.json(),
          r = n.error;
        return B.create('request-failed', { requestName: e, serverCode: r.code, serverMessage: r.message, serverStatus: r.status });
      }
      function W({ apiKey: e }) {
        return new Headers({ 'Content-Type': 'application/json', Accept: 'application/json', 'x-goog-api-key': e });
      }
      function H(e, { refreshToken: t }) {
        const n = W(e);
        return n.append('Authorization', Y(t)), n;
      }
      async function K(e) {
        const t = await e();
        return t.status >= 500 && t.status < 600 ? e() : t;
      }
      function Q(e) {
        return Number(e.replace('s', '000'));
      }
      function Y(e) {
        return `${L} ${e}`;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function X({ appConfig: e, heartbeatServiceProvider: t }, { fid: n }) {
        const r = q(e),
          i = W(e),
          o = t.getImmediate({ optional: !0 });
        if (o) {
          const e = await o.getHeartbeatsHeader();
          e && i.append('x-firebase-client', e);
        }
        const s = { fid: n, authVersion: L, appId: e.appId, sdkVersion: D },
          a = { method: 'POST', headers: i, body: JSON.stringify(s) },
          u = await K(() => fetch(r, a));
        if (u.ok) {
          const e = await u.json(),
            t = { fid: e.fid || n, registrationStatus: 2, refreshToken: e.refreshToken, authToken: z(e.authToken) };
          return t;
        }
        throw await G('Create Installation', u);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function J(e) {
        return new Promise(t => {
          setTimeout(t, e);
        });
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Z(e) {
        const t = btoa(String.fromCharCode(...e));
        return t.replace(/\+/g, '-').replace(/\//g, '_');
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ee = /^[cdef][\w-]{21}$/,
        te = '';
      function ne() {
        try {
          const e = new Uint8Array(17),
            t = self.crypto || self.msCrypto;
          t.getRandomValues(e), (e[0] = 112 + (e[0] % 16));
          const n = re(e);
          return ee.test(n) ? n : te;
        } catch (e) {
          return te;
        }
      }
      function re(e) {
        const t = Z(e);
        return t.substr(0, 22);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function ie(e) {
        return `${e.appName}!${e.appId}`;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const oe = new Map();
      function se(e, t) {
        const n = ie(e);
        ae(n, t), ue(n, t);
      }
      function ae(e, t) {
        const n = oe.get(e);
        if (n) for (const r of n) r(t);
      }
      function ue(e, t) {
        const n = le();
        n && n.postMessage({ key: e, fid: t }), he();
      }
      let ce = null;
      function le() {
        return (
          !ce &&
            'BroadcastChannel' in self &&
            ((ce = new BroadcastChannel('[Firebase] FID Change')),
            (ce.onmessage = e => {
              ae(e.data.key, e.data.fid);
            })),
          ce
        );
      }
      function he() {
        0 === oe.size && ce && (ce.close(), (ce = null));
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const fe = 'firebase-installations-database',
        de = 1,
        pe = 'firebase-installations-store';
      let ge = null;
      function me() {
        return (
          ge ||
            (ge = A(fe, de, {
              upgrade: (e, t) => {
                switch (t) {
                  case 0:
                    e.createObjectStore(pe);
                }
              }
            })),
          ge
        );
      }
      async function ve(e, t) {
        const n = ie(e),
          r = await me(),
          i = r.transaction(pe, 'readwrite'),
          o = i.objectStore(pe),
          s = await o.get(n);
        return await o.put(t, n), await i.done, (s && s.fid === t.fid) || se(e, t.fid), t;
      }
      async function ye(e) {
        const t = ie(e),
          n = await me(),
          r = n.transaction(pe, 'readwrite');
        await r.objectStore(pe).delete(t), await r.done;
      }
      async function we(e, t) {
        const n = ie(e),
          r = await me(),
          i = r.transaction(pe, 'readwrite'),
          o = i.objectStore(pe),
          s = await o.get(n),
          a = t(s);
        return void 0 === a ? await o.delete(n) : await o.put(a, n), await i.done, !a || (s && s.fid === a.fid) || se(e, a.fid), a;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function be(e) {
        let t;
        const n = await we(e.appConfig, n => {
          const r = _e(n),
            i = Ie(e, r);
          return (t = i.registrationPromise), i.installationEntry;
        });
        return n.fid === te ? { installationEntry: await t } : { installationEntry: n, registrationPromise: t };
      }
      function _e(e) {
        const t = e || { fid: ne(), registrationStatus: 0 };
        return Ae(t);
      }
      function Ie(e, t) {
        if (0 === t.registrationStatus) {
          if (!navigator.onLine) {
            const e = Promise.reject(B.create('app-offline'));
            return { installationEntry: t, registrationPromise: e };
          }
          const n = { fid: t.fid, registrationStatus: 1, registrationTime: Date.now() },
            r = Ee(e, n);
          return { installationEntry: n, registrationPromise: r };
        }
        return 1 === t.registrationStatus ? { installationEntry: t, registrationPromise: Se(e) } : { installationEntry: t };
      }
      async function Ee(e, t) {
        try {
          const n = await X(e, t);
          return ve(e.appConfig, n);
        } catch (n) {
          throw ($(n) && 409 === n.customData.serverCode ? await ye(e.appConfig) : await ve(e.appConfig, { fid: t.fid, registrationStatus: 0 }), n);
        }
      }
      async function Se(e) {
        let t = await Te(e.appConfig);
        while (1 === t.registrationStatus) await J(100), (t = await Te(e.appConfig));
        if (0 === t.registrationStatus) {
          const { installationEntry: t, registrationPromise: n } = await be(e);
          return n || t;
        }
        return t;
      }
      function Te(e) {
        return we(e, e => {
          if (!e) throw B.create('installation-not-found');
          return Ae(e);
        });
      }
      function Ae(e) {
        return xe(e) ? { fid: e.fid, registrationStatus: 0 } : e;
      }
      function xe(e) {
        return 1 === e.registrationStatus && e.registrationTime + P < Date.now();
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ce({ appConfig: e, heartbeatServiceProvider: t }, n) {
        const r = ke(e, n),
          i = H(e, n),
          o = t.getImmediate({ optional: !0 });
        if (o) {
          const e = await o.getHeartbeatsHeader();
          e && i.append('x-firebase-client', e);
        }
        const s = { installation: { sdkVersion: D, appId: e.appId } },
          a = { method: 'POST', headers: i, body: JSON.stringify(s) },
          u = await K(() => fetch(r, a));
        if (u.ok) {
          const e = await u.json(),
            t = z(e);
          return t;
        }
        throw await G('Generate Auth Token', u);
      }
      function ke(e, { fid: t }) {
        return `${q(e)}/${t}/authTokens:generate`;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Oe(e, t = !1) {
        let n;
        const r = await we(e.appConfig, r => {
            if (!De(r)) throw B.create('not-registered');
            const i = r.authToken;
            if (!t && Le(i)) return r;
            if (1 === i.requestStatus) return (n = Ne(e, t)), r;
            {
              if (!navigator.onLine) throw B.create('app-offline');
              const t = Me(r);
              return (n = Pe(e, t)), t;
            }
          }),
          i = n ? await n : r.authToken;
        return i;
      }
      async function Ne(e, t) {
        let n = await Re(e.appConfig);
        while (1 === n.authToken.requestStatus) await J(100), (n = await Re(e.appConfig));
        const r = n.authToken;
        return 0 === r.requestStatus ? Oe(e, t) : r;
      }
      function Re(e) {
        return we(e, e => {
          if (!De(e)) throw B.create('not-registered');
          const t = e.authToken;
          return Fe(t) ? Object.assign(Object.assign({}, e), { authToken: { requestStatus: 0 } }) : e;
        });
      }
      async function Pe(e, t) {
        try {
          const n = await Ce(e, t),
            r = Object.assign(Object.assign({}, t), { authToken: n });
          return await ve(e.appConfig, r), n;
        } catch (n) {
          if (!$(n) || (401 !== n.customData.serverCode && 404 !== n.customData.serverCode)) {
            const n = Object.assign(Object.assign({}, t), { authToken: { requestStatus: 0 } });
            await ve(e.appConfig, n);
          } else await ye(e.appConfig);
          throw n;
        }
      }
      function De(e) {
        return void 0 !== e && 2 === e.registrationStatus;
      }
      function Le(e) {
        return 2 === e.requestStatus && !je(e);
      }
      function je(e) {
        const t = Date.now();
        return t < e.creationTime || e.creationTime + e.expiresIn < t + M;
      }
      function Me(e) {
        const t = { requestStatus: 1, requestTime: Date.now() };
        return Object.assign(Object.assign({}, e), { authToken: t });
      }
      function Fe(e) {
        return 1 === e.requestStatus && e.requestTime + P < Date.now();
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ue(e) {
        const t = e,
          { installationEntry: n, registrationPromise: r } = await be(t);
        return r ? r.catch(console.error) : Oe(t).catch(console.error), n.fid;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ve(e, t = !1) {
        const n = e;
        await Be(n);
        const r = await Oe(n, t);
        return r.token;
      }
      async function Be(e) {
        const { registrationPromise: t } = await be(e);
        t && (await t);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function $e(e) {
        if (!e || !e.options) throw qe('App Configuration');
        if (!e.name) throw qe('App Name');
        const t = ['projectId', 'apiKey', 'appId'];
        for (const n of t) if (!e.options[n]) throw qe(n);
        return { appName: e.name, projectId: e.options.projectId, apiKey: e.options.apiKey, appId: e.options.appId };
      }
      function qe(e) {
        return B.create('missing-app-config-values', { valueName: e });
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ze = 'installations',
        Ge = 'installations-internal',
        We = e => {
          const t = e.getProvider('app').getImmediate(),
            n = $e(t),
            r = (0, i._getProvider)(t, 'heartbeat'),
            o = { app: t, appConfig: n, heartbeatServiceProvider: r, _delete: () => Promise.resolve() };
          return o;
        },
        He = e => {
          const t = e.getProvider('app').getImmediate(),
            n = (0, i._getProvider)(t, ze).getImmediate(),
            r = { getId: () => Ue(n), getToken: e => Ve(n, e) };
          return r;
        };
      function Ke() {
        (0, i._registerComponent)(new a.wA(ze, We, 'PUBLIC')), (0, i._registerComponent)(new a.wA(Ge, He, 'PRIVATE'));
      }
      Ke(), (0, i.registerVersion)(N, R), (0, i.registerVersion)(N, R, 'esm2017');
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const Qe = 'analytics',
        Ye = 'firebase_id',
        Xe = 'origin',
        Je = 6e4,
        Ze = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig',
        et = 'https://www.googletagmanager.com/gtag/js',
        tt = new o.Yd('@firebase/analytics'),
        nt = {
          ['already-exists']:
            'A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.',
          ['already-initialized']:
            'initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.',
          ['already-initialized-settings']:
            'Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.',
          ['interop-component-reg-failed']: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',
          ['invalid-analytics-context']:
            'Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}',
          ['indexeddb-unavailable']:
            'IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}',
          ['fetch-throttle']:
            'The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
          ['config-fetch-failed']: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',
          ['no-api-key']:
            'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',
          ['no-app-id']: 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',
          ['no-client-id']: 'The "client_id" field is empty.',
          ['invalid-gtag-resource']: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'
        },
        rt = new s.LL('analytics', 'Analytics', nt);
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function it(e) {
        if (!e.startsWith(et)) {
          const t = rt.create('invalid-gtag-resource', { gtagURL: e });
          return tt.warn(t.message), '';
        }
        return e;
      }
      function ot(e) {
        return Promise.all(e.map(e => e.catch(e => e)));
      }
      function st(e, t) {
        let n;
        return window.trustedTypes && (n = window.trustedTypes.createPolicy(e, t)), n;
      }
      function at(e, t) {
        const n = st('firebase-js-sdk-policy', { createScriptURL: it }),
          r = document.createElement('script'),
          i = `${et}?l=${e}&id=${t}`;
        (r.src = n ? (null === n || void 0 === n ? void 0 : n.createScriptURL(i)) : i), (r.async = !0), document.head.appendChild(r);
      }
      function ut(e) {
        let t = [];
        return Array.isArray(window[e]) ? (t = window[e]) : (window[e] = t), t;
      }
      async function ct(e, t, n, r, i, o) {
        const s = r[i];
        try {
          if (s) await t[s];
          else {
            const e = await ot(n),
              r = e.find(e => e.measurementId === i);
            r && (await t[r.appId]);
          }
        } catch (a) {
          tt.error(a);
        }
        e('config', i, o);
      }
      async function lt(e, t, n, r, i) {
        try {
          let o = [];
          if (i && i['send_to']) {
            let e = i['send_to'];
            Array.isArray(e) || (e = [e]);
            const r = await ot(n);
            for (const n of e) {
              const e = r.find(e => e.measurementId === n),
                i = e && t[e.appId];
              if (!i) {
                o = [];
                break;
              }
              o.push(i);
            }
          }
          0 === o.length && (o = Object.values(t)), await Promise.all(o), e('event', r, i || {});
        } catch (o) {
          tt.error(o);
        }
      }
      function ht(e, t, n, r) {
        async function i(i, ...o) {
          try {
            if ('event' === i) {
              const [r, i] = o;
              await lt(e, t, n, r, i);
            } else if ('config' === i) {
              const [i, s] = o;
              await ct(e, t, n, r, i, s);
            } else if ('consent' === i) {
              const [t] = o;
              e('consent', 'update', t);
            } else if ('get' === i) {
              const [t, n, r] = o;
              e('get', t, n, r);
            } else if ('set' === i) {
              const [t] = o;
              e('set', t);
            } else e(i, ...o);
          } catch (s) {
            tt.error(s);
          }
        }
        return i;
      }
      function ft(e, t, n, r, i) {
        let o = function (...e) {
          window[r].push(arguments);
        };
        return window[i] && 'function' === typeof window[i] && (o = window[i]), (window[i] = ht(o, e, t, n)), { gtagCore: o, wrappedGtag: window[i] };
      }
      function dt(e) {
        const t = window.document.getElementsByTagName('script');
        for (const n of Object.values(t)) if (n.src && n.src.includes(et) && n.src.includes(e)) return n;
        return null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const pt = 30,
        gt = 1e3;
      class mt {
        constructor(e = {}, t = gt) {
          (this.throttleMetadata = e), (this.intervalMillis = t);
        }
        getThrottleMetadata(e) {
          return this.throttleMetadata[e];
        }
        setThrottleMetadata(e, t) {
          this.throttleMetadata[e] = t;
        }
        deleteThrottleMetadata(e) {
          delete this.throttleMetadata[e];
        }
      }
      const vt = new mt();
      function yt(e) {
        return new Headers({ Accept: 'application/json', 'x-goog-api-key': e });
      }
      async function wt(e) {
        var t;
        const { appId: n, apiKey: r } = e,
          i = { method: 'GET', headers: yt(r) },
          o = Ze.replace('{app-id}', n),
          s = await fetch(o, i);
        if (200 !== s.status && 304 !== s.status) {
          let e = '';
          try {
            const n = await s.json();
            (null === (t = n.error) || void 0 === t ? void 0 : t.message) && (e = n.error.message);
          } catch (a) {}
          throw rt.create('config-fetch-failed', { httpStatus: s.status, responseMessage: e });
        }
        return s.json();
      }
      async function bt(e, t = vt, n) {
        const { appId: r, apiKey: i, measurementId: o } = e.options;
        if (!r) throw rt.create('no-app-id');
        if (!i) {
          if (o) return { measurementId: o, appId: r };
          throw rt.create('no-api-key');
        }
        const s = t.getThrottleMetadata(r) || { backoffCount: 0, throttleEndTimeMillis: Date.now() },
          a = new St();
        return (
          setTimeout(
            async () => {
              a.abort();
            },
            void 0 !== n ? n : Je
          ),
          _t({ appId: r, apiKey: i, measurementId: o }, s, a, t)
        );
      }
      async function _t(e, { throttleEndTimeMillis: t, backoffCount: n }, r, i = vt) {
        var o;
        const { appId: a, measurementId: u } = e;
        try {
          await It(r, t);
        } catch (c) {
          if (u)
            return (
              tt.warn(
                `Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${u} provided in the "measurementId" field in the local Firebase config. [${null === c || void 0 === c ? void 0 : c.message}]`
              ),
              { appId: a, measurementId: u }
            );
          throw c;
        }
        try {
          const t = await wt(e);
          return i.deleteThrottleMetadata(a), t;
        } catch (c) {
          const t = c;
          if (!Et(t)) {
            if ((i.deleteThrottleMetadata(a), u))
              return (
                tt.warn(
                  `Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${u} provided in the "measurementId" field in the local Firebase config. [${null === t || void 0 === t ? void 0 : t.message}]`
                ),
                { appId: a, measurementId: u }
              );
            throw c;
          }
          const l =
              503 === Number(null === (o = null === t || void 0 === t ? void 0 : t.customData) || void 0 === o ? void 0 : o.httpStatus)
                ? (0, s.$s)(n, i.intervalMillis, pt)
                : (0, s.$s)(n, i.intervalMillis),
            h = { throttleEndTimeMillis: Date.now() + l, backoffCount: n + 1 };
          return i.setThrottleMetadata(a, h), tt.debug(`Calling attemptFetch again in ${l} millis`), _t(e, h, r, i);
        }
      }
      function It(e, t) {
        return new Promise((n, r) => {
          const i = Math.max(t - Date.now(), 0),
            o = setTimeout(n, i);
          e.addEventListener(() => {
            clearTimeout(o), r(rt.create('fetch-throttle', { throttleEndTimeMillis: t }));
          });
        });
      }
      function Et(e) {
        if (!(e instanceof s.ZR) || !e.customData) return !1;
        const t = Number(e.customData['httpStatus']);
        return 429 === t || 500 === t || 503 === t || 504 === t;
      }
      class St {
        constructor() {
          this.listeners = [];
        }
        addEventListener(e) {
          this.listeners.push(e);
        }
        abort() {
          this.listeners.forEach(e => e());
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ let Tt, At;
      async function xt(e, t, n, r, i) {
        if (i && i.global) e('event', n, r);
        else {
          const i = await t,
            o = Object.assign(Object.assign({}, r), { send_to: i });
          e('event', n, o);
        }
      }
      async function Ct(e, t, n, r) {
        if (r && r.global) return e('set', { screen_name: n }), Promise.resolve();
        {
          const r = await t;
          e('config', r, { update: !0, screen_name: n });
        }
      }
      async function kt(e, t, n, r) {
        if (r && r.global) return e('set', { user_id: n }), Promise.resolve();
        {
          const r = await t;
          e('config', r, { update: !0, user_id: n });
        }
      }
      async function Ot(e, t, n, r) {
        if (r && r.global) {
          const t = {};
          for (const e of Object.keys(n)) t[`user_properties.${e}`] = n[e];
          return e('set', t), Promise.resolve();
        }
        {
          const r = await t;
          e('config', r, { update: !0, user_properties: n });
        }
      }
      async function Nt(e, t) {
        const n = await e;
        window[`ga-disable-${n}`] = !t;
      }
      function Rt(e) {
        At = e;
      }
      function Pt(e) {
        Tt = e;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Dt() {
        if (!(0, s.hl)())
          return tt.warn(rt.create('indexeddb-unavailable', { errorInfo: 'IndexedDB is not available in this environment.' }).message), !1;
        try {
          await (0, s.eu)();
        } catch (e) {
          return tt.warn(rt.create('indexeddb-unavailable', { errorInfo: null === e || void 0 === e ? void 0 : e.toString() }).message), !1;
        }
        return !0;
      }
      async function Lt(e, t, n, r, i, o, s) {
        var a;
        const u = bt(e);
        u
          .then(t => {
            (n[t.measurementId] = t.appId),
              e.options.measurementId &&
                t.measurementId !== e.options.measurementId &&
                tt.warn(
                  `The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`
                );
          })
          .catch(e => tt.error(e)),
          t.push(u);
        const c = Dt().then(e => (e ? r.getId() : void 0)),
          [l, h] = await Promise.all([u, c]);
        dt(o) || at(o, l.measurementId), At && (i('consent', 'default', At), Rt(void 0)), i('js', new Date());
        const f = null !== (a = null === s || void 0 === s ? void 0 : s.config) && void 0 !== a ? a : {};
        return (
          (f[Xe] = 'firebase'),
          (f.update = !0),
          null != h && (f[Ye] = h),
          i('config', l.measurementId, f),
          Tt && (i('set', Tt), Pt(void 0)),
          l.measurementId
        );
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class jt {
        constructor(e) {
          this.app = e;
        }
        _delete() {
          return delete Mt[this.app.options.appId], Promise.resolve();
        }
      }
      let Mt = {},
        Ft = [];
      const Ut = {};
      let Vt,
        Bt,
        $t = 'dataLayer',
        qt = 'gtag',
        zt = !1;
      function Gt(e) {
        if (zt) throw rt.create('already-initialized');
        e.dataLayerName && ($t = e.dataLayerName), e.gtagName && (qt = e.gtagName);
      }
      function Wt() {
        const e = [];
        if (((0, s.ru)() && e.push('This is a browser extension environment.'), (0, s.zI)() || e.push('Cookies are not available.'), e.length > 0)) {
          const t = e.map((e, t) => `(${t + 1}) ${e}`).join(' '),
            n = rt.create('invalid-analytics-context', { errorInfo: t });
          tt.warn(n.message);
        }
      }
      function Ht(e, t, n) {
        Wt();
        const r = e.options.appId;
        if (!r) throw rt.create('no-app-id');
        if (!e.options.apiKey) {
          if (!e.options.measurementId) throw rt.create('no-api-key');
          tt.warn(
            `The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`
          );
        }
        if (null != Mt[r]) throw rt.create('already-exists', { id: r });
        if (!zt) {
          ut($t);
          const { wrappedGtag: e, gtagCore: t } = ft(Mt, Ft, Ut, $t, qt);
          (Bt = e), (Vt = t), (zt = !0);
        }
        Mt[r] = Lt(e, Ft, Ut, t, Vt, $t, n);
        const i = new jt(e);
        return i;
      }
      async function Kt() {
        if ((0, s.ru)()) return !1;
        if (!(0, s.zI)()) return !1;
        if (!(0, s.hl)()) return !1;
        try {
          const e = await (0, s.eu)();
          return e;
        } catch (e) {
          return !1;
        }
      }
      function Qt(e, t, n) {
        (e = (0, s.m9)(e)), Ct(Bt, Mt[e.app.options.appId], t, n).catch(e => tt.error(e));
      }
      function Yt(e, t, n) {
        (e = (0, s.m9)(e)), kt(Bt, Mt[e.app.options.appId], t, n).catch(e => tt.error(e));
      }
      function Xt(e, t, n) {
        (e = (0, s.m9)(e)), Ot(Bt, Mt[e.app.options.appId], t, n).catch(e => tt.error(e));
      }
      function Jt(e, t) {
        (e = (0, s.m9)(e)), Nt(Mt[e.app.options.appId], t).catch(e => tt.error(e));
      }
      function Zt(e, t, n, r) {
        (e = (0, s.m9)(e)), xt(Bt, Mt[e.app.options.appId], t, n, r).catch(e => tt.error(e));
      }
      const en = '@firebase/analytics',
        tn = '0.10.0';
      function nn() {
        function e(e) {
          try {
            const t = e.getProvider(Qe).getImmediate();
            return { logEvent: (e, n, r) => Zt(t, e, n, r) };
          } catch (t) {
            throw rt.create('interop-component-reg-failed', { reason: t });
          }
        }
        (0, i._registerComponent)(
          new a.wA(
            Qe,
            (e, { options: t }) => {
              const n = e.getProvider('app').getImmediate(),
                r = e.getProvider('installations-internal').getImmediate();
              return Ht(n, r, t);
            },
            'PUBLIC'
          )
        ),
          (0, i._registerComponent)(new a.wA('analytics-internal', e, 'PRIVATE')),
          (0, i.registerVersion)(en, tn),
          (0, i.registerVersion)(en, tn, 'esm2017');
      }
      nn();
      const rn = '@firebase/analytics-compat',
        on = '0.2.6';
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class sn {
        constructor(e, t) {
          (this.app = e), (this._delegate = t);
        }
        logEvent(e, t, n) {
          Zt(this._delegate, e, t, n);
        }
        setCurrentScreen(e, t) {
          Qt(this._delegate, e, t);
        }
        setUserId(e, t) {
          Yt(this._delegate, e, t);
        }
        setUserProperties(e, t) {
          Xt(this._delegate, e, t);
        }
        setAnalyticsCollectionEnabled(e) {
          Jt(this._delegate, e);
        }
      }
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ var an;
      (function (e) {
        (e['ADD_SHIPPING_INFO'] = 'add_shipping_info'),
          (e['ADD_PAYMENT_INFO'] = 'add_payment_info'),
          (e['ADD_TO_CART'] = 'add_to_cart'),
          (e['ADD_TO_WISHLIST'] = 'add_to_wishlist'),
          (e['BEGIN_CHECKOUT'] = 'begin_checkout'),
          (e['CHECKOUT_PROGRESS'] = 'checkout_progress'),
          (e['EXCEPTION'] = 'exception'),
          (e['GENERATE_LEAD'] = 'generate_lead'),
          (e['LOGIN'] = 'login'),
          (e['PAGE_VIEW'] = 'page_view'),
          (e['PURCHASE'] = 'purchase'),
          (e['REFUND'] = 'refund'),
          (e['REMOVE_FROM_CART'] = 'remove_from_cart'),
          (e['SCREEN_VIEW'] = 'screen_view'),
          (e['SEARCH'] = 'search'),
          (e['SELECT_CONTENT'] = 'select_content'),
          (e['SELECT_ITEM'] = 'select_item'),
          (e['SELECT_PROMOTION'] = 'select_promotion'),
          (e['SET_CHECKOUT_OPTION'] = 'set_checkout_option'),
          (e['SHARE'] = 'share'),
          (e['SIGN_UP'] = 'sign_up'),
          (e['TIMING_COMPLETE'] = 'timing_complete'),
          (e['VIEW_CART'] = 'view_cart'),
          (e['VIEW_ITEM'] = 'view_item'),
          (e['VIEW_ITEM_LIST'] = 'view_item_list'),
          (e['VIEW_PROMOTION'] = 'view_promotion'),
          (e['VIEW_SEARCH_RESULTS'] = 'view_search_results');
      })(an || (an = {}));
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const un = e => {
        const t = e.getProvider('app-compat').getImmediate(),
          n = e.getProvider('analytics').getImmediate();
        return new sn(t, n);
      };
      function cn() {
        const e = { Analytics: sn, settings: Gt, isSupported: Kt, EventName: an };
        r.Z.INTERNAL.registerComponent(new a.wA('analytics-compat', un, 'PUBLIC').setServiceProps(e).setMultipleInstances(!0));
      }
      cn(), r.Z.registerVersion(rn, on);
    },
    44866: (e, t, n) => {
      'use strict';
      n.d(t, { Z: () => r.Z });
      var r = n(98180),
        i = 'firebase',
        o = '9.23.0';
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      r.Z.registerVersion(i, o, 'app-compat');
    },
    87481: (e, t, n) => {
      'use strict';
      var r = n(98180),
        i = n(74444),
        o = n(25816);
      function s(e, t) {
        var n = {};
        for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);
        if (null != e && 'function' === typeof Object.getOwnPropertySymbols) {
          var i = 0;
          for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
            t.indexOf(r[i]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[i]) && (n[r[i]] = e[r[i]]);
        }
        return n;
      }
      Object.create;
      Object.create;
      var a = n(53333),
        u = n(8463);
      /**
       * @license
       * Copyright 2021 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const c = {
          FACEBOOK: 'facebook.com',
          GITHUB: 'github.com',
          GOOGLE: 'google.com',
          PASSWORD: 'password',
          PHONE: 'phone',
          TWITTER: 'twitter.com'
        },
        l = {
          EMAIL_SIGNIN: 'EMAIL_SIGNIN',
          PASSWORD_RESET: 'PASSWORD_RESET',
          RECOVER_EMAIL: 'RECOVER_EMAIL',
          REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',
          VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',
          VERIFY_EMAIL: 'VERIFY_EMAIL'
        };
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function h() {
        return {
          ['admin-restricted-operation']: 'This operation is restricted to administrators only.',
          ['argument-error']: '',
          ['app-not-authorized']:
            "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
          ['app-not-installed']:
            'The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.',
          ['captcha-check-failed']:
            'The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.',
          ['code-expired']: 'The SMS code has expired. Please re-send the verification code to try again.',
          ['cordova-not-ready']: 'Cordova framework is not ready.',
          ['cors-unsupported']: 'This browser is not supported.',
          ['credential-already-in-use']: 'This credential is already associated with a different user account.',
          ['custom-token-mismatch']: 'The custom token corresponds to a different audience.',
          ['requires-recent-login']: 'This operation is sensitive and requires recent authentication. Log in again before retrying this request.',
          ['dependent-sdk-initialized-before-auth']:
            'Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.',
          ['dynamic-link-not-activated']: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.',
          ['email-change-needs-verification']: 'Multi-factor users must always have a verified email.',
          ['email-already-in-use']: 'The email address is already in use by another account.',
          ['emulator-config-failed']:
            'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling "connectAuthEmulator()" sooner.',
          ['expired-action-code']: 'The action code has expired.',
          ['cancelled-popup-request']: 'This operation has been cancelled due to another conflicting popup being opened.',
          ['internal-error']: 'An internal AuthError has occurred.',
          ['invalid-app-credential']:
            'The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.',
          ['invalid-app-id']: 'The mobile app identifier is not registed for the current project.',
          ['invalid-user-token']:
            "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
          ['invalid-auth-event']: 'An internal AuthError has occurred.',
          ['invalid-verification-code']:
            'The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.',
          ['invalid-continue-uri']: 'The continue URL provided in the request is invalid.',
          ['invalid-cordova-configuration']:
            'The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.',
          ['invalid-custom-token']: 'The custom token format is incorrect. Please check the documentation.',
          ['invalid-dynamic-link-domain']: 'The provided dynamic link domain is not configured or authorized for the current project.',
          ['invalid-email']: 'The email address is badly formatted.',
          ['invalid-emulator-scheme']: 'Emulator URL must start with a valid scheme (http:// or https://).',
          ['invalid-api-key']: 'Your API key is invalid, please check you have copied it correctly.',
          ['invalid-cert-hash']: 'The SHA-1 certificate hash provided is invalid.',
          ['invalid-credential']: 'The supplied auth credential is malformed or has expired.',
          ['invalid-message-payload']:
            'The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.',
          ['invalid-multi-factor-session']: 'The request does not contain a valid proof of first factor successful sign-in.',
          ['invalid-oauth-provider']: 'EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.',
          ['invalid-oauth-client-id']: 'The OAuth client ID provided is either invalid or does not match the specified API key.',
          ['unauthorized-domain']:
            'This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.',
          ['invalid-action-code']: 'The action code is invalid. This can happen if the code is malformed, expired, or has already been used.',
          ['wrong-password']: 'The password is invalid or the user does not have a password.',
          ['invalid-persistence-type']: 'The specified persistence type is invalid. It can only be local, session or none.',
          ['invalid-phone-number']:
            'The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].',
          ['invalid-provider-id']: 'The specified provider ID is invalid.',
          ['invalid-recipient-email']: 'The email corresponding to this action failed to send as the provided recipient email address is invalid.',
          ['invalid-sender']:
            'The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.',
          ['invalid-verification-id']: 'The verification ID used to create the phone auth credential is invalid.',
          ['invalid-tenant-id']: "The Auth instance's tenant ID is invalid.",
          ['login-blocked']: 'Login blocked by user-provided method: {$originalMessage}',
          ['missing-android-pkg-name']: 'An Android Package Name must be provided if the Android App is required to be installed.',
          ['auth-domain-config-required']:
            'Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.',
          ['missing-app-credential']:
            'The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.',
          ['missing-verification-code']: 'The phone auth credential was created with an empty SMS verification code.',
          ['missing-continue-uri']: 'A continue URL must be provided in the request.',
          ['missing-iframe-start']: 'An internal AuthError has occurred.',
          ['missing-ios-bundle-id']: 'An iOS Bundle ID must be provided if an App Store ID is provided.',
          ['missing-or-invalid-nonce']:
            'The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.',
          ['missing-password']: 'A non-empty password must be provided',
          ['missing-multi-factor-info']: 'No second factor identifier is provided.',
          ['missing-multi-factor-session']: 'The request is missing proof of first factor successful sign-in.',
          ['missing-phone-number']: 'To send verification codes, provide a phone number for the recipient.',
          ['missing-verification-id']: 'The phone auth credential was created with an empty verification ID.',
          ['app-deleted']: 'This instance of FirebaseApp has been deleted.',
          ['multi-factor-info-not-found']: 'The user does not have a second factor matching the identifier provided.',
          ['multi-factor-auth-required']: 'Proof of ownership of a second factor is required to complete sign-in.',
          ['account-exists-with-different-credential']:
            'An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.',
          ['network-request-failed']: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
          ['no-auth-event']: 'An internal AuthError has occurred.',
          ['no-such-provider']: 'User was not linked to an account with the given provider.',
          ['null-user']: 'A null user object was provided as the argument for an operation which requires a non-null user object.',
          ['operation-not-allowed']:
            'The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.',
          ['operation-not-supported-in-this-environment']:
            'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
          ['popup-blocked']: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
          ['popup-closed-by-user']: 'The popup has been closed by the user before finalizing the operation.',
          ['provider-already-linked']: 'User can only be linked to one identity for the given provider.',
          ['quota-exceeded']: "The project's quota for this operation has been exceeded.",
          ['redirect-cancelled-by-user']: 'The redirect operation has been cancelled by the user before finalizing.',
          ['redirect-operation-pending']: 'A redirect sign-in operation is already pending.',
          ['rejected-credential']: 'The request contains malformed or mismatching credentials.',
          ['second-factor-already-in-use']: 'The second factor is already enrolled on this account.',
          ['maximum-second-factor-count-exceeded']: 'The maximum allowed number of second factors on a user has been exceeded.',
          ['tenant-id-mismatch']: "The provided tenant ID does not match the Auth instance's tenant ID",
          ['timeout']: 'The operation has timed out.',
          ['user-token-expired']: "The user's credential is no longer valid. The user must sign in again.",
          ['too-many-requests']: 'We have blocked all requests from this device due to unusual activity. Try again later.',
          ['unauthorized-continue-uri']: 'The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.',
          ['unsupported-first-factor']:
            'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
          ['unsupported-persistence-type']: 'The current environment does not support the specified persistence type.',
          ['unsupported-tenant-operation']: 'This operation is not supported in a multi-tenant context.',
          ['unverified-email']: 'The operation requires a verified email.',
          ['user-cancelled']: 'The user did not grant your application the permissions it requested.',
          ['user-not-found']: 'There is no user record corresponding to this identifier. The user may have been deleted.',
          ['user-disabled']: 'The user account has been disabled by an administrator.',
          ['user-mismatch']: 'The supplied credentials do not correspond to the previously signed in user.',
          ['user-signed-out']: '',
          ['weak-password']: 'The password must be 6 characters long or more.',
          ['web-storage-unsupported']: 'This browser is not supported or 3rd party cookies and data may be disabled.',
          ['already-initialized']:
            'initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance.',
          ['missing-recaptcha-token']: 'The reCAPTCHA token is missing when sending request to the backend.',
          ['invalid-recaptcha-token']: 'The reCAPTCHA token is invalid when sending request to the backend.',
          ['invalid-recaptcha-action']: 'The reCAPTCHA action is invalid when sending request to the backend.',
          ['recaptcha-not-enabled']: 'reCAPTCHA Enterprise integration is not enabled for this project.',
          ['missing-client-type']: 'The reCAPTCHA client type is missing when sending request to the backend.',
          ['missing-recaptcha-version']: 'The reCAPTCHA version is missing when sending request to the backend.',
          ['invalid-req-type']: 'Invalid request parameters.',
          ['invalid-recaptcha-version']: 'The reCAPTCHA version is invalid when sending request to the backend.'
        };
      }
      function f() {
        return {
          ['dependent-sdk-initialized-before-auth']:
            'Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.'
        };
      }
      const d = h,
        p = f,
        g = new i.LL('auth', 'Firebase', f()),
        m = new a.Yd('@firebase/auth');
      function v(e, ...t) {
        m.logLevel <= a['in'].WARN && m.warn(`Auth (${o.SDK_VERSION}): ${e}`, ...t);
      }
      function y(e, ...t) {
        m.logLevel <= a['in'].ERROR && m.error(`Auth (${o.SDK_VERSION}): ${e}`, ...t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function w(e, ...t) {
        throw E(e, ...t);
      }
      function b(e, ...t) {
        return E(e, ...t);
      }
      function _(e, t, n) {
        const r = Object.assign(Object.assign({}, p()), { [t]: n }),
          o = new i.LL('auth', 'Firebase', r);
        return o.create(t, { appName: e.name });
      }
      function I(e, t, n) {
        const r = n;
        if (!(t instanceof r))
          throw (
            (r.name !== t.constructor.name && w(e, 'argument-error'),
            _(
              e,
              'argument-error',
              `Type of ${t.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`
            ))
          );
      }
      function E(e, ...t) {
        if ('string' !== typeof e) {
          const n = t[0],
            r = [...t.slice(1)];
          return r[0] && (r[0].appName = e.name), e._errorFactory.create(n, ...r);
        }
        return g.create(e, ...t);
      }
      function S(e, t, ...n) {
        if (!e) throw E(t, ...n);
      }
      function T(e) {
        const t = 'INTERNAL ASSERTION FAILED: ' + e;
        throw (y(t), new Error(t));
      }
      function A(e, t) {
        e || T(t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function x() {
        var e;
        return ('undefined' !== typeof self && (null === (e = self.location) || void 0 === e ? void 0 : e.href)) || '';
      }
      function C() {
        return 'http:' === k() || 'https:' === k();
      }
      function k() {
        var e;
        return ('undefined' !== typeof self && (null === (e = self.location) || void 0 === e ? void 0 : e.protocol)) || null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function O() {
        return (
          !(
            'undefined' !== typeof navigator &&
            navigator &&
            'onLine' in navigator &&
            'boolean' === typeof navigator.onLine &&
            (C() || (0, i.ru)() || 'connection' in navigator)
          ) || navigator.onLine
        );
      }
      function N() {
        if ('undefined' === typeof navigator) return null;
        const e = navigator;
        return (e.languages && e.languages[0]) || e.language || null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class R {
        constructor(e, t) {
          (this.shortDelay = e),
            (this.longDelay = t),
            A(t > e, 'Short delay should be less than long delay!'),
            (this.isMobile = (0, i.uI)() || (0, i.b$)());
        }
        get() {
          return O() ? (this.isMobile ? this.longDelay : this.shortDelay) : Math.min(5e3, this.shortDelay);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function P(e, t) {
        A(e.emulator, 'Emulator should always be set here');
        const { url: n } = e.emulator;
        return t ? `${n}${t.startsWith('/') ? t.slice(1) : t}` : n;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class D {
        static initialize(e, t, n) {
          (this.fetchImpl = e), t && (this.headersImpl = t), n && (this.responseImpl = n);
        }
        static fetch() {
          return this.fetchImpl
            ? this.fetchImpl
            : 'undefined' !== typeof self && 'fetch' in self
              ? self.fetch
              : void T('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
        static headers() {
          return this.headersImpl
            ? this.headersImpl
            : 'undefined' !== typeof self && 'Headers' in self
              ? self.Headers
              : void T('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
        static response() {
          return this.responseImpl
            ? this.responseImpl
            : 'undefined' !== typeof self && 'Response' in self
              ? self.Response
              : void T('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const L = {
          ['CREDENTIAL_MISMATCH']: 'custom-token-mismatch',
          ['MISSING_CUSTOM_TOKEN']: 'internal-error',
          ['INVALID_IDENTIFIER']: 'invalid-email',
          ['MISSING_CONTINUE_URI']: 'internal-error',
          ['INVALID_PASSWORD']: 'wrong-password',
          ['MISSING_PASSWORD']: 'missing-password',
          ['EMAIL_EXISTS']: 'email-already-in-use',
          ['PASSWORD_LOGIN_DISABLED']: 'operation-not-allowed',
          ['INVALID_IDP_RESPONSE']: 'invalid-credential',
          ['INVALID_PENDING_TOKEN']: 'invalid-credential',
          ['FEDERATED_USER_ID_ALREADY_LINKED']: 'credential-already-in-use',
          ['MISSING_REQ_TYPE']: 'internal-error',
          ['EMAIL_NOT_FOUND']: 'user-not-found',
          ['RESET_PASSWORD_EXCEED_LIMIT']: 'too-many-requests',
          ['EXPIRED_OOB_CODE']: 'expired-action-code',
          ['INVALID_OOB_CODE']: 'invalid-action-code',
          ['MISSING_OOB_CODE']: 'internal-error',
          ['CREDENTIAL_TOO_OLD_LOGIN_AGAIN']: 'requires-recent-login',
          ['INVALID_ID_TOKEN']: 'invalid-user-token',
          ['TOKEN_EXPIRED']: 'user-token-expired',
          ['USER_NOT_FOUND']: 'user-token-expired',
          ['TOO_MANY_ATTEMPTS_TRY_LATER']: 'too-many-requests',
          ['INVALID_CODE']: 'invalid-verification-code',
          ['INVALID_SESSION_INFO']: 'invalid-verification-id',
          ['INVALID_TEMPORARY_PROOF']: 'invalid-credential',
          ['MISSING_SESSION_INFO']: 'missing-verification-id',
          ['SESSION_EXPIRED']: 'code-expired',
          ['MISSING_ANDROID_PACKAGE_NAME']: 'missing-android-pkg-name',
          ['UNAUTHORIZED_DOMAIN']: 'unauthorized-continue-uri',
          ['INVALID_OAUTH_CLIENT_ID']: 'invalid-oauth-client-id',
          ['ADMIN_ONLY_OPERATION']: 'admin-restricted-operation',
          ['INVALID_MFA_PENDING_CREDENTIAL']: 'invalid-multi-factor-session',
          ['MFA_ENROLLMENT_NOT_FOUND']: 'multi-factor-info-not-found',
          ['MISSING_MFA_ENROLLMENT_ID']: 'missing-multi-factor-info',
          ['MISSING_MFA_PENDING_CREDENTIAL']: 'missing-multi-factor-session',
          ['SECOND_FACTOR_EXISTS']: 'second-factor-already-in-use',
          ['SECOND_FACTOR_LIMIT_EXCEEDED']: 'maximum-second-factor-count-exceeded',
          ['BLOCKING_FUNCTION_ERROR_RESPONSE']: 'internal-error',
          ['RECAPTCHA_NOT_ENABLED']: 'recaptcha-not-enabled',
          ['MISSING_RECAPTCHA_TOKEN']: 'missing-recaptcha-token',
          ['INVALID_RECAPTCHA_TOKEN']: 'invalid-recaptcha-token',
          ['INVALID_RECAPTCHA_ACTION']: 'invalid-recaptcha-action',
          ['MISSING_CLIENT_TYPE']: 'missing-client-type',
          ['MISSING_RECAPTCHA_VERSION']: 'missing-recaptcha-version',
          ['INVALID_RECAPTCHA_VERSION']: 'invalid-recaptcha-version',
          ['INVALID_REQ_TYPE']: 'invalid-req-type'
        },
        j = new R(3e4, 6e4);
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function M(e, t) {
        return e.tenantId && !t.tenantId ? Object.assign(Object.assign({}, t), { tenantId: e.tenantId }) : t;
      }
      async function F(e, t, n, r, o = {}) {
        return U(e, o, async () => {
          let o = {},
            s = {};
          r && ('GET' === t ? (s = r) : (o = { body: JSON.stringify(r) }));
          const a = (0, i.xO)(Object.assign({ key: e.config.apiKey }, s)).slice(1),
            u = await e._getAdditionalHeaders();
          return (
            (u['Content-Type'] = 'application/json'),
            e.languageCode && (u['X-Firebase-Locale'] = e.languageCode),
            D.fetch()(B(e, e.config.apiHost, n, a), Object.assign({ method: t, headers: u, referrerPolicy: 'no-referrer' }, o))
          );
        });
      }
      async function U(e, t, n) {
        e._canInitEmulator = !1;
        const r = Object.assign(Object.assign({}, L), t);
        try {
          const t = new $(e),
            i = await Promise.race([n(), t.promise]);
          t.clearNetworkTimeout();
          const o = await i.json();
          if ('needConfirmation' in o) throw q(e, 'account-exists-with-different-credential', o);
          if (i.ok && !('errorMessage' in o)) return o;
          {
            const t = i.ok ? o.errorMessage : o.error.message,
              [n, s] = t.split(' : ');
            if ('FEDERATED_USER_ID_ALREADY_LINKED' === n) throw q(e, 'credential-already-in-use', o);
            if ('EMAIL_EXISTS' === n) throw q(e, 'email-already-in-use', o);
            if ('USER_DISABLED' === n) throw q(e, 'user-disabled', o);
            const a = r[n] || n.toLowerCase().replace(/[_\s]+/g, '-');
            if (s) throw _(e, a, s);
            w(e, a);
          }
        } catch (o) {
          if (o instanceof i.ZR) throw o;
          w(e, 'network-request-failed', { message: String(o) });
        }
      }
      async function V(e, t, n, r, i = {}) {
        const o = await F(e, t, n, r, i);
        return 'mfaPendingCredential' in o && w(e, 'multi-factor-auth-required', { _serverResponse: o }), o;
      }
      function B(e, t, n, r) {
        const i = `${t}${n}?${r}`;
        return e.config.emulator ? P(e.config, i) : `${e.config.apiScheme}://${i}`;
      }
      class $ {
        constructor(e) {
          (this.auth = e),
            (this.timer = null),
            (this.promise = new Promise((e, t) => {
              this.timer = setTimeout(() => t(b(this.auth, 'network-request-failed')), j.get());
            }));
        }
        clearNetworkTimeout() {
          clearTimeout(this.timer);
        }
      }
      function q(e, t, n) {
        const r = { appName: e.name };
        n.email && (r.email = n.email), n.phoneNumber && (r.phoneNumber = n.phoneNumber);
        const i = b(e, t, r);
        return (i.customData._tokenResponse = n), i;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function z(e, t) {
        return F(e, 'POST', '/v1/accounts:delete', t);
      }
      async function G(e, t) {
        return F(e, 'POST', '/v1/accounts:update', t);
      }
      async function W(e, t) {
        return F(e, 'POST', '/v1/accounts:lookup', t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function H(e) {
        if (e)
          try {
            const t = new Date(Number(e));
            if (!isNaN(t.getTime())) return t.toUTCString();
          } catch (t) {}
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function K(e, t = !1) {
        const n = (0, i.m9)(e),
          r = await n.getIdToken(t),
          o = Y(r);
        S(o && o.exp && o.auth_time && o.iat, n.auth, 'internal-error');
        const s = 'object' === typeof o.firebase ? o.firebase : void 0,
          a = null === s || void 0 === s ? void 0 : s['sign_in_provider'];
        return {
          claims: o,
          token: r,
          authTime: H(Q(o.auth_time)),
          issuedAtTime: H(Q(o.iat)),
          expirationTime: H(Q(o.exp)),
          signInProvider: a || null,
          signInSecondFactor: (null === s || void 0 === s ? void 0 : s['sign_in_second_factor']) || null
        };
      }
      function Q(e) {
        return 1e3 * Number(e);
      }
      function Y(e) {
        const [t, n, r] = e.split('.');
        if (void 0 === t || void 0 === n || void 0 === r) return y('JWT malformed, contained fewer than 3 sections'), null;
        try {
          const e = (0, i.tV)(n);
          return e ? JSON.parse(e) : (y('Failed to decode base64 JWT payload'), null);
        } catch (o) {
          return y('Caught error parsing JWT payload as JSON', null === o || void 0 === o ? void 0 : o.toString()), null;
        }
      }
      function X(e) {
        const t = Y(e);
        return (
          S(t, 'internal-error'),
          S('undefined' !== typeof t.exp, 'internal-error'),
          S('undefined' !== typeof t.iat, 'internal-error'),
          Number(t.exp) - Number(t.iat)
        );
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function J(e, t, n = !1) {
        if (n) return t;
        try {
          return await t;
        } catch (r) {
          throw (r instanceof i.ZR && Z(r) && e.auth.currentUser === e && (await e.auth.signOut()), r);
        }
      }
      function Z({ code: e }) {
        return 'auth/user-disabled' === e || 'auth/user-token-expired' === e;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ee {
        constructor(e) {
          (this.user = e), (this.isRunning = !1), (this.timerId = null), (this.errorBackoff = 3e4);
        }
        _start() {
          this.isRunning || ((this.isRunning = !0), this.schedule());
        }
        _stop() {
          this.isRunning && ((this.isRunning = !1), null !== this.timerId && clearTimeout(this.timerId));
        }
        getInterval(e) {
          var t;
          if (e) {
            const e = this.errorBackoff;
            return (this.errorBackoff = Math.min(2 * this.errorBackoff, 96e4)), e;
          }
          {
            this.errorBackoff = 3e4;
            const e = null !== (t = this.user.stsTokenManager.expirationTime) && void 0 !== t ? t : 0,
              n = e - Date.now() - 3e5;
            return Math.max(0, n);
          }
        }
        schedule(e = !1) {
          if (!this.isRunning) return;
          const t = this.getInterval(e);
          this.timerId = setTimeout(async () => {
            await this.iteration();
          }, t);
        }
        async iteration() {
          try {
            await this.user.getIdToken(!0);
          } catch (e) {
            return void ('auth/network-request-failed' === (null === e || void 0 === e ? void 0 : e.code) && this.schedule(!0));
          }
          this.schedule();
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class te {
        constructor(e, t) {
          (this.createdAt = e), (this.lastLoginAt = t), this._initializeTime();
        }
        _initializeTime() {
          (this.lastSignInTime = H(this.lastLoginAt)), (this.creationTime = H(this.createdAt));
        }
        _copy(e) {
          (this.createdAt = e.createdAt), (this.lastLoginAt = e.lastLoginAt), this._initializeTime();
        }
        toJSON() {
          return { createdAt: this.createdAt, lastLoginAt: this.lastLoginAt };
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function ne(e) {
        var t;
        const n = e.auth,
          r = await e.getIdToken(),
          i = await J(e, W(n, { idToken: r }));
        S(null === i || void 0 === i ? void 0 : i.users.length, n, 'internal-error');
        const o = i.users[0];
        e._notifyReloadListener(o);
        const s = (null === (t = o.providerUserInfo) || void 0 === t ? void 0 : t.length) ? oe(o.providerUserInfo) : [],
          a = ie(e.providerData, s),
          u = e.isAnonymous,
          c = !(e.email && o.passwordHash) && !(null === a || void 0 === a ? void 0 : a.length),
          l = !!u && c,
          h = {
            uid: o.localId,
            displayName: o.displayName || null,
            photoURL: o.photoUrl || null,
            email: o.email || null,
            emailVerified: o.emailVerified || !1,
            phoneNumber: o.phoneNumber || null,
            tenantId: o.tenantId || null,
            providerData: a,
            metadata: new te(o.createdAt, o.lastLoginAt),
            isAnonymous: l
          };
        Object.assign(e, h);
      }
      async function re(e) {
        const t = (0, i.m9)(e);
        await ne(t), await t.auth._persistUserIfCurrent(t), t.auth._notifyListenersIfCurrent(t);
      }
      function ie(e, t) {
        const n = e.filter(e => !t.some(t => t.providerId === e.providerId));
        return [...n, ...t];
      }
      function oe(e) {
        return e.map(e => {
          var { providerId: t } = e,
            n = s(e, ['providerId']);
          return {
            providerId: t,
            uid: n.rawId || '',
            displayName: n.displayName || null,
            email: n.email || null,
            phoneNumber: n.phoneNumber || null,
            photoURL: n.photoUrl || null
          };
        });
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function se(e, t) {
        const n = await U(e, {}, async () => {
          const n = (0, i.xO)({ grant_type: 'refresh_token', refresh_token: t }).slice(1),
            { tokenApiHost: r, apiKey: o } = e.config,
            s = B(e, r, '/v1/token', `key=${o}`),
            a = await e._getAdditionalHeaders();
          return (a['Content-Type'] = 'application/x-www-form-urlencoded'), D.fetch()(s, { method: 'POST', headers: a, body: n });
        });
        return { accessToken: n.access_token, expiresIn: n.expires_in, refreshToken: n.refresh_token };
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ae {
        constructor() {
          (this.refreshToken = null), (this.accessToken = null), (this.expirationTime = null);
        }
        get isExpired() {
          return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
        }
        updateFromServerResponse(e) {
          S(e.idToken, 'internal-error'),
            S('undefined' !== typeof e.idToken, 'internal-error'),
            S('undefined' !== typeof e.refreshToken, 'internal-error');
          const t = 'expiresIn' in e && 'undefined' !== typeof e.expiresIn ? Number(e.expiresIn) : X(e.idToken);
          this.updateTokensAndExpiration(e.idToken, e.refreshToken, t);
        }
        async getToken(e, t = !1) {
          return (
            S(!this.accessToken || this.refreshToken, e, 'user-token-expired'),
            t || !this.accessToken || this.isExpired
              ? this.refreshToken
                ? (await this.refresh(e, this.refreshToken), this.accessToken)
                : null
              : this.accessToken
          );
        }
        clearRefreshToken() {
          this.refreshToken = null;
        }
        async refresh(e, t) {
          const { accessToken: n, refreshToken: r, expiresIn: i } = await se(e, t);
          this.updateTokensAndExpiration(n, r, Number(i));
        }
        updateTokensAndExpiration(e, t, n) {
          (this.refreshToken = t || null), (this.accessToken = e || null), (this.expirationTime = Date.now() + 1e3 * n);
        }
        static fromJSON(e, t) {
          const { refreshToken: n, accessToken: r, expirationTime: i } = t,
            o = new ae();
          return (
            n && (S('string' === typeof n, 'internal-error', { appName: e }), (o.refreshToken = n)),
            r && (S('string' === typeof r, 'internal-error', { appName: e }), (o.accessToken = r)),
            i && (S('number' === typeof i, 'internal-error', { appName: e }), (o.expirationTime = i)),
            o
          );
        }
        toJSON() {
          return { refreshToken: this.refreshToken, accessToken: this.accessToken, expirationTime: this.expirationTime };
        }
        _assign(e) {
          (this.accessToken = e.accessToken), (this.refreshToken = e.refreshToken), (this.expirationTime = e.expirationTime);
        }
        _clone() {
          return Object.assign(new ae(), this.toJSON());
        }
        _performRefresh() {
          return T('not implemented');
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function ue(e, t) {
        S('string' === typeof e || 'undefined' === typeof e, 'internal-error', { appName: t });
      }
      class ce {
        constructor(e) {
          var { uid: t, auth: n, stsTokenManager: r } = e,
            i = s(e, ['uid', 'auth', 'stsTokenManager']);
          (this.providerId = 'firebase'),
            (this.proactiveRefresh = new ee(this)),
            (this.reloadUserInfo = null),
            (this.reloadListener = null),
            (this.uid = t),
            (this.auth = n),
            (this.stsTokenManager = r),
            (this.accessToken = r.accessToken),
            (this.displayName = i.displayName || null),
            (this.email = i.email || null),
            (this.emailVerified = i.emailVerified || !1),
            (this.phoneNumber = i.phoneNumber || null),
            (this.photoURL = i.photoURL || null),
            (this.isAnonymous = i.isAnonymous || !1),
            (this.tenantId = i.tenantId || null),
            (this.providerData = i.providerData ? [...i.providerData] : []),
            (this.metadata = new te(i.createdAt || void 0, i.lastLoginAt || void 0));
        }
        async getIdToken(e) {
          const t = await J(this, this.stsTokenManager.getToken(this.auth, e));
          return (
            S(t, this.auth, 'internal-error'),
            this.accessToken !== t &&
              ((this.accessToken = t), await this.auth._persistUserIfCurrent(this), this.auth._notifyListenersIfCurrent(this)),
            t
          );
        }
        getIdTokenResult(e) {
          return K(this, e);
        }
        reload() {
          return re(this);
        }
        _assign(e) {
          this !== e &&
            (S(this.uid === e.uid, this.auth, 'internal-error'),
            (this.displayName = e.displayName),
            (this.photoURL = e.photoURL),
            (this.email = e.email),
            (this.emailVerified = e.emailVerified),
            (this.phoneNumber = e.phoneNumber),
            (this.isAnonymous = e.isAnonymous),
            (this.tenantId = e.tenantId),
            (this.providerData = e.providerData.map(e => Object.assign({}, e))),
            this.metadata._copy(e.metadata),
            this.stsTokenManager._assign(e.stsTokenManager));
        }
        _clone(e) {
          const t = new ce(Object.assign(Object.assign({}, this), { auth: e, stsTokenManager: this.stsTokenManager._clone() }));
          return t.metadata._copy(this.metadata), t;
        }
        _onReload(e) {
          S(!this.reloadListener, this.auth, 'internal-error'),
            (this.reloadListener = e),
            this.reloadUserInfo && (this._notifyReloadListener(this.reloadUserInfo), (this.reloadUserInfo = null));
        }
        _notifyReloadListener(e) {
          this.reloadListener ? this.reloadListener(e) : (this.reloadUserInfo = e);
        }
        _startProactiveRefresh() {
          this.proactiveRefresh._start();
        }
        _stopProactiveRefresh() {
          this.proactiveRefresh._stop();
        }
        async _updateTokensIfNecessary(e, t = !1) {
          let n = !1;
          e.idToken && e.idToken !== this.stsTokenManager.accessToken && (this.stsTokenManager.updateFromServerResponse(e), (n = !0)),
            t && (await ne(this)),
            await this.auth._persistUserIfCurrent(this),
            n && this.auth._notifyListenersIfCurrent(this);
        }
        async delete() {
          const e = await this.getIdToken();
          return await J(this, z(this.auth, { idToken: e })), this.stsTokenManager.clearRefreshToken(), this.auth.signOut();
        }
        toJSON() {
          return Object.assign(
            Object.assign(
              {
                uid: this.uid,
                email: this.email || void 0,
                emailVerified: this.emailVerified,
                displayName: this.displayName || void 0,
                isAnonymous: this.isAnonymous,
                photoURL: this.photoURL || void 0,
                phoneNumber: this.phoneNumber || void 0,
                tenantId: this.tenantId || void 0,
                providerData: this.providerData.map(e => Object.assign({}, e)),
                stsTokenManager: this.stsTokenManager.toJSON(),
                _redirectEventId: this._redirectEventId
              },
              this.metadata.toJSON()
            ),
            { apiKey: this.auth.config.apiKey, appName: this.auth.name }
          );
        }
        get refreshToken() {
          return this.stsTokenManager.refreshToken || '';
        }
        static _fromJSON(e, t) {
          var n, r, i, o, s, a, u, c;
          const l = null !== (n = t.displayName) && void 0 !== n ? n : void 0,
            h = null !== (r = t.email) && void 0 !== r ? r : void 0,
            f = null !== (i = t.phoneNumber) && void 0 !== i ? i : void 0,
            d = null !== (o = t.photoURL) && void 0 !== o ? o : void 0,
            p = null !== (s = t.tenantId) && void 0 !== s ? s : void 0,
            g = null !== (a = t._redirectEventId) && void 0 !== a ? a : void 0,
            m = null !== (u = t.createdAt) && void 0 !== u ? u : void 0,
            v = null !== (c = t.lastLoginAt) && void 0 !== c ? c : void 0,
            { uid: y, emailVerified: w, isAnonymous: b, providerData: _, stsTokenManager: I } = t;
          S(y && I, e, 'internal-error');
          const E = ae.fromJSON(this.name, I);
          S('string' === typeof y, e, 'internal-error'),
            ue(l, e.name),
            ue(h, e.name),
            S('boolean' === typeof w, e, 'internal-error'),
            S('boolean' === typeof b, e, 'internal-error'),
            ue(f, e.name),
            ue(d, e.name),
            ue(p, e.name),
            ue(g, e.name),
            ue(m, e.name),
            ue(v, e.name);
          const T = new ce({
            uid: y,
            auth: e,
            email: h,
            emailVerified: w,
            displayName: l,
            isAnonymous: b,
            photoURL: d,
            phoneNumber: f,
            tenantId: p,
            stsTokenManager: E,
            createdAt: m,
            lastLoginAt: v
          });
          return _ && Array.isArray(_) && (T.providerData = _.map(e => Object.assign({}, e))), g && (T._redirectEventId = g), T;
        }
        static async _fromIdTokenResponse(e, t, n = !1) {
          const r = new ae();
          r.updateFromServerResponse(t);
          const i = new ce({ uid: t.localId, auth: e, stsTokenManager: r, isAnonymous: n });
          return await ne(i), i;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const le = new Map();
      function he(e) {
        A(e instanceof Function, 'Expected a class definition');
        let t = le.get(e);
        return t ? (A(t instanceof e, 'Instance stored in cache mismatched with class'), t) : ((t = new e()), le.set(e, t), t);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class fe {
        constructor() {
          (this.type = 'NONE'), (this.storage = {});
        }
        async _isAvailable() {
          return !0;
        }
        async _set(e, t) {
          this.storage[e] = t;
        }
        async _get(e) {
          const t = this.storage[e];
          return void 0 === t ? null : t;
        }
        async _remove(e) {
          delete this.storage[e];
        }
        _addListener(e, t) {}
        _removeListener(e, t) {}
      }
      fe.type = 'NONE';
      const de = fe;
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function pe(e, t, n) {
        return `firebase:${e}:${t}:${n}`;
      }
      class ge {
        constructor(e, t, n) {
          (this.persistence = e), (this.auth = t), (this.userKey = n);
          const { config: r, name: i } = this.auth;
          (this.fullUserKey = pe(this.userKey, r.apiKey, i)),
            (this.fullPersistenceKey = pe('persistence', r.apiKey, i)),
            (this.boundEventHandler = t._onStorageEvent.bind(t)),
            this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
        }
        setCurrentUser(e) {
          return this.persistence._set(this.fullUserKey, e.toJSON());
        }
        async getCurrentUser() {
          const e = await this.persistence._get(this.fullUserKey);
          return e ? ce._fromJSON(this.auth, e) : null;
        }
        removeCurrentUser() {
          return this.persistence._remove(this.fullUserKey);
        }
        savePersistenceForRedirect() {
          return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
        }
        async setPersistence(e) {
          if (this.persistence === e) return;
          const t = await this.getCurrentUser();
          return await this.removeCurrentUser(), (this.persistence = e), t ? this.setCurrentUser(t) : void 0;
        }
        delete() {
          this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
        }
        static async create(e, t, n = 'authUser') {
          if (!t.length) return new ge(he(de), e, n);
          const r = (
            await Promise.all(
              t.map(async e => {
                if (await e._isAvailable()) return e;
              })
            )
          ).filter(e => e);
          let i = r[0] || he(de);
          const o = pe(n, e.config.apiKey, e.name);
          let s = null;
          for (const c of t)
            try {
              const t = await c._get(o);
              if (t) {
                const n = ce._fromJSON(e, t);
                c !== i && (s = n), (i = c);
                break;
              }
            } catch (u) {}
          const a = r.filter(e => e._shouldAllowMigration);
          return i._shouldAllowMigration && a.length
            ? ((i = a[0]),
              s && (await i._set(o, s.toJSON())),
              await Promise.all(
                t.map(async e => {
                  if (e !== i)
                    try {
                      await e._remove(o);
                    } catch (u) {}
                })
              ),
              new ge(i, e, n))
            : new ge(i, e, n);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function me(e) {
        const t = e.toLowerCase();
        if (t.includes('opera/') || t.includes('opr/') || t.includes('opios/')) return 'Opera';
        if (be(t)) return 'IEMobile';
        if (t.includes('msie') || t.includes('trident/')) return 'IE';
        if (t.includes('edge/')) return 'Edge';
        if (ve(t)) return 'Firefox';
        if (t.includes('silk/')) return 'Silk';
        if (Ie(t)) return 'Blackberry';
        if (Ee(t)) return 'Webos';
        if (ye(t)) return 'Safari';
        if ((t.includes('chrome/') || we(t)) && !t.includes('edge/')) return 'Chrome';
        if (_e(t)) return 'Android';
        {
          const t = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,
            n = e.match(t);
          if (2 === (null === n || void 0 === n ? void 0 : n.length)) return n[1];
        }
        return 'Other';
      }
      function ve(e = (0, i.z$)()) {
        return /firefox\//i.test(e);
      }
      function ye(e = (0, i.z$)()) {
        const t = e.toLowerCase();
        return t.includes('safari/') && !t.includes('chrome/') && !t.includes('crios/') && !t.includes('android');
      }
      function we(e = (0, i.z$)()) {
        return /crios\//i.test(e);
      }
      function be(e = (0, i.z$)()) {
        return /iemobile/i.test(e);
      }
      function _e(e = (0, i.z$)()) {
        return /android/i.test(e);
      }
      function Ie(e = (0, i.z$)()) {
        return /blackberry/i.test(e);
      }
      function Ee(e = (0, i.z$)()) {
        return /webos/i.test(e);
      }
      function Se(e = (0, i.z$)()) {
        return /iphone|ipad|ipod/i.test(e) || (/macintosh/i.test(e) && /mobile/i.test(e));
      }
      function Te(e = (0, i.z$)()) {
        return /(iPad|iPhone|iPod).*OS 7_\d/i.test(e) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(e);
      }
      function Ae(e = (0, i.z$)()) {
        var t;
        return Se(e) && !!(null === (t = window.navigator) || void 0 === t ? void 0 : t.standalone);
      }
      function xe() {
        return (0, i.w1)() && 10 === document.documentMode;
      }
      function Ce(e = (0, i.z$)()) {
        return Se(e) || _e(e) || Ee(e) || Ie(e) || /windows phone/i.test(e) || be(e);
      }
      function ke() {
        try {
          return !(!window || window === window.top);
        } catch (e) {
          return !1;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Oe(e, t = []) {
        let n;
        switch (e) {
          case 'Browser':
            n = me((0, i.z$)());
            break;
          case 'Worker':
            n = `${me((0, i.z$)())}-${e}`;
            break;
          default:
            n = e;
        }
        const r = t.length ? t.join(',') : 'FirebaseCore-web';
        return `${n}/JsCore/${o.SDK_VERSION}/${r}`;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ne(e) {
        return (await F(e, 'GET', '/v1/recaptchaParams')).recaptchaSiteKey || '';
      }
      async function Re(e, t) {
        return F(e, 'GET', '/v2/recaptchaConfig', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Pe(e) {
        return void 0 !== e && void 0 !== e.getResponse;
      }
      function De(e) {
        return void 0 !== e && void 0 !== e.enterprise;
      }
      class Le {
        constructor(e) {
          if (((this.siteKey = ''), (this.emailPasswordEnabled = !1), void 0 === e.recaptchaKey)) throw new Error('recaptchaKey undefined');
          (this.siteKey = e.recaptchaKey.split('/')[3]),
            (this.emailPasswordEnabled = e.recaptchaEnforcementState.some(
              e => 'EMAIL_PASSWORD_PROVIDER' === e.provider && 'OFF' !== e.enforcementState
            ));
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function je() {
        var e, t;
        return null !== (t = null === (e = document.getElementsByTagName('head')) || void 0 === e ? void 0 : e[0]) && void 0 !== t ? t : document;
      }
      function Me(e) {
        return new Promise((t, n) => {
          const r = document.createElement('script');
          r.setAttribute('src', e),
            (r.onload = t),
            (r.onerror = e => {
              const t = b('internal-error');
              (t.customData = e), n(t);
            }),
            (r.type = 'text/javascript'),
            (r.charset = 'UTF-8'),
            je().appendChild(r);
        });
      }
      function Fe(e) {
        return `__${e}${Math.floor(1e6 * Math.random())}`;
      }
      const Ue = 'https://www.google.com/recaptcha/enterprise.js?render=',
        Ve = 'recaptcha-enterprise',
        Be = 'NO_RECAPTCHA';
      class $e {
        constructor(e) {
          (this.type = Ve), (this.auth = We(e));
        }
        async verify(e = 'verify', t = !1) {
          async function n(e) {
            if (!t) {
              if (null == e.tenantId && null != e._agentRecaptchaConfig) return e._agentRecaptchaConfig.siteKey;
              if (null != e.tenantId && void 0 !== e._tenantRecaptchaConfigs[e.tenantId]) return e._tenantRecaptchaConfigs[e.tenantId].siteKey;
            }
            return new Promise(async (t, n) => {
              Re(e, { clientType: 'CLIENT_TYPE_WEB', version: 'RECAPTCHA_ENTERPRISE' })
                .then(r => {
                  if (void 0 !== r.recaptchaKey) {
                    const n = new Le(r);
                    return null == e.tenantId ? (e._agentRecaptchaConfig = n) : (e._tenantRecaptchaConfigs[e.tenantId] = n), t(n.siteKey);
                  }
                  n(new Error('recaptcha Enterprise site key undefined'));
                })
                .catch(e => {
                  n(e);
                });
            });
          }
          function r(t, n, r) {
            const i = window.grecaptcha;
            De(i)
              ? i.enterprise.ready(() => {
                  i.enterprise
                    .execute(t, { action: e })
                    .then(e => {
                      n(e);
                    })
                    .catch(() => {
                      n(Be);
                    });
                })
              : r(Error('No reCAPTCHA enterprise script loaded.'));
          }
          return new Promise((e, i) => {
            n(this.auth)
              .then(n => {
                if (!t && De(window.grecaptcha)) r(n, e, i);
                else {
                  if ('undefined' === typeof window) return void i(new Error('RecaptchaVerifier is only supported in browser'));
                  Me(Ue + n)
                    .then(() => {
                      r(n, e, i);
                    })
                    .catch(e => {
                      i(e);
                    });
                }
              })
              .catch(e => {
                i(e);
              });
          });
        }
      }
      async function qe(e, t, n, r = !1) {
        const i = new $e(e);
        let o;
        try {
          o = await i.verify(n);
        } catch (a) {
          o = await i.verify(n, !0);
        }
        const s = Object.assign({}, t);
        return (
          r ? Object.assign(s, { captchaResp: o }) : Object.assign(s, { captchaResponse: o }),
          Object.assign(s, { clientType: 'CLIENT_TYPE_WEB' }),
          Object.assign(s, { recaptchaVersion: 'RECAPTCHA_ENTERPRISE' }),
          s
        );
      }
      /**
       * @license
       * Copyright 2022 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ze {
        constructor(e) {
          (this.auth = e), (this.queue = []);
        }
        pushCallback(e, t) {
          const n = t =>
            new Promise((n, r) => {
              try {
                const r = e(t);
                n(r);
              } catch (i) {
                r(i);
              }
            });
          (n.onAbort = t), this.queue.push(n);
          const r = this.queue.length - 1;
          return () => {
            this.queue[r] = () => Promise.resolve();
          };
        }
        async runMiddleware(e) {
          if (this.auth.currentUser === e) return;
          const t = [];
          try {
            for (const n of this.queue) await n(e), n.onAbort && t.push(n.onAbort);
          } catch (n) {
            t.reverse();
            for (const e of t)
              try {
                e();
              } catch (r) {}
            throw this.auth._errorFactory.create('login-blocked', { originalMessage: null === n || void 0 === n ? void 0 : n.message });
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Ge {
        constructor(e, t, n, r) {
          (this.app = e),
            (this.heartbeatServiceProvider = t),
            (this.appCheckServiceProvider = n),
            (this.config = r),
            (this.currentUser = null),
            (this.emulatorConfig = null),
            (this.operations = Promise.resolve()),
            (this.authStateSubscription = new He(this)),
            (this.idTokenSubscription = new He(this)),
            (this.beforeStateQueue = new ze(this)),
            (this.redirectUser = null),
            (this.isProactiveRefreshEnabled = !1),
            (this._canInitEmulator = !0),
            (this._isInitialized = !1),
            (this._deleted = !1),
            (this._initializationPromise = null),
            (this._popupRedirectResolver = null),
            (this._errorFactory = g),
            (this._agentRecaptchaConfig = null),
            (this._tenantRecaptchaConfigs = {}),
            (this.lastNotifiedUid = void 0),
            (this.languageCode = null),
            (this.tenantId = null),
            (this.settings = { appVerificationDisabledForTesting: !1 }),
            (this.frameworks = []),
            (this.name = e.name),
            (this.clientVersion = r.sdkClientVersion);
        }
        _initializeWithPersistence(e, t) {
          return (
            t && (this._popupRedirectResolver = he(t)),
            (this._initializationPromise = this.queue(async () => {
              var n, r;
              if (!this._deleted && ((this.persistenceManager = await ge.create(this, e)), !this._deleted)) {
                if (null === (n = this._popupRedirectResolver) || void 0 === n ? void 0 : n._shouldInitProactively)
                  try {
                    await this._popupRedirectResolver._initialize(this);
                  } catch (i) {}
                await this.initializeCurrentUser(t),
                  (this.lastNotifiedUid = (null === (r = this.currentUser) || void 0 === r ? void 0 : r.uid) || null),
                  this._deleted || (this._isInitialized = !0);
              }
            })),
            this._initializationPromise
          );
        }
        async _onStorageEvent() {
          if (this._deleted) return;
          const e = await this.assertedPersistence.getCurrentUser();
          return this.currentUser || e
            ? this.currentUser && e && this.currentUser.uid === e.uid
              ? (this._currentUser._assign(e), void (await this.currentUser.getIdToken()))
              : void (await this._updateCurrentUser(e, !0))
            : void 0;
        }
        async initializeCurrentUser(e) {
          var t;
          const n = await this.assertedPersistence.getCurrentUser();
          let r = n,
            i = !1;
          if (e && this.config.authDomain) {
            await this.getOrInitRedirectPersistenceManager();
            const n = null === (t = this.redirectUser) || void 0 === t ? void 0 : t._redirectEventId,
              o = null === r || void 0 === r ? void 0 : r._redirectEventId,
              s = await this.tryRedirectSignIn(e);
            (n && n !== o) || !(null === s || void 0 === s ? void 0 : s.user) || ((r = s.user), (i = !0));
          }
          if (!r) return this.directlySetCurrentUser(null);
          if (!r._redirectEventId) {
            if (i)
              try {
                await this.beforeStateQueue.runMiddleware(r);
              } catch (o) {
                (r = n), this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(o));
              }
            return r ? this.reloadAndSetCurrentUserOrClear(r) : this.directlySetCurrentUser(null);
          }
          return (
            S(this._popupRedirectResolver, this, 'argument-error'),
            await this.getOrInitRedirectPersistenceManager(),
            this.redirectUser && this.redirectUser._redirectEventId === r._redirectEventId
              ? this.directlySetCurrentUser(r)
              : this.reloadAndSetCurrentUserOrClear(r)
          );
        }
        async tryRedirectSignIn(e) {
          let t = null;
          try {
            t = await this._popupRedirectResolver._completeRedirectFn(this, e, !0);
          } catch (n) {
            await this._setRedirectUser(null);
          }
          return t;
        }
        async reloadAndSetCurrentUserOrClear(e) {
          try {
            await ne(e);
          } catch (t) {
            if ('auth/network-request-failed' !== (null === t || void 0 === t ? void 0 : t.code)) return this.directlySetCurrentUser(null);
          }
          return this.directlySetCurrentUser(e);
        }
        useDeviceLanguage() {
          this.languageCode = N();
        }
        async _delete() {
          this._deleted = !0;
        }
        async updateCurrentUser(e) {
          const t = e ? (0, i.m9)(e) : null;
          return t && S(t.auth.config.apiKey === this.config.apiKey, this, 'invalid-user-token'), this._updateCurrentUser(t && t._clone(this));
        }
        async _updateCurrentUser(e, t = !1) {
          if (!this._deleted)
            return (
              e && S(this.tenantId === e.tenantId, this, 'tenant-id-mismatch'),
              t || (await this.beforeStateQueue.runMiddleware(e)),
              this.queue(async () => {
                await this.directlySetCurrentUser(e), this.notifyAuthListeners();
              })
            );
        }
        async signOut() {
          return (
            await this.beforeStateQueue.runMiddleware(null),
            (this.redirectPersistenceManager || this._popupRedirectResolver) && (await this._setRedirectUser(null)),
            this._updateCurrentUser(null, !0)
          );
        }
        setPersistence(e) {
          return this.queue(async () => {
            await this.assertedPersistence.setPersistence(he(e));
          });
        }
        async initializeRecaptchaConfig() {
          const e = await Re(this, { clientType: 'CLIENT_TYPE_WEB', version: 'RECAPTCHA_ENTERPRISE' }),
            t = new Le(e);
          if (
            (null == this.tenantId ? (this._agentRecaptchaConfig = t) : (this._tenantRecaptchaConfigs[this.tenantId] = t), t.emailPasswordEnabled)
          ) {
            const e = new $e(this);
            e.verify();
          }
        }
        _getRecaptchaConfig() {
          return null == this.tenantId ? this._agentRecaptchaConfig : this._tenantRecaptchaConfigs[this.tenantId];
        }
        _getPersistence() {
          return this.assertedPersistence.persistence.type;
        }
        _updateErrorMap(e) {
          this._errorFactory = new i.LL('auth', 'Firebase', e());
        }
        onAuthStateChanged(e, t, n) {
          return this.registerStateListener(this.authStateSubscription, e, t, n);
        }
        beforeAuthStateChanged(e, t) {
          return this.beforeStateQueue.pushCallback(e, t);
        }
        onIdTokenChanged(e, t, n) {
          return this.registerStateListener(this.idTokenSubscription, e, t, n);
        }
        toJSON() {
          var e;
          return {
            apiKey: this.config.apiKey,
            authDomain: this.config.authDomain,
            appName: this.name,
            currentUser: null === (e = this._currentUser) || void 0 === e ? void 0 : e.toJSON()
          };
        }
        async _setRedirectUser(e, t) {
          const n = await this.getOrInitRedirectPersistenceManager(t);
          return null === e ? n.removeCurrentUser() : n.setCurrentUser(e);
        }
        async getOrInitRedirectPersistenceManager(e) {
          if (!this.redirectPersistenceManager) {
            const t = (e && he(e)) || this._popupRedirectResolver;
            S(t, this, 'argument-error'),
              (this.redirectPersistenceManager = await ge.create(this, [he(t._redirectPersistence)], 'redirectUser')),
              (this.redirectUser = await this.redirectPersistenceManager.getCurrentUser());
          }
          return this.redirectPersistenceManager;
        }
        async _redirectUserForId(e) {
          var t, n;
          return (
            this._isInitialized && (await this.queue(async () => {})),
            (null === (t = this._currentUser) || void 0 === t ? void 0 : t._redirectEventId) === e
              ? this._currentUser
              : (null === (n = this.redirectUser) || void 0 === n ? void 0 : n._redirectEventId) === e
                ? this.redirectUser
                : null
          );
        }
        async _persistUserIfCurrent(e) {
          if (e === this.currentUser) return this.queue(async () => this.directlySetCurrentUser(e));
        }
        _notifyListenersIfCurrent(e) {
          e === this.currentUser && this.notifyAuthListeners();
        }
        _key() {
          return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
        }
        _startProactiveRefresh() {
          (this.isProactiveRefreshEnabled = !0), this.currentUser && this._currentUser._startProactiveRefresh();
        }
        _stopProactiveRefresh() {
          (this.isProactiveRefreshEnabled = !1), this.currentUser && this._currentUser._stopProactiveRefresh();
        }
        get _currentUser() {
          return this.currentUser;
        }
        notifyAuthListeners() {
          var e, t;
          if (!this._isInitialized) return;
          this.idTokenSubscription.next(this.currentUser);
          const n = null !== (t = null === (e = this.currentUser) || void 0 === e ? void 0 : e.uid) && void 0 !== t ? t : null;
          this.lastNotifiedUid !== n && ((this.lastNotifiedUid = n), this.authStateSubscription.next(this.currentUser));
        }
        registerStateListener(e, t, n, r) {
          if (this._deleted) return () => {};
          const i = 'function' === typeof t ? t : t.next.bind(t),
            o = this._isInitialized ? Promise.resolve() : this._initializationPromise;
          return S(o, this, 'internal-error'), o.then(() => i(this.currentUser)), 'function' === typeof t ? e.addObserver(t, n, r) : e.addObserver(t);
        }
        async directlySetCurrentUser(e) {
          this.currentUser && this.currentUser !== e && this._currentUser._stopProactiveRefresh(),
            e && this.isProactiveRefreshEnabled && e._startProactiveRefresh(),
            (this.currentUser = e),
            e ? await this.assertedPersistence.setCurrentUser(e) : await this.assertedPersistence.removeCurrentUser();
        }
        queue(e) {
          return (this.operations = this.operations.then(e, e)), this.operations;
        }
        get assertedPersistence() {
          return S(this.persistenceManager, this, 'internal-error'), this.persistenceManager;
        }
        _logFramework(e) {
          e &&
            !this.frameworks.includes(e) &&
            (this.frameworks.push(e), this.frameworks.sort(), (this.clientVersion = Oe(this.config.clientPlatform, this._getFrameworks())));
        }
        _getFrameworks() {
          return this.frameworks;
        }
        async _getAdditionalHeaders() {
          var e;
          const t = { ['X-Client-Version']: this.clientVersion };
          this.app.options.appId && (t['X-Firebase-gmpid'] = this.app.options.appId);
          const n = await (null === (e = this.heartbeatServiceProvider.getImmediate({ optional: !0 })) || void 0 === e
            ? void 0
            : e.getHeartbeatsHeader());
          n && (t['X-Firebase-Client'] = n);
          const r = await this._getAppCheckToken();
          return r && (t['X-Firebase-AppCheck'] = r), t;
        }
        async _getAppCheckToken() {
          var e;
          const t = await (null === (e = this.appCheckServiceProvider.getImmediate({ optional: !0 })) || void 0 === e ? void 0 : e.getToken());
          return (
            (null === t || void 0 === t ? void 0 : t.error) && v(`Error while retrieving App Check token: ${t.error}`),
            null === t || void 0 === t ? void 0 : t.token
          );
        }
      }
      function We(e) {
        return (0, i.m9)(e);
      }
      class He {
        constructor(e) {
          (this.auth = e), (this.observer = null), (this.addObserver = (0, i.ne)(e => (this.observer = e)));
        }
        get next() {
          return S(this.observer, this.auth, 'internal-error'), this.observer.next.bind(this.observer);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Ke(e, t) {
        const n = (null === t || void 0 === t ? void 0 : t.persistence) || [],
          r = (Array.isArray(n) ? n : [n]).map(he);
        (null === t || void 0 === t ? void 0 : t.errorMap) && e._updateErrorMap(t.errorMap),
          e._initializeWithPersistence(r, null === t || void 0 === t ? void 0 : t.popupRedirectResolver);
      }
      function Qe(e, t, n) {
        const r = We(e);
        S(r._canInitEmulator, r, 'emulator-config-failed'), S(/^https?:\/\//.test(t), r, 'invalid-emulator-scheme');
        const i = !!(null === n || void 0 === n ? void 0 : n.disableWarnings),
          o = Ye(t),
          { host: s, port: a } = Xe(t),
          u = null === a ? '' : `:${a}`;
        (r.config.emulator = { url: `${o}//${s}${u}/` }),
          (r.settings.appVerificationDisabledForTesting = !0),
          (r.emulatorConfig = Object.freeze({ host: s, port: a, protocol: o.replace(':', ''), options: Object.freeze({ disableWarnings: i }) })),
          i || Ze();
      }
      function Ye(e) {
        const t = e.indexOf(':');
        return t < 0 ? '' : e.substr(0, t + 1);
      }
      function Xe(e) {
        const t = Ye(e),
          n = /(\/\/)?([^?#/]+)/.exec(e.substr(t.length));
        if (!n) return { host: '', port: null };
        const r = n[2].split('@').pop() || '',
          i = /^(\[[^\]]+\])(:|$)/.exec(r);
        if (i) {
          const e = i[1];
          return { host: e, port: Je(r.substr(e.length + 1)) };
        }
        {
          const [e, t] = r.split(':');
          return { host: e, port: Je(t) };
        }
      }
      function Je(e) {
        if (!e) return null;
        const t = Number(e);
        return isNaN(t) ? null : t;
      }
      function Ze() {
        function e() {
          const e = document.createElement('p'),
            t = e.style;
          (e.innerText = 'Running in emulator mode. Do not use with production credentials.'),
            (t.position = 'fixed'),
            (t.width = '100%'),
            (t.backgroundColor = '#ffffff'),
            (t.border = '.1em solid #000000'),
            (t.color = '#b50000'),
            (t.bottom = '0px'),
            (t.left = '0px'),
            (t.margin = '0px'),
            (t.zIndex = '10000'),
            (t.textAlign = 'center'),
            e.classList.add('firebase-emulator-warning'),
            document.body.appendChild(e);
        }
        'undefined' !== typeof console &&
          'function' === typeof console.info &&
          console.info(
            'WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.'
          ),
          'undefined' !== typeof window &&
            'undefined' !== typeof document &&
            ('loading' === document.readyState ? window.addEventListener('DOMContentLoaded', e) : e());
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class et {
        constructor(e, t) {
          (this.providerId = e), (this.signInMethod = t);
        }
        toJSON() {
          return T('not implemented');
        }
        _getIdTokenResponse(e) {
          return T('not implemented');
        }
        _linkToIdToken(e, t) {
          return T('not implemented');
        }
        _getReauthenticationResolver(e) {
          return T('not implemented');
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function tt(e, t) {
        return F(e, 'POST', '/v1/accounts:resetPassword', M(e, t));
      }
      async function nt(e, t) {
        return F(e, 'POST', '/v1/accounts:update', t);
      }
      async function rt(e, t) {
        return F(e, 'POST', '/v1/accounts:update', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function it(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithPassword', M(e, t));
      }
      async function ot(e, t) {
        return F(e, 'POST', '/v1/accounts:sendOobCode', M(e, t));
      }
      async function st(e, t) {
        return ot(e, t);
      }
      async function at(e, t) {
        return ot(e, t);
      }
      async function ut(e, t) {
        return ot(e, t);
      }
      async function ct(e, t) {
        return ot(e, t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function lt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithEmailLink', M(e, t));
      }
      async function ht(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithEmailLink', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class ft extends et {
        constructor(e, t, n, r = null) {
          super('password', n), (this._email = e), (this._password = t), (this._tenantId = r);
        }
        static _fromEmailAndPassword(e, t) {
          return new ft(e, t, 'password');
        }
        static _fromEmailAndCode(e, t, n = null) {
          return new ft(e, t, 'emailLink', n);
        }
        toJSON() {
          return { email: this._email, password: this._password, signInMethod: this.signInMethod, tenantId: this._tenantId };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e;
          if ((null === t || void 0 === t ? void 0 : t.email) && (null === t || void 0 === t ? void 0 : t.password)) {
            if ('password' === t.signInMethod) return this._fromEmailAndPassword(t.email, t.password);
            if ('emailLink' === t.signInMethod) return this._fromEmailAndCode(t.email, t.password, t.tenantId);
          }
          return null;
        }
        async _getIdTokenResponse(e) {
          var t;
          switch (this.signInMethod) {
            case 'password':
              const n = { returnSecureToken: !0, email: this._email, password: this._password, clientType: 'CLIENT_TYPE_WEB' };
              if (null === (t = e._getRecaptchaConfig()) || void 0 === t ? void 0 : t.emailPasswordEnabled) {
                const t = await qe(e, n, 'signInWithPassword');
                return it(e, t);
              }
              return it(e, n).catch(async t => {
                if ('auth/missing-recaptcha-token' === t.code) {
                  console.log(
                    'Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.'
                  );
                  const t = await qe(e, n, 'signInWithPassword');
                  return it(e, t);
                }
                return Promise.reject(t);
              });
            case 'emailLink':
              return lt(e, { email: this._email, oobCode: this._password });
            default:
              w(e, 'internal-error');
          }
        }
        async _linkToIdToken(e, t) {
          switch (this.signInMethod) {
            case 'password':
              return nt(e, { idToken: t, returnSecureToken: !0, email: this._email, password: this._password });
            case 'emailLink':
              return ht(e, { idToken: t, email: this._email, oobCode: this._password });
            default:
              w(e, 'internal-error');
          }
        }
        _getReauthenticationResolver(e) {
          return this._getIdTokenResponse(e);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function dt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithIdp', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const pt = 'http://localhost';
      class gt extends et {
        constructor() {
          super(...arguments), (this.pendingToken = null);
        }
        static _fromParams(e) {
          const t = new gt(e.providerId, e.signInMethod);
          return (
            e.idToken || e.accessToken
              ? (e.idToken && (t.idToken = e.idToken),
                e.accessToken && (t.accessToken = e.accessToken),
                e.nonce && !e.pendingToken && (t.nonce = e.nonce),
                e.pendingToken && (t.pendingToken = e.pendingToken))
              : e.oauthToken && e.oauthTokenSecret
                ? ((t.accessToken = e.oauthToken), (t.secret = e.oauthTokenSecret))
                : w('argument-error'),
            t
          );
        }
        toJSON() {
          return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
          };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e,
            { providerId: n, signInMethod: r } = t,
            i = s(t, ['providerId', 'signInMethod']);
          if (!n || !r) return null;
          const o = new gt(n, r);
          return (
            (o.idToken = i.idToken || void 0),
            (o.accessToken = i.accessToken || void 0),
            (o.secret = i.secret),
            (o.nonce = i.nonce),
            (o.pendingToken = i.pendingToken || null),
            o
          );
        }
        _getIdTokenResponse(e) {
          const t = this.buildRequest();
          return dt(e, t);
        }
        _linkToIdToken(e, t) {
          const n = this.buildRequest();
          return (n.idToken = t), dt(e, n);
        }
        _getReauthenticationResolver(e) {
          const t = this.buildRequest();
          return (t.autoCreate = !1), dt(e, t);
        }
        buildRequest() {
          const e = { requestUri: pt, returnSecureToken: !0 };
          if (this.pendingToken) e.pendingToken = this.pendingToken;
          else {
            const t = {};
            this.idToken && (t['id_token'] = this.idToken),
              this.accessToken && (t['access_token'] = this.accessToken),
              this.secret && (t['oauth_token_secret'] = this.secret),
              (t['providerId'] = this.providerId),
              this.nonce && !this.pendingToken && (t['nonce'] = this.nonce),
              (e.postBody = (0, i.xO)(t));
          }
          return e;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function mt(e, t) {
        return F(e, 'POST', '/v1/accounts:sendVerificationCode', M(e, t));
      }
      async function vt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, t));
      }
      async function yt(e, t) {
        const n = await V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, t));
        if (n.temporaryProof) throw q(e, 'account-exists-with-different-credential', n);
        return n;
      }
      const wt = { ['USER_NOT_FOUND']: 'user-not-found' };
      async function bt(e, t) {
        const n = Object.assign(Object.assign({}, t), { operation: 'REAUTH' });
        return V(e, 'POST', '/v1/accounts:signInWithPhoneNumber', M(e, n), wt);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class _t extends et {
        constructor(e) {
          super('phone', 'phone'), (this.params = e);
        }
        static _fromVerification(e, t) {
          return new _t({ verificationId: e, verificationCode: t });
        }
        static _fromTokenResponse(e, t) {
          return new _t({ phoneNumber: e, temporaryProof: t });
        }
        _getIdTokenResponse(e) {
          return vt(e, this._makeVerificationRequest());
        }
        _linkToIdToken(e, t) {
          return yt(e, Object.assign({ idToken: t }, this._makeVerificationRequest()));
        }
        _getReauthenticationResolver(e) {
          return bt(e, this._makeVerificationRequest());
        }
        _makeVerificationRequest() {
          const { temporaryProof: e, phoneNumber: t, verificationId: n, verificationCode: r } = this.params;
          return e && t ? { temporaryProof: e, phoneNumber: t } : { sessionInfo: n, code: r };
        }
        toJSON() {
          const e = { providerId: this.providerId };
          return (
            this.params.phoneNumber && (e.phoneNumber = this.params.phoneNumber),
            this.params.temporaryProof && (e.temporaryProof = this.params.temporaryProof),
            this.params.verificationCode && (e.verificationCode = this.params.verificationCode),
            this.params.verificationId && (e.verificationId = this.params.verificationId),
            e
          );
        }
        static fromJSON(e) {
          'string' === typeof e && (e = JSON.parse(e));
          const { verificationId: t, verificationCode: n, phoneNumber: r, temporaryProof: i } = e;
          return n || t || r || i ? new _t({ verificationId: t, verificationCode: n, phoneNumber: r, temporaryProof: i }) : null;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function It(e) {
        switch (e) {
          case 'recoverEmail':
            return 'RECOVER_EMAIL';
          case 'resetPassword':
            return 'PASSWORD_RESET';
          case 'signIn':
            return 'EMAIL_SIGNIN';
          case 'verifyEmail':
            return 'VERIFY_EMAIL';
          case 'verifyAndChangeEmail':
            return 'VERIFY_AND_CHANGE_EMAIL';
          case 'revertSecondFactorAddition':
            return 'REVERT_SECOND_FACTOR_ADDITION';
          default:
            return null;
        }
      }
      function Et(e) {
        const t = (0, i.zd)((0, i.pd)(e))['link'],
          n = t ? (0, i.zd)((0, i.pd)(t))['deep_link_id'] : null,
          r = (0, i.zd)((0, i.pd)(e))['deep_link_id'],
          o = r ? (0, i.zd)((0, i.pd)(r))['link'] : null;
        return o || r || n || t || e;
      }
      class St {
        constructor(e) {
          var t, n, r, o, s, a;
          const u = (0, i.zd)((0, i.pd)(e)),
            c = null !== (t = u['apiKey']) && void 0 !== t ? t : null,
            l = null !== (n = u['oobCode']) && void 0 !== n ? n : null,
            h = It(null !== (r = u['mode']) && void 0 !== r ? r : null);
          S(c && l && h, 'argument-error'),
            (this.apiKey = c),
            (this.operation = h),
            (this.code = l),
            (this.continueUrl = null !== (o = u['continueUrl']) && void 0 !== o ? o : null),
            (this.languageCode = null !== (s = u['languageCode']) && void 0 !== s ? s : null),
            (this.tenantId = null !== (a = u['tenantId']) && void 0 !== a ? a : null);
        }
        static parseLink(e) {
          const t = Et(e);
          try {
            return new St(t);
          } catch (n) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class Tt {
        constructor() {
          this.providerId = Tt.PROVIDER_ID;
        }
        static credential(e, t) {
          return ft._fromEmailAndPassword(e, t);
        }
        static credentialWithLink(e, t) {
          const n = St.parseLink(t);
          return S(n, 'argument-error'), ft._fromEmailAndCode(e, n.code, n.tenantId);
        }
      }
      (Tt.PROVIDER_ID = 'password'), (Tt.EMAIL_PASSWORD_SIGN_IN_METHOD = 'password'), (Tt.EMAIL_LINK_SIGN_IN_METHOD = 'emailLink');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class At {
        constructor(e) {
          (this.providerId = e), (this.defaultLanguageCode = null), (this.customParameters = {});
        }
        setDefaultLanguage(e) {
          this.defaultLanguageCode = e;
        }
        setCustomParameters(e) {
          return (this.customParameters = e), this;
        }
        getCustomParameters() {
          return this.customParameters;
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class xt extends At {
        constructor() {
          super(...arguments), (this.scopes = []);
        }
        addScope(e) {
          return this.scopes.includes(e) || this.scopes.push(e), this;
        }
        getScopes() {
          return [...this.scopes];
        }
      }
      class Ct extends xt {
        static credentialFromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e;
          return S('providerId' in t && 'signInMethod' in t, 'argument-error'), gt._fromParams(t);
        }
        credential(e) {
          return this._credential(Object.assign(Object.assign({}, e), { nonce: e.rawNonce }));
        }
        _credential(e) {
          return (
            S(e.idToken || e.accessToken, 'argument-error'),
            gt._fromParams(Object.assign(Object.assign({}, e), { providerId: this.providerId, signInMethod: this.providerId }))
          );
        }
        static credentialFromResult(e) {
          return Ct.oauthCredentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Ct.oauthCredentialFromTaggedObject(e.customData || {});
        }
        static oauthCredentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { oauthIdToken: t, oauthAccessToken: n, oauthTokenSecret: r, pendingToken: i, nonce: o, providerId: s } = e;
          if (!n && !r && !t && !i) return null;
          if (!s) return null;
          try {
            return new Ct(s)._credential({ idToken: t, accessToken: n, nonce: o, pendingToken: i });
          } catch (a) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class kt extends xt {
        constructor() {
          super('facebook.com');
        }
        static credential(e) {
          return gt._fromParams({ providerId: kt.PROVIDER_ID, signInMethod: kt.FACEBOOK_SIGN_IN_METHOD, accessToken: e });
        }
        static credentialFromResult(e) {
          return kt.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return kt.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e || !('oauthAccessToken' in e)) return null;
          if (!e.oauthAccessToken) return null;
          try {
            return kt.credential(e.oauthAccessToken);
          } catch (t) {
            return null;
          }
        }
      }
      (kt.FACEBOOK_SIGN_IN_METHOD = 'facebook.com'), (kt.PROVIDER_ID = 'facebook.com');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class Ot extends xt {
        constructor() {
          super('google.com'), this.addScope('profile');
        }
        static credential(e, t) {
          return gt._fromParams({ providerId: Ot.PROVIDER_ID, signInMethod: Ot.GOOGLE_SIGN_IN_METHOD, idToken: e, accessToken: t });
        }
        static credentialFromResult(e) {
          return Ot.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Ot.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { oauthIdToken: t, oauthAccessToken: n } = e;
          if (!t && !n) return null;
          try {
            return Ot.credential(t, n);
          } catch (r) {
            return null;
          }
        }
      }
      (Ot.GOOGLE_SIGN_IN_METHOD = 'google.com'), (Ot.PROVIDER_ID = 'google.com');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      class Nt extends xt {
        constructor() {
          super('github.com');
        }
        static credential(e) {
          return gt._fromParams({ providerId: Nt.PROVIDER_ID, signInMethod: Nt.GITHUB_SIGN_IN_METHOD, accessToken: e });
        }
        static credentialFromResult(e) {
          return Nt.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Nt.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e || !('oauthAccessToken' in e)) return null;
          if (!e.oauthAccessToken) return null;
          try {
            return Nt.credential(e.oauthAccessToken);
          } catch (t) {
            return null;
          }
        }
      }
      (Nt.GITHUB_SIGN_IN_METHOD = 'github.com'), (Nt.PROVIDER_ID = 'github.com');
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      const Rt = 'http://localhost';
      class Pt extends et {
        constructor(e, t) {
          super(e, e), (this.pendingToken = t);
        }
        _getIdTokenResponse(e) {
          const t = this.buildRequest();
          return dt(e, t);
        }
        _linkToIdToken(e, t) {
          const n = this.buildRequest();
          return (n.idToken = t), dt(e, n);
        }
        _getReauthenticationResolver(e) {
          const t = this.buildRequest();
          return (t.autoCreate = !1), dt(e, t);
        }
        toJSON() {
          return { signInMethod: this.signInMethod, providerId: this.providerId, pendingToken: this.pendingToken };
        }
        static fromJSON(e) {
          const t = 'string' === typeof e ? JSON.parse(e) : e,
            { providerId: n, signInMethod: r, pendingToken: i } = t;
          return n && r && i && n === r ? new Pt(n, i) : null;
        }
        static _create(e, t) {
          return new Pt(e, t);
        }
        buildRequest() {
          return { requestUri: Rt, returnSecureToken: !0, pendingToken: this.pendingToken };
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Dt = 'saml.';
      class Lt extends At {
        constructor(e) {
          S(e.startsWith(Dt), 'argument-error'), super(e);
        }
        static credentialFromResult(e) {
          return Lt.samlCredentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return Lt.samlCredentialFromTaggedObject(e.customData || {});
        }
        static credentialFromJSON(e) {
          const t = Pt.fromJSON(e);
          return S(t, 'argument-error'), t;
        }
        static samlCredentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { pendingToken: t, providerId: n } = e;
          if (!t || !n) return null;
          try {
            return Pt._create(n, t);
          } catch (r) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class jt extends xt {
        constructor() {
          super('twitter.com');
        }
        static credential(e, t) {
          return gt._fromParams({ providerId: jt.PROVIDER_ID, signInMethod: jt.TWITTER_SIGN_IN_METHOD, oauthToken: e, oauthTokenSecret: t });
        }
        static credentialFromResult(e) {
          return jt.credentialFromTaggedObject(e);
        }
        static credentialFromError(e) {
          return jt.credentialFromTaggedObject(e.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: e }) {
          if (!e) return null;
          const { oauthAccessToken: t, oauthTokenSecret: n } = e;
          if (!t || !n) return null;
          try {
            return jt.credential(t, n);
          } catch (r) {
            return null;
          }
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      async function Mt(e, t) {
        return V(e, 'POST', '/v1/accounts:signUp', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ (jt.TWITTER_SIGN_IN_METHOD = 'twitter.com'), (jt.PROVIDER_ID = 'twitter.com');
      class Ft {
        constructor(e) {
          (this.user = e.user), (this.providerId = e.providerId), (this._tokenResponse = e._tokenResponse), (this.operationType = e.operationType);
        }
        static async _fromIdTokenResponse(e, t, n, r = !1) {
          const i = await ce._fromIdTokenResponse(e, n, r),
            o = Ut(n),
            s = new Ft({ user: i, providerId: o, _tokenResponse: n, operationType: t });
          return s;
        }
        static async _forOperation(e, t, n) {
          await e._updateTokensIfNecessary(n, !0);
          const r = Ut(n);
          return new Ft({ user: e, providerId: r, _tokenResponse: n, operationType: t });
        }
      }
      function Ut(e) {
        return e.providerId ? e.providerId : 'phoneNumber' in e ? 'phone' : null;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Vt(e) {
        var t;
        const n = We(e);
        if ((await n._initializationPromise, null === (t = n.currentUser) || void 0 === t ? void 0 : t.isAnonymous))
          return new Ft({ user: n.currentUser, providerId: null, operationType: 'signIn' });
        const r = await Mt(n, { returnSecureToken: !0 }),
          i = await Ft._fromIdTokenResponse(n, 'signIn', r, !0);
        return await n._updateCurrentUser(i.user), i;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Bt extends i.ZR {
        constructor(e, t, n, r) {
          var i;
          super(t.code, t.message),
            (this.operationType = n),
            (this.user = r),
            Object.setPrototypeOf(this, Bt.prototype),
            (this.customData = {
              appName: e.name,
              tenantId: null !== (i = e.tenantId) && void 0 !== i ? i : void 0,
              _serverResponse: t.customData._serverResponse,
              operationType: n
            });
        }
        static _fromErrorAndOperation(e, t, n, r) {
          return new Bt(e, t, n, r);
        }
      }
      function $t(e, t, n, r) {
        const i = 'reauthenticate' === t ? n._getReauthenticationResolver(e) : n._getIdTokenResponse(e);
        return i.catch(n => {
          if ('auth/multi-factor-auth-required' === n.code) throw Bt._fromErrorAndOperation(e, n, t, r);
          throw n;
        });
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function qt(e) {
        return new Set(e.map(({ providerId: e }) => e).filter(e => !!e));
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function zt(e, t) {
        const n = (0, i.m9)(e);
        await Wt(!0, n, t);
        const { providerUserInfo: r } = await G(n.auth, { idToken: await n.getIdToken(), deleteProvider: [t] }),
          o = qt(r || []);
        return (
          (n.providerData = n.providerData.filter(e => o.has(e.providerId))),
          o.has('phone') || (n.phoneNumber = null),
          await n.auth._persistUserIfCurrent(n),
          n
        );
      }
      async function Gt(e, t, n = !1) {
        const r = await J(e, t._linkToIdToken(e.auth, await e.getIdToken()), n);
        return Ft._forOperation(e, 'link', r);
      }
      async function Wt(e, t, n) {
        await ne(t);
        const r = qt(t.providerData),
          i = !1 === e ? 'provider-already-linked' : 'no-such-provider';
        S(r.has(n) === e, t.auth, i);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Ht(e, t, n = !1) {
        const { auth: r } = e,
          i = 'reauthenticate';
        try {
          const o = await J(e, $t(r, i, t, e), n);
          S(o.idToken, r, 'internal-error');
          const s = Y(o.idToken);
          S(s, r, 'internal-error');
          const { sub: a } = s;
          return S(e.uid === a, r, 'user-mismatch'), Ft._forOperation(e, i, o);
        } catch (o) {
          throw ('auth/user-not-found' === (null === o || void 0 === o ? void 0 : o.code) && w(r, 'user-mismatch'), o);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Kt(e, t, n = !1) {
        const r = 'signIn',
          i = await $t(e, r, t),
          o = await Ft._fromIdTokenResponse(e, r, i);
        return n || (await e._updateCurrentUser(o.user)), o;
      }
      async function Qt(e, t) {
        return Kt(We(e), t);
      }
      async function Yt(e, t) {
        const n = (0, i.m9)(e);
        return await Wt(!1, n, t.providerId), Gt(n, t);
      }
      async function Xt(e, t) {
        return Ht((0, i.m9)(e), t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Jt(e, t) {
        return V(e, 'POST', '/v1/accounts:signInWithCustomToken', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function Zt(e, t) {
        const n = We(e),
          r = await Jt(n, { token: t, returnSecureToken: !0 }),
          i = await Ft._fromIdTokenResponse(n, 'signIn', r);
        return await n._updateCurrentUser(i.user), i;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class en {
        constructor(e, t) {
          (this.factorId = e),
            (this.uid = t.mfaEnrollmentId),
            (this.enrollmentTime = new Date(t.enrolledAt).toUTCString()),
            (this.displayName = t.displayName);
        }
        static _fromServerResponse(e, t) {
          return 'phoneInfo' in t ? tn._fromServerResponse(e, t) : 'totpInfo' in t ? nn._fromServerResponse(e, t) : w(e, 'internal-error');
        }
      }
      class tn extends en {
        constructor(e) {
          super('phone', e), (this.phoneNumber = e.phoneInfo);
        }
        static _fromServerResponse(e, t) {
          return new tn(t);
        }
      }
      class nn extends en {
        constructor(e) {
          super('totp', e);
        }
        static _fromServerResponse(e, t) {
          return new nn(t);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function rn(e, t, n) {
        var r;
        S((null === (r = n.url) || void 0 === r ? void 0 : r.length) > 0, e, 'invalid-continue-uri'),
          S('undefined' === typeof n.dynamicLinkDomain || n.dynamicLinkDomain.length > 0, e, 'invalid-dynamic-link-domain'),
          (t.continueUrl = n.url),
          (t.dynamicLinkDomain = n.dynamicLinkDomain),
          (t.canHandleCodeInApp = n.handleCodeInApp),
          n.iOS && (S(n.iOS.bundleId.length > 0, e, 'missing-ios-bundle-id'), (t.iOSBundleId = n.iOS.bundleId)),
          n.android &&
            (S(n.android.packageName.length > 0, e, 'missing-android-pkg-name'),
            (t.androidInstallApp = n.android.installApp),
            (t.androidMinimumVersionCode = n.android.minimumVersion),
            (t.androidPackageName = n.android.packageName));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function on(e, t, n) {
        var r;
        const i = We(e),
          o = { requestType: 'PASSWORD_RESET', email: t, clientType: 'CLIENT_TYPE_WEB' };
        if (null === (r = i._getRecaptchaConfig()) || void 0 === r ? void 0 : r.emailPasswordEnabled) {
          const e = await qe(i, o, 'getOobCode', !0);
          n && rn(i, e, n), await at(i, e);
        } else
          n && rn(i, o, n),
            await at(i, o).catch(async e => {
              if ('auth/missing-recaptcha-token' !== e.code) return Promise.reject(e);
              {
                console.log(
                  'Password resets are protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the password reset flow.'
                );
                const e = await qe(i, o, 'getOobCode', !0);
                n && rn(i, e, n), await at(i, e);
              }
            });
      }
      async function sn(e, t, n) {
        await tt((0, i.m9)(e), { oobCode: t, newPassword: n });
      }
      async function an(e, t) {
        await rt((0, i.m9)(e), { oobCode: t });
      }
      async function un(e, t) {
        const n = (0, i.m9)(e),
          r = await tt(n, { oobCode: t }),
          o = r.requestType;
        switch ((S(o, n, 'internal-error'), o)) {
          case 'EMAIL_SIGNIN':
            break;
          case 'VERIFY_AND_CHANGE_EMAIL':
            S(r.newEmail, n, 'internal-error');
            break;
          case 'REVERT_SECOND_FACTOR_ADDITION':
            S(r.mfaInfo, n, 'internal-error');
          default:
            S(r.email, n, 'internal-error');
        }
        let s = null;
        return (
          r.mfaInfo && (s = en._fromServerResponse(We(n), r.mfaInfo)),
          {
            data: {
              email: ('VERIFY_AND_CHANGE_EMAIL' === r.requestType ? r.newEmail : r.email) || null,
              previousEmail: ('VERIFY_AND_CHANGE_EMAIL' === r.requestType ? r.email : r.newEmail) || null,
              multiFactorInfo: s
            },
            operation: o
          }
        );
      }
      async function cn(e, t) {
        const { data: n } = await un((0, i.m9)(e), t);
        return n.email;
      }
      async function ln(e, t, n) {
        var r;
        const i = We(e),
          o = { returnSecureToken: !0, email: t, password: n, clientType: 'CLIENT_TYPE_WEB' };
        let s;
        if (null === (r = i._getRecaptchaConfig()) || void 0 === r ? void 0 : r.emailPasswordEnabled) {
          const e = await qe(i, o, 'signUpPassword');
          s = Mt(i, e);
        } else
          s = Mt(i, o).catch(async e => {
            if ('auth/missing-recaptcha-token' === e.code) {
              console.log(
                'Sign-up is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-up flow.'
              );
              const e = await qe(i, o, 'signUpPassword');
              return Mt(i, e);
            }
            return Promise.reject(e);
          });
        const a = await s.catch(e => Promise.reject(e)),
          u = await Ft._fromIdTokenResponse(i, 'signIn', a);
        return await i._updateCurrentUser(u.user), u;
      }
      function hn(e, t, n) {
        return Qt((0, i.m9)(e), Tt.credential(t, n));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function fn(e, t, n) {
        var r;
        const i = We(e),
          o = { requestType: 'EMAIL_SIGNIN', email: t, clientType: 'CLIENT_TYPE_WEB' };
        function s(e, t) {
          S(t.handleCodeInApp, i, 'argument-error'), t && rn(i, e, t);
        }
        if (null === (r = i._getRecaptchaConfig()) || void 0 === r ? void 0 : r.emailPasswordEnabled) {
          const e = await qe(i, o, 'getOobCode', !0);
          s(e, n), await ut(i, e);
        } else
          s(o, n),
            await ut(i, o).catch(async e => {
              if ('auth/missing-recaptcha-token' !== e.code) return Promise.reject(e);
              {
                console.log(
                  'Email link sign-in is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.'
                );
                const e = await qe(i, o, 'getOobCode', !0);
                s(e, n), await ut(i, e);
              }
            });
      }
      function dn(e, t) {
        const n = St.parseLink(t);
        return 'EMAIL_SIGNIN' === (null === n || void 0 === n ? void 0 : n.operation);
      }
      async function pn(e, t, n) {
        const r = (0, i.m9)(e),
          o = Tt.credentialWithLink(t, n || x());
        return S(o._tenantId === (r.tenantId || null), r, 'tenant-id-mismatch'), Qt(r, o);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function gn(e, t) {
        return F(e, 'POST', '/v1/accounts:createAuthUri', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function mn(e, t) {
        const n = C() ? x() : 'http://localhost',
          r = { identifier: t, continueUri: n },
          { signinMethods: o } = await gn((0, i.m9)(e), r);
        return o || [];
      }
      async function vn(e, t) {
        const n = (0, i.m9)(e),
          r = await e.getIdToken(),
          o = { requestType: 'VERIFY_EMAIL', idToken: r };
        t && rn(n.auth, o, t);
        const { email: s } = await st(n.auth, o);
        s !== e.email && (await e.reload());
      }
      async function yn(e, t, n) {
        const r = (0, i.m9)(e),
          o = await e.getIdToken(),
          s = { requestType: 'VERIFY_AND_CHANGE_EMAIL', idToken: o, newEmail: t };
        n && rn(r.auth, s, n);
        const { email: a } = await ct(r.auth, s);
        a !== e.email && (await e.reload());
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function wn(e, t) {
        return F(e, 'POST', '/v1/accounts:update', t);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ async function bn(e, { displayName: t, photoURL: n }) {
        if (void 0 === t && void 0 === n) return;
        const r = (0, i.m9)(e),
          o = await r.getIdToken(),
          s = { idToken: o, displayName: t, photoUrl: n, returnSecureToken: !0 },
          a = await J(r, wn(r.auth, s));
        (r.displayName = a.displayName || null), (r.photoURL = a.photoUrl || null);
        const u = r.providerData.find(({ providerId: e }) => 'password' === e);
        u && ((u.displayName = r.displayName), (u.photoURL = r.photoURL)), await r._updateTokensIfNecessary(a);
      }
      function _n(e, t) {
        return En((0, i.m9)(e), t, null);
      }
      function In(e, t) {
        return En((0, i.m9)(e), null, t);
      }
      async function En(e, t, n) {
        const { auth: r } = e,
          i = await e.getIdToken(),
          o = { idToken: i, returnSecureToken: !0 };
        t && (o.email = t), n && (o.password = n);
        const s = await J(e, nt(r, o));
        await e._updateTokensIfNecessary(s, !0);
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Sn(e) {
        var t, n;
        if (!e) return null;
        const { providerId: r } = e,
          i = e.rawUserInfo ? JSON.parse(e.rawUserInfo) : {},
          o = e.isNewUser || 'identitytoolkit#SignupNewUserResponse' === e.kind;
        if (!r && (null === e || void 0 === e ? void 0 : e.idToken)) {
          const r = null === (n = null === (t = Y(e.idToken)) || void 0 === t ? void 0 : t.firebase) || void 0 === n ? void 0 : n['sign_in_provider'];
          if (r) {
            const e = 'anonymous' !== r && 'custom' !== r ? r : null;
            return new Tn(o, e);
          }
        }
        if (!r) return null;
        switch (r) {
          case 'facebook.com':
            return new xn(o, i);
          case 'github.com':
            return new Cn(o, i);
          case 'google.com':
            return new kn(o, i);
          case 'twitter.com':
            return new On(o, i, e.screenName || null);
          case 'custom':
          case 'anonymous':
            return new Tn(o, null);
          default:
            return new Tn(o, r, i);
        }
      }
      class Tn {
        constructor(e, t, n = {}) {
          (this.isNewUser = e), (this.providerId = t), (this.profile = n);
        }
      }
      class An extends Tn {
        constructor(e, t, n, r) {
          super(e, t, n), (this.username = r);
        }
      }
      class xn extends Tn {
        constructor(e, t) {
          super(e, 'facebook.com', t);
        }
      }
      class Cn extends An {
        constructor(e, t) {
          super(
            e,
            'github.com',
            t,
            'string' === typeof (null === t || void 0 === t ? void 0 : t.login) ? (null === t || void 0 === t ? void 0 : t.login) : null
          );
        }
      }
      class kn extends Tn {
        constructor(e, t) {
          super(e, 'google.com', t);
        }
      }
      class On extends An {
        constructor(e, t, n) {
          super(e, 'twitter.com', t, n);
        }
      }
      function Nn(e) {
        const { user: t, _tokenResponse: n } = e;
        return t.isAnonymous && !n ? { providerId: null, isNewUser: !1, profile: null } : Sn(n);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Rn {
        constructor(e, t, n) {
          (this.type = e), (this.credential = t), (this.auth = n);
        }
        static _fromIdtoken(e, t) {
          return new Rn('enroll', e, t);
        }
        static _fromMfaPendingCredential(e) {
          return new Rn('signin', e);
        }
        toJSON() {
          const e = 'enroll' === this.type ? 'idToken' : 'pendingCredential';
          return { multiFactorSession: { [e]: this.credential } };
        }
        static fromJSON(e) {
          var t, n;
          if (null === e || void 0 === e ? void 0 : e.multiFactorSession) {
            if (null === (t = e.multiFactorSession) || void 0 === t ? void 0 : t.pendingCredential)
              return Rn._fromMfaPendingCredential(e.multiFactorSession.pendingCredential);
            if (null === (n = e.multiFactorSession) || void 0 === n ? void 0 : n.idToken) return Rn._fromIdtoken(e.multiFactorSession.idToken);
          }
          return null;
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Pn {
        constructor(e, t, n) {
          (this.session = e), (this.hints = t), (this.signInResolver = n);
        }
        static _fromError(e, t) {
          const n = We(e),
            r = t.customData._serverResponse,
            i = (r.mfaInfo || []).map(e => en._fromServerResponse(n, e));
          S(r.mfaPendingCredential, n, 'internal-error');
          const o = Rn._fromMfaPendingCredential(r.mfaPendingCredential);
          return new Pn(o, i, async e => {
            const i = await e._process(n, o);
            delete r.mfaInfo, delete r.mfaPendingCredential;
            const s = Object.assign(Object.assign({}, r), { idToken: i.idToken, refreshToken: i.refreshToken });
            switch (t.operationType) {
              case 'signIn':
                const e = await Ft._fromIdTokenResponse(n, t.operationType, s);
                return await n._updateCurrentUser(e.user), e;
              case 'reauthenticate':
                return S(t.user, n, 'internal-error'), Ft._forOperation(t.user, t.operationType, s);
              default:
                w(n, 'internal-error');
            }
          });
        }
        async resolveSignIn(e) {
          const t = e;
          return this.signInResolver(t);
        }
      }
      function Dn(e, t) {
        var n;
        const r = (0, i.m9)(e),
          o = t;
        return (
          S(t.customData.operationType, r, 'argument-error'),
          S(null === (n = o.customData._serverResponse) || void 0 === n ? void 0 : n.mfaPendingCredential, r, 'argument-error'),
          Pn._fromError(r, o)
        );
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Ln(e, t) {
        return F(e, 'POST', '/v2/accounts/mfaEnrollment:start', M(e, t));
      }
      function jn(e, t) {
        return F(e, 'POST', '/v2/accounts/mfaEnrollment:finalize', M(e, t));
      }
      function Mn(e, t) {
        return F(e, 'POST', '/v2/accounts/mfaEnrollment:start', M(e, t));
      }
      function Fn(e, t) {
        return F(e, 'POST', '/v2/accounts/mfaEnrollment:finalize', M(e, t));
      }
      function Un(e, t) {
        return F(e, 'POST', '/v2/accounts/mfaEnrollment:withdraw', M(e, t));
      }
      class Vn {
        constructor(e) {
          (this.user = e),
            (this.enrolledFactors = []),
            e._onReload(t => {
              t.mfaInfo && (this.enrolledFactors = t.mfaInfo.map(t => en._fromServerResponse(e.auth, t)));
            });
        }
        static _fromUser(e) {
          return new Vn(e);
        }
        async getSession() {
          return Rn._fromIdtoken(await this.user.getIdToken(), this.user.auth);
        }
        async enroll(e, t) {
          const n = e,
            r = await this.getSession(),
            i = await J(this.user, n._process(this.user.auth, r, t));
          return await this.user._updateTokensIfNecessary(i), this.user.reload();
        }
        async unenroll(e) {
          const t = 'string' === typeof e ? e : e.uid,
            n = await this.user.getIdToken();
          try {
            const e = await J(this.user, Un(this.user.auth, { idToken: n, mfaEnrollmentId: t }));
            (this.enrolledFactors = this.enrolledFactors.filter(({ uid: e }) => e !== t)),
              await this.user._updateTokensIfNecessary(e),
              await this.user.reload();
          } catch (r) {
            throw r;
          }
        }
      }
      const Bn = new WeakMap();
      function $n(e) {
        const t = (0, i.m9)(e);
        return Bn.has(t) || Bn.set(t, Vn._fromUser(t)), Bn.get(t);
      }
      const qn = '__sak';
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class zn {
        constructor(e, t) {
          (this.storageRetriever = e), (this.type = t);
        }
        _isAvailable() {
          try {
            return this.storage ? (this.storage.setItem(qn, '1'), this.storage.removeItem(qn), Promise.resolve(!0)) : Promise.resolve(!1);
          } catch (e) {
            return Promise.resolve(!1);
          }
        }
        _set(e, t) {
          return this.storage.setItem(e, JSON.stringify(t)), Promise.resolve();
        }
        _get(e) {
          const t = this.storage.getItem(e);
          return Promise.resolve(t ? JSON.parse(t) : null);
        }
        _remove(e) {
          return this.storage.removeItem(e), Promise.resolve();
        }
        get storage() {
          return this.storageRetriever();
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Gn() {
        const e = (0, i.z$)();
        return ye(e) || Se(e);
      }
      const Wn = 1e3,
        Hn = 10;
      class Kn extends zn {
        constructor() {
          super(() => window.localStorage, 'LOCAL'),
            (this.boundEventHandler = (e, t) => this.onStorageEvent(e, t)),
            (this.listeners = {}),
            (this.localCache = {}),
            (this.pollTimer = null),
            (this.safariLocalStorageNotSynced = Gn() && ke()),
            (this.fallbackToPolling = Ce()),
            (this._shouldAllowMigration = !0);
        }
        forAllChangedKeys(e) {
          for (const t of Object.keys(this.listeners)) {
            const n = this.storage.getItem(t),
              r = this.localCache[t];
            n !== r && e(t, r, n);
          }
        }
        onStorageEvent(e, t = !1) {
          if (!e.key)
            return void this.forAllChangedKeys((e, t, n) => {
              this.notifyListeners(e, n);
            });
          const n = e.key;
          if ((t ? this.detachListener() : this.stopPolling(), this.safariLocalStorageNotSynced)) {
            const r = this.storage.getItem(n);
            if (e.newValue !== r) null !== e.newValue ? this.storage.setItem(n, e.newValue) : this.storage.removeItem(n);
            else if (this.localCache[n] === e.newValue && !t) return;
          }
          const r = () => {
              const e = this.storage.getItem(n);
              (t || this.localCache[n] !== e) && this.notifyListeners(n, e);
            },
            i = this.storage.getItem(n);
          xe() && i !== e.newValue && e.newValue !== e.oldValue ? setTimeout(r, Hn) : r();
        }
        notifyListeners(e, t) {
          this.localCache[e] = t;
          const n = this.listeners[e];
          if (n) for (const r of Array.from(n)) r(t ? JSON.parse(t) : t);
        }
        startPolling() {
          this.stopPolling(),
            (this.pollTimer = setInterval(() => {
              this.forAllChangedKeys((e, t, n) => {
                this.onStorageEvent(new StorageEvent('storage', { key: e, oldValue: t, newValue: n }), !0);
              });
            }, Wn));
        }
        stopPolling() {
          this.pollTimer && (clearInterval(this.pollTimer), (this.pollTimer = null));
        }
        attachListener() {
          window.addEventListener('storage', this.boundEventHandler);
        }
        detachListener() {
          window.removeEventListener('storage', this.boundEventHandler);
        }
        _addListener(e, t) {
          0 === Object.keys(this.listeners).length && (this.fallbackToPolling ? this.startPolling() : this.attachListener()),
            this.listeners[e] || ((this.listeners[e] = new Set()), (this.localCache[e] = this.storage.getItem(e))),
            this.listeners[e].add(t);
        }
        _removeListener(e, t) {
          this.listeners[e] && (this.listeners[e].delete(t), 0 === this.listeners[e].size && delete this.listeners[e]),
            0 === Object.keys(this.listeners).length && (this.detachListener(), this.stopPolling());
        }
        async _set(e, t) {
          await super._set(e, t), (this.localCache[e] = JSON.stringify(t));
        }
        async _get(e) {
          const t = await super._get(e);
          return (this.localCache[e] = JSON.stringify(t)), t;
        }
        async _remove(e) {
          await super._remove(e), delete this.localCache[e];
        }
      }
      Kn.type = 'LOCAL';
      const Qn = Kn;
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Yn extends zn {
        constructor() {
          super(() => window.sessionStorage, 'SESSION');
        }
        _addListener(e, t) {}
        _removeListener(e, t) {}
      }
      Yn.type = 'SESSION';
      const Xn = Yn;
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Jn(e) {
        return Promise.all(
          e.map(async e => {
            try {
              const t = await e;
              return { fulfilled: !0, value: t };
            } catch (t) {
              return { fulfilled: !1, reason: t };
            }
          })
        );
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ class Zn {
        constructor(e) {
          (this.eventTarget = e), (this.handlersMap = {}), (this.boundEventHandler = this.handleEvent.bind(this));
        }
        static _getInstance(e) {
          const t = this.receivers.find(t => t.isListeningto(e));
          if (t) return t;
          const n = new Zn(e);
          return this.receivers.push(n), n;
        }
        isListeningto(e) {
          return this.eventTarget === e;
        }
        async handleEvent(e) {
          const t = e,
            { eventId: n, eventType: r, data: i } = t.data,
            o = this.handlersMap[r];
          if (!(null === o || void 0 === o ? void 0 : o.size)) return;
          t.ports[0].postMessage({ status: 'ack', eventId: n, eventType: r });
          const s = Array.from(o).map(async e => e(t.origin, i)),
            a = await Jn(s);
          t.ports[0].postMessage({ status: 'done', eventId: n, eventType: r, response: a });
        }
        _subscribe(e, t) {
          0 === Object.keys(this.handlersMap).length && this.eventTarget.addEventListener('message', this.boundEventHandler),
            this.handlersMap[e] || (this.handlersMap[e] = new Set()),
            this.handlersMap[e].add(t);
        }
        _unsubscribe(e, t) {
          this.handlersMap[e] && t && this.handlersMap[e].delete(t),
            (t && 0 !== this.handlersMap[e].size) || delete this.handlersMap[e],
            0 === Object.keys(this.handlersMap).length && this.eventTarget.removeEventListener('message', this.boundEventHandler);
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      function er(e = '', t = 10) {
        let n = '';
        for (let r = 0; r < t; r++) n += Math.floor(10 * Math.random());
        return e + n;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ Zn.receivers = [];
      class tr {
        constructor(e) {
          (this.target = e), (this.handlers = new Set());
        }
        removeMessageHandler(e) {
          e.messageChannel && (e.messageChannel.port1.removeEventListener('message', e.onMessage), e.messageChannel.port1.close()),
            this.handlers.delete(e);
        }
        async _send(e, t, n = 50) {
          const r = 'undefined' !== typeof MessageChannel ? new MessageChannel() : null;
          if (!r) throw new Error('connection_unavailable');
          let i, o;
          return new Promise((s, a) => {
            const u = er('', 20);
            r.port1.start();
            const c = setTimeout(() => {
              a(new Error('unsupported_event'));
            }, n);
            (o = {
              messageChannel: r,
              onMessage(e) {
                const t = e;
                if (t.data.eventId === u)
                  switch (t.data.status) {
                    case 'ack':
                      clearTimeout(c),
                        (i = setTimeout(() => {
                          a(new Error('timeout'));
                        }, 3e3));
                      break;
                    case 'done':
                      clearTimeout(i), s(t.data.response);
                      break;
                    default:
                      clearTimeout(c), clearTimeout(i), a(new Error('invalid_response'));
                      break;
                  }
              }
            }),
              this.handlers.add(o),
              r.port1.addEventListener('message', o.onMessage),
              this.target.postMessage({ eventType: e, eventId: u, data: t }, [r.port2]);
          }).finally(() => {
            o && this.removeMessageHandler(o);
          });
        }
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function nr() {
        return window;
      }
      function rr(e) {
        nr().location.href = e;
      }
      /**
       * @license
       * Copyright 2020 Google LLC.
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function ir() {
        return 'undefined' !== typeof nr()['WorkerGlobalScope'] && 'function' === typeof nr()['importScripts'];
      }
      async function or() {
        if (!(null === navigator || void 0 === navigator ? void 0 : navigator.serviceWorker)) return null;
        try {
          const e = await navigator.serviceWorker.ready;
          return e.active;
        } catch (e) {
          return null;
        }
      }
      function sr() {
        var e;
        return (
          (null === (e = null === navigator || void 0 === navigator ? void 0 : navigator.serviceWorker) || void 0 === e ? void 0 : e.controller) ||
          null
        );
      }
      function ar() {
        return ir() ? self : null;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const ur = 'firebaseLocalStorageDb',
        cr = 1,
        lr = 'firebaseLocalStorage',
        hr = 'fbase_key';
      class fr {
        constructor(e) {
          this.request = e;
        }
        toPromise() {
          return new Promise((e, t) => {
            this.request.addEventListener('success', () => {
              e(this.request.result);
            }),
              this.request.addEventListener('error', () => {
                t(this.request.error);
              });
          });
        }
      }
      function dr(e, t) {
        return e.transaction([lr], t ? 'readwrite' : 'readonly').objectStore(lr);
      }
      function pr() {
        const e = indexedDB.deleteDatabase(ur);
        return new fr(e).toPromise();
      }
      function gr() {
        const e = indexedDB.open(ur, cr);
        return new Promise((t, n) => {
          e.addEventListener('error', () => {
            n(e.error);
          }),
            e.addEventListener('upgradeneeded', () => {
              const t = e.result;
              try {
                t.createObjectStore(lr, { keyPath: hr });
              } catch (r) {
                n(r);
              }
            }),
            e.addEventListener('success', async () => {
              const n = e.result;
              n.objectStoreNames.contains(lr) ? t(n) : (n.close(), await pr(), t(await gr()));
            });
        });
      }
      async function mr(e, t, n) {
        const r = dr(e, !0).put({ [hr]: t, value: n });
        return new fr(r).toPromise();
      }
      async function vr(e, t) {
        const n = dr(e, !1).get(t),
          r = await new fr(n).toPromise();
        return void 0 === r ? null : r.value;
      }
      function yr(e, t) {
        const n = dr(e, !0).delete(t);
        return new fr(n).toPromise();
      }
      const wr = 800,
        br = 3;
      class _r {
        constructor() {
          (this.type = 'LOCAL'),
            (this._shouldAllowMigration = !0),
            (this.listeners = {}),
            (this.localCache = {}),
            (this.pollTimer = null),
            (this.pendingWrites = 0),
            (this.receiver = null),
            (this.sender = null),
            (this.serviceWorkerReceiverAvailable = !1),
            (this.activeServiceWorker = null),
            (this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(
              () => {},
              () => {}
            ));
        }
        async _openDb() {
          return this.db || (this.db = await gr()), this.db;
        }
        async _withRetries(e) {
          let t = 0;
          while (1)
            try {
              const t = await this._openDb();
              return await e(t);
            } catch (n) {
              if (t++ > br) throw n;
              this.db && (this.db.close(), (this.db = void 0));
            }
        }
        async initializeServiceWorkerMessaging() {
          return ir() ? this.initializeReceiver() : this.initializeSender();
        }
        async initializeReceiver() {
          (this.receiver = Zn._getInstance(ar())),
            this.receiver._subscribe('keyChanged', async (e, t) => {
              const n = await this._poll();
              return { keyProcessed: n.includes(t.key) };
            }),
            this.receiver._subscribe('ping', async (e, t) => ['keyChanged']);
        }
        async initializeSender() {
          var e, t;
          if (((this.activeServiceWorker = await or()), !this.activeServiceWorker)) return;
          this.sender = new tr(this.activeServiceWorker);
          const n = await this.sender._send('ping', {}, 800);
          n &&
            (null === (e = n[0]) || void 0 === e ? void 0 : e.fulfilled) &&
            (null === (t = n[0]) || void 0 === t ? void 0 : t.value.includes('keyChanged')) &&
            (this.serviceWorkerReceiverAvailable = !0);
        }
        async notifyServiceWorker(e) {
          if (this.sender && this.activeServiceWorker && sr() === this.activeServiceWorker)
            try {
              await this.sender._send('keyChanged', { key: e }, this.serviceWorkerReceiverAvailable ? 800 : 50);
            } catch (t) {}
        }
        async _isAvailable() {
          try {
            if (!indexedDB) return !1;
            const e = await gr();
            return await mr(e, qn, '1'), await yr(e, qn), !0;
          } catch (e) {}
          return !1;
        }
        async _withPendingWrite(e) {
          this.pendingWrites++;
          try {
            await e();
          } finally {
            this.pendingWrites--;
          }
        }
        async _set(e, t) {
          return this._withPendingWrite(
            async () => (await this._withRetries(n => mr(n, e, t)), (this.localCache[e] = t), this.notifyServiceWorker(e))
          );
        }
        async _get(e) {
          const t = await this._withRetries(t => vr(t, e));
          return (this.localCache[e] = t), t;
        }
        async _remove(e) {
          return this._withPendingWrite(async () => (await this._withRetries(t => yr(t, e)), delete this.localCache[e], this.notifyServiceWorker(e)));
        }
        async _poll() {
          const e = await this._withRetries(e => {
            const t = dr(e, !1).getAll();
            return new fr(t).toPromise();
          });
          if (!e) return [];
          if (0 !== this.pendingWrites) return [];
          const t = [],
            n = new Set();
          for (const { fbase_key: r, value: i } of e)
            n.add(r), JSON.stringify(this.localCache[r]) !== JSON.stringify(i) && (this.notifyListeners(r, i), t.push(r));
          for (const r of Object.keys(this.localCache)) this.localCache[r] && !n.has(r) && (this.notifyListeners(r, null), t.push(r));
          return t;
        }
        notifyListeners(e, t) {
          this.localCache[e] = t;
          const n = this.listeners[e];
          if (n) for (const r of Array.from(n)) r(t);
        }
        startPolling() {
          this.stopPolling(), (this.pollTimer = setInterval(async () => this._poll(), wr));
        }
        stopPolling() {
          this.pollTimer && (clearInterval(this.pollTimer), (this.pollTimer = null));
        }
        _addListener(e, t) {
          0 === Object.keys(this.listeners).length && this.startPolling(),
            this.listeners[e] || ((this.listeners[e] = new Set()), this._get(e)),
            this.listeners[e].add(t);
        }
        _removeListener(e, t) {
          this.listeners[e] && (this.listeners[e].delete(t), 0 === this.listeners[e].size && delete this.listeners[e]),
            0 === Object.keys(this.listeners).length && this.stopPolling();
        }
      }
      _r.type = 'LOCAL';
      const Ir = _r;
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ function Er(e, t) {
        return F(e, 'POST', '/v2/accounts/mfaSignIn:start', M(e, t));
      }
      function Sr(e, t) {
        return F(e, 'POST', '/v2/accounts/mfaSignIn:finalize', M(e, t));
      }
      function Tr(e, t) {
        return F(e, 'POST', '/v2/accounts/mfaSignIn:finalize', M(e, t));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Ar = 500,
        xr = 6e4,
        Cr = 1e12;
      class kr {
        constructor(e) {
          (this.auth = e), (this.counter = Cr), (this._widgets = new Map());
        }
        render(e, t) {
          const n = this.counter;
          return this._widgets.set(n, new Or(e, this.auth.name, t || {})), this.counter++, n;
        }
        reset(e) {
          var t;
          const n = e || Cr;
          null === (t = this._widgets.get(n)) || void 0 === t || t.delete(), this._widgets.delete(n);
        }
        getResponse(e) {
          var t;
          const n = e || Cr;
          return (null === (t = this._widgets.get(n)) || void 0 === t ? void 0 : t.getResponse()) || '';
        }
        async execute(e) {
          var t;
          const n = e || Cr;
          return null === (t = this._widgets.get(n)) || void 0 === t || t.execute(), '';
        }
      }
      class Or {
        constructor(e, t, n) {
          (this.params = n),
            (this.timerId = null),
            (this.deleted = !1),
            (this.responseToken = null),
            (this.clickHandler = () => {
              this.execute();
            });
          const r = 'string' === typeof e ? document.getElementById(e) : e;
          S(r, 'argument-error', { appName: t }),
            (this.container = r),
            (this.isVisible = 'invisible' !== this.params.size),
            this.isVisible ? this.execute() : this.container.addEventListener('click', this.clickHandler);
        }
        getResponse() {
          return this.checkIfDeleted(), this.responseToken;
        }
        delete() {
          this.checkIfDeleted(),
            (this.deleted = !0),
            this.timerId && (clearTimeout(this.timerId), (this.timerId = null)),
            this.container.removeEventListener('click', this.clickHandler);
        }
        execute() {
          this.checkIfDeleted(),
            this.timerId ||
              (this.timerId = window.setTimeout(() => {
                this.responseToken = Nr(50);
                const { callback: e, 'expired-callback': t } = this.params;
                if (e)
                  try {
                    e(this.responseToken);
                  } catch (n) {}
                this.timerId = window.setTimeout(() => {
                  if (((this.timerId = null), (this.responseToken = null), t))
                    try {
                      t();
                    } catch (n) {}
                  this.isVisible && this.execute();
                }, xr);
              }, Ar));
        }
        checkIfDeleted() {
          if (this.deleted) throw new Error('reCAPTCHA mock was already deleted!');
        }
      }
      function Nr(e) {
        const t = [],
          n = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (let r = 0; r < e; r++) t.push(n.charAt(Math.floor(Math.random() * n.length)));
        return t.join('');
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Rr = Fe('rcb'),
        Pr = new R(3e4, 6e4),
        Dr = 'https://www.google.com/recaptcha/api.js?';
      class Lr {
        constructor() {
          var e;
          (this.hostLanguage = ''),
            (this.counter = 0),
            (this.librarySeparatelyLoaded = !!(null === (e = nr().grecaptcha) || void 0 === e ? void 0 : e.render));
        }
        load(e, t = '') {
          return (
            S(jr(t), e, 'argument-error'),
            this.shouldResolveImmediately(t) && Pe(nr().grecaptcha)
              ? Promise.resolve(nr().grecaptcha)
              : new Promise((n, r) => {
                  const o = nr().setTimeout(() => {
                    r(b(e, 'network-request-failed'));
                  }, Pr.get());
                  nr()[Rr] = () => {
                    nr().clearTimeout(o), delete nr()[Rr];
                    const i = nr().grecaptcha;
                    if (!i || !Pe(i)) return void r(b(e, 'internal-error'));
                    const s = i.render;
                    (i.render = (e, t) => {
                      const n = s(e, t);
                      return this.counter++, n;
                    }),
                      (this.hostLanguage = t),
                      n(i);
                  };
                  const s = `${Dr}?${(0, i.xO)({ onload: Rr, render: 'explicit', hl: t })}`;
                  Me(s).catch(() => {
                    clearTimeout(o), r(b(e, 'internal-error'));
                  });
                })
          );
        }
        clearedOneInstance() {
          this.counter--;
        }
        shouldResolveImmediately(e) {
          var t;
          return (
            !!(null === (t = nr().grecaptcha) || void 0 === t ? void 0 : t.render) &&
            (e === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded)
          );
        }
      }
      function jr(e) {
        return e.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(e);
      }
      class Mr {
        async load(e) {
          return new kr(e);
        }
        clearedOneInstance() {}
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */ const Fr = 'recaptcha',
        Ur = { theme: 'light', type: 'image' };
      class Vr {
        constructor(e, t = Object.assign({}, Ur), n) {
          (this.parameters = t),
            (this.type = Fr),
            (this.destroyed = !1),
            (this.widgetId = null),
            (this.tokenChangeListeners = new Set()),
            (this.renderPromise = null),
            (this.recaptcha = null),
            (this.auth = We(n)),
            (this.isInvisible = 'invisible' === this.parameters.size),
            S('undefined' !== typeof document, this.auth, 'operation-not-supported-in-this-environment');
          const r = 'string' === typeof e ? document.getElementById(e) : e;
          S(r, this.auth, 'argument-error'),
            (this.container = r),
            (this.parameters.callback = this.makeTokenCallback(this.parameters.callback)),
            (this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new Mr() : new Lr()),
            this.validateStartingState();
        }
        async verify() {
          this.assertNotDestroyed();
          const e = await this.render(),
            t = this.getAssertedRecaptcha(),
            n = t.getResponse(e);
          return (
            n ||
            new Promise(n => {
              const r = e => {
                e && (this.tokenChangeListeners.delete(r), n(e));
              };
              this.tokenChangeListeners.add(r), this.isInvisible && t.execute(e);
            })
          );
        }
        render() {
          try 